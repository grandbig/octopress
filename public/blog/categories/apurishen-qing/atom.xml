<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: アプリ申請 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/apurishen-qing/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BLEMeasure Ver3.0(iPhoneアプリを申請しました(4))]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0/"/>
    <updated>2015-04-25T11:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/25/ble-measure-3-0-0</id>
    <content type="html"><![CDATA[<h4>BLEMeasure Ver3.0の紹介</h4>

<p>約1年ぶりに本アプリのバージョンアップに着手しました。<br/>
主な改善点・修正点としては下記です。</p>

<ul>
<li>デザイン, UIの変更</li>
<li>マルチiBeaconの検知機能の実装</li>
<li>iOS8対応</li>
<li>iPhone6およびiPhone6 Plus対応</li>
<li>バグFix</li>
</ul>


<p><del>※現在、アップデート申請中のため、公開されていません。</del><br/>
<del>(公開され次第、合わせてブログを更新する予定です。)</del><br/>
2015/05/28にめでたく公開されました！！<br/>
本記事を書いてから、実に1ヶ月もの時間を要したのですが、そこには新たに判明した事柄があったためです。<br/>
そこについて本記事に追記させて頂きます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>今回アップデートを行った理由としては、なぜかうまく起動しないという問題があったためです。<br/>
少し苦労したのが、手違いで完全に昔のプロジェクトを削除してしまっていたため、初めから作り直したところです。</p>

<h4>BLEMeasureの使い方(How to use BLEMeasure)</h4>

<p>さて、ここからは審査も見据えて使い方を日本語＋拙い(多々間違いのあるであろう)英語で解説していきたいと思います。</p>

<h5>iBeacon発信手順(Procedure of advertising iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Advertiseボタンをタップ(Tap the advertise button)</li>
<li>STARTボタンをタップ(Tap the start button)</li>
</ol>


<p><img src="/images/ble_measure_v3_1.png" alt="BLEMeasure Procedure1" /></p>

<h5>iBeacon距離計測手順(Procedure of measuring the distance between a peripheral device and a central device)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Measureボタンをタップ(Tap the measure button)</li>
</ol>


<p><img src="/images/ble_measure_v3_2.png" alt="BLEMeasure Procedure2" /></p>

<p>※ 周りにiBeacon発信端末が見つからない場合は0mと表記されます(If the device can&rsquo;t find the advertising device, the distance is 0m.)</p>

<h5>複数iBeaconの検知手順(Procedure of searching the multi iBeacon)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Searchボタンをタップ(Tap the search button)</li>
</ol>


<p>※ 周りにiBeaconが見当たらない場合は何も表示されません(You don&rsquo;t look at the iBeacon list if there aren&rsquo;t iBeacon around you.)<br/>
※ テーブルビューのプルダウンもしくは右上の更新ボタンで周囲のiBeaconを再検索することができます(You can search iBeacon again by pulling down the table view or tapping the update button)</p>

<p><img src="/images/ble_measure_v3_3.png" alt="BLEMeasure Procedure3" /></p>

<h5>iBeaconパラメータの設定手順(Procedure of setting the advertising iBeacon parameters)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Settingsボタンをタップ(Tap the settings button)</li>
<li>UUID, major, minorの値を入力して、Saveボタンをタップ(Enter the parameters and tap the save button)</li>
</ol>


<p><img src="/images/ble_measure_v3_4.png" alt="BLEMeasure Procedure4" /></p>

<h5>アプリ関連情報の確認手順(Procedure of confirming the information about the app)</h5>

<ol>
<li>中央の赤いボタンをタップ(Tap the central red button)</li>
<li>Aboutボタンをタップ(Tap the about button)</li>
</ol>


<p><img src="/images/ble_measure_v3_5.png" alt="BLEMeasure Procedure5" /></p>

<h4>アップデート完了までの道のり</h4>

<p>さて、ここからは追記になります。<br/>
さらっと審査が通るかと思っていたものの、実に2度の <strong>リジェクト</strong> を受けました。</p>

<p>リジェクトの理由は、本アプリでも受けていた設定画面のUUID/major/minorの手動変更が<a href="http://adcdownload.apple.com//Documents/license_agreements__ios_standard/iOS_Program_Standard_Agreement_20150309.pdf">iOS Developer Program License Agreement</a>の3.3.1項目に違反するとされたためです。<br/>
既存のバージョンで問題視されていなかった項目だったため、その旨を伝えたり、major/minorの手動変更のみを削除したり(UUIDのみの手動変更を許可したり)したものの、同様の理由でリジェクトされました。</p>

<p>因みに同項目では、<br/>
<strong>Applications may only use Documented APIs in the manner prescribed by Apple and must not use or call any private APIs.</strong> <br/>
と記されています。</p>

<p>要は、Public APIがAppleの意図せぬ形で使われている or Private APIを使っている場合に引っかかる項目ということです。<br/>
他に手動変更を許可しているアプリはもうアップデートできないんじゃないかな&hellip;なんて思ってしまいました。</p>

<p>専用のBeacon機器を出している会社さんの場合はOKなのかは気になるところです。<br/>
これができないとなると、iBeaconが普及し得ないと思いますし&hellip;。</p>

<p>本日は以上です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリを開発する上で気をつけよう！ProductionとDevelopment]]></title>
    <link href="http://grandbig.github.io/blog/2014/06/22/productionanddevelopment/"/>
    <updated>2014-06-22T20:46:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/06/22/productionanddevelopment</id>
    <content type="html"><![CDATA[<h3>iOSアプリの開発で失敗しないためのお約束</h3>

<p>お久しぶりです！！最近はインターネットを使えない状況だったため、ブログの更新が滞っていました。しかし、本日からブログ再開したいと思います。<br/>
とは言うものの、約１ヶ月ぶりなため、リハビリを兼ねて今日は軽い内容にしておきたいと思います。</p>

<p>本日のお題は<strong>iOSアプリの開発で失敗しないために何を確認すべきか</strong>です。<br/>
開発者が自分のアプリを開発し、Appleに申請するのであれば、まず間違えることはないでしょう。<br/>
しかし、証明書を自身で発行せずに、他者が発行した証明書を用いてipaファイルもしくはappファイルを作成する場合は気をつけておかないとハマってしまうことがあります。</p>

<p>それは各種証明書が<strong>Production</strong>、<strong>Development</strong>のどちらで作成されたものかということです。</p>

<!--more-->


<p>これら２つは何が異なるのでしょうか？<br/>
簡単に言ってしまえば<br/>
■ Production<br/>
App Storeに公開するために必要な証明書<br/>
■ Development<br/>
開発者が動作を確認するために利用する証明書<br/>
ということです。</p>

<p>これを把握した上で、証明書を確認しておかないと下記に記す、<strong>気をつけないと陥ってしまう問題</strong>にぶつかることでしょう。</p>

<p><strong>気をつけないと陥ってしまう問題</strong><br/>
1: アプリのリリースのためにappファイルをAppleに申請したが、リジェクトされた。(Development用の証明書を使ったため)<br/>
2: 商用アプリのプッシュの証明書の期限が近づいたので、プッシュ証明書を新たに出力し直したが、プッシュが届かない。(Development用のプッシュ証明書を使ったため)</p>

<p>では、証明書を判別するにはどうすれば良いのでしょうか？<br/>
上記の1の場合は簡単です。<strong>『キーチェーンアクセスで確認』</strong>すれば良いのです。実際にキーチェーンアクセスを見てみましょう。登録した証明書が表示されているはずです。<br/>
<img src="/images/pdt_dev.png" alt="キーチェーンアクセス" /></p>

<p>しかし、上記2の場合はもう１つ方法があります。それは<strong>pemファイルの中身を確認</strong>するということです。cert側から生成したpemファイルをターミナルやテキストエディタで開いてみましょう。<br/>
<img src="/images/pdt_dev2.png" alt="cert.pemファイルの中身" /><br/>
このように<strong>Production</strong>か<strong>Development</strong>かが記されています。</p>

<p>たったこれだけのことなんですが、忘れた頃にハマってしまう問題なので、頭の片隅にでも置いておくと良いと思います。</p>

<p>さ〜て、最近はSwiftも発表されたことだし、次回のブログ更新に向けてプログラミングでもしますか〜ってことで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリを申請しました(3)]]></title>
    <link href="http://grandbig.github.io/blog/2014/05/10/submit-ios-app3/"/>
    <updated>2014-05-10T00:39:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/05/10/submit-ios-app3</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリのバージョンアップ申請をしました</h3>

<p>本日、<strong>BLEMeasure 2.0</strong>を公開しました。昨年から公開しているBLEメジャーのバージョンアップとなります。今回はバージョンアップまでの道のりを紹介したいと思います。<br/>
<img src="/images/blemeasure_v2.png" alt="BLEMeasure 2.0" /><br/>
下記からダウンロードページにいけます<br/>
<a href="https://itunes.apple.com/jp/app/blemeja/id741597546?mt=8&uo=4" target="itunes_store"style="display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.png) no-repeat;width:135px;height:40px;@media only screen{background-image:url(https://linkmaker.itunes.apple.com/htmlResources/assets/ja_jp//images/web/linkmaker/badge_appstore-lrg.svg);}"></a></p>

<!--more-->


<p>さて、早速説明していきましょう。Appleへのアプリ提出までは<a href="http://grandbig.github.io/blog/2013/10/14/submit-ios-app/">iPhoneアプリを申請しました</a>や<a href="http://grandbig.github.io/blog/2013/11/02/submit-ios-app2/">iPhoneアプリを申請しました(2)</a>を確認してください。<br/>
Appleへのアプリ提出が終わった時点で<strong>Waiting for Review</strong>になっているはずです。私が提出したのは<strong>2014/05/07 01:00頃</strong>だったのですが、翌々日には<strong>In Review</strong>になりました。ここから怒涛のように審査が進んでいきました。てっきり１回はRejectされると思っていたのですが、今回は動画説明もなしですんなり審査を通過しました。Reviewが始まってから終了するまで<strong>約5時間程度</strong>でした。</p>

<p>Apple IDを当然持っているので、<strong>Waiting for Review 〜 Processing for App Store</strong>までのステータス変更はメールで通知が来ます。<br/>
また、<strong>iTunes Connect Mobileアプリ</strong>をiPhoneやiPadなどにインストールしていれば、上記ステータスが変更するごとにプッシュ通知で連絡してくれます。<br/>
その結果、iPhoneのプッシュ通知画面が下記のようになり、実に気持ちの良い状態になります。<br/>
<img src="/images/itc_mobile_push.png" alt="iTC Mobileプッシュ通知" /></p>

<p>さらに、iTunes Connect Mobileアプリでは一連の申請の流れを下記のように確認することができます。<br/>
<img src="/images/submit_app_status_history.png" alt="iTC Mobile Status History" /></p>

<p>バージョンアップはかなり早く審査が済むことがわかりました。因みに今回はiAdを実装しようと思っていたのですが、うまくいってないようなので、調べ直しです笑。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリを申請しました(2)]]></title>
    <link href="http://grandbig.github.io/blog/2013/11/02/submit-ios-app2/"/>
    <updated>2013-11-02T22:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/11/02/submit-ios-app2</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリをApp Storeで公開するまでの話</h3>

<p>本日、私が個人的に開発したiPhoneアプリがApp Storeで公開されました。<br/>
それまでの流れと苦労(さほどしなかったが&hellip;)を記憶に留めるために書いておこうかと思います。ついでに私が公開したアプリも紹介します笑<br/>
これ→<a href="https://itunes.apple.com/us/app/zu-ji-ji/id725412788?l=ja&amp;ls=1&amp;mt=8">足跡計</a><br/>
App Storeで検索するときは<strong>足跡計, 足跡</strong>を入力して下さい。下記アイコンのアプリが出てくるはずです。<br/>
<img src="/images/ashiatokei_icon.png" alt="足跡計のアイコン" /></p>

<!--more-->


<h4>Keynoteを使ったホームアイコン&amp;スプラッシュ画面の作成について補足</h4>

<p>前回、iPhoneアプリを申請したときにブログで書かせて頂いたKeynoteを用いた『ホームアイコン&amp;スプラッシュ画面』について補足しておきたいと思います。<br/>
前回のブログ記事: <a href="http://grandbig.github.io/blog/2013/10/14/submit-ios-app/">iPhoneアプリを申請しました</a></p>

<p>1: Keynoteでホームアイコンを作成<br/>
Keynoteでホームアイコンを作成するときは、iPhoenアプリ申請に必要な最大サイズで作りましょう。最大サイズは1024×1024です。その他、必要な画像サイズについては多くのサイトで紹介さえているので、そちらをご覧ください→<a href="http://dev.classmethod.jp/references/ios-device-icon-file-list-2013-9/">アイコンファイル早見表</a></p>

<p>因みにKeynoteで作成した画像は<strong>ToyViewer</strong>を使って画像として抽出しました。多少、サイズがずれてしまったりするので調整が必要ですが、非常に簡単に画像が作成できるのでオススメです。<br/>
2: スプラッシュ画面を作成<br/>
スプラッシュ画面は最大サイズが640×1136となっています。OSをMarvericksにしてからKeynoteを最新バージョンにすることができます。最新(青色)のKeynoteを使うとスライドサイズを非常に簡単に変更することができます。
<img src="/images/create_icon_by_keynote1.png" alt="Keynoteのスライドサイズを変更" /></p>

<h4>iPhone申請時のステータスについて</h4>

<p>さ〜てここからが本日の本題です。まずはiPhone申請時のステータスについてご紹介します。<br/>
iPhoneアプリを申請するにあたってiTunes Connectで今、自分のアプリがどんな状態にあるのか確認することができます。それを見て、ウキウキワクワクするわけです。<br/>
いろいろとあるようですが、私が実際に体験したステータスについて紹介します。<br/>
・Waiting For Review: 『これからレビューするんで待ってて下さい。』ということ。この時点で1〜2週間待ちます。(Reject後の再申請では1週間ほど待ちました)  <br/>
・In Review: 『今、レビュー中です』ということ。<br/>
・Rejected: 『審査が通らず、アプリが棄却されました』ということ。最も凹むステータスです。<br/>
・Processing for App Store: 『審査が通りました。』ということ。ただし、この時点ではApp Storeには公開されていません。<br/>
・Ready For Sale: 『App Storeに公開されています。』ということ。</p>

<p>結構、ハマることなのかもしれませんが、<strong>Processing for App Store</strong>にステータスがなった後、すぐには<strong>Ready For Sale</strong>にならないようです。私の場合、数時間経っても変わらなかったのでiTunes Connect > View Details > MetaData and Uploadsを編集しました。すると即座に<strong>Ready For Sale</strong>に変更されました。そして数分後(少なくとも1時間以内)にはApp Storeで公開されました。また、数時間してApp StoreからKeywords検索できるようになりました。</p>

<h4>Rejectについて</h4>

<p>私は今回、申請したアプリで１度リジェクトされました。リジェクト判定されるとその理由が説明されるわけですが、そのときは<br/>
<img src="/images/iphone_app_reject_contents.png" alt="リジェクト内容" /><br/>
といった内容でした。<br/>
簡単に言うと<strong>アプリの使い方のビデオを作成して、リンクを教えよ！</strong>ってことです。</p>

<p>これは全く予想していなかったリジェクト内容でした。しかし、ネット上では同じリジェクトを受けてる人は結構いるようですね&hellip;。YouTubeなどとにかく見れるところにアップすれば良いようなので、ビデオ作成をすることにしました。</p>

<p>初めはiPhone2台持ちで外出して撮影を実行したのですが、明らかに不審者がられる &amp; 動画がぶれぶれ &amp; iPhoneでの動画はあまりキレイじゃなかった といった理由から断念しました。<br/>
そこで、キャプチャをとって説明書きを入れていく形で動画を撮影しました。そう、動画として撮影する必要はなかったのです。</p>

<p><a href="http://www.youtube.com/watch?v=r2nHW-imRv4">作成した動画はこちらです</a><br/>
慣れない英語で説明を書いているので間違っている部分が多々あると思いますが、ご愛嬌で&hellip;。<br/>
このリンクはiTunes Connect内の該当アプリのReview Notesに書きました。ついでにこういうアプリなんだぞ！と説明を書いておきました。<br/>
今回は上記対応で1週間後にめでたくアプリの申請を通過することができました。</p>

<h4>アプリ申請の総括</h4>

<p>個人で開発して申請したアプリだったので、結構時間がかかるのかなと予想していましたが、法人 or 個人は関係ないようですね。初めにアプリをアップロードした日付が10/13だったので大体3週間程度で申請許可がおりました。(動画の作成を早めていればもう少し早くできたと思います。)
今後はバージョンアップも視野に入れているので、その際にどの程度時間がかかるものなのか調べてみたいと思います。</p>

<p>最後に、今回、私が開発したアプリは実は開発者支援を意識したアプリであって、通常の消費者が使う用途はほとんどありません。簡単に言うと本アプリは『iPhoneで位置情報を使おうという開発者に<strong>精度と電池消耗率との兼ね合いを考えることを支援するツール</strong>』となっています。いざ、位置情報を使おう！と思ったときに参考になればと思います。<br/>
まぁ、App Storeからでは埋もれて探すことなどできないかもしれませんが笑。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<!-- 広告2 -->


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneアプリを申請しました]]></title>
    <link href="http://grandbig.github.io/blog/2013/10/14/submit-ios-app/"/>
    <updated>2013-10-14T19:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/10/14/submit-ios-app</id>
    <content type="html"><![CDATA[<h3>iPhoneアプリの申請に苦労した話</h3>

<p>9月から細々と開発を続けていたiPhoneアプリをとうとう申請することにしました。開発が終盤に差し掛かるにつれて、ブログをなかなか書くことができなかったのですが、ひとまず一段落したということで久しぶりに書きます。</p>

<!--more-->


<h4>iPhoneアプリを申請する前の注意点</h4>

<p>まず、申請についてお話する前に、申請前に気をつけなくてはならないことについて紹介します。<br/>
<strong>1: 外部のframeworkを使用している場合</strong><br/>
現在、世の中には無数のframeworkがgithubに上がっています。下手に自分で開発をするよりも、既に先駆者が開発し、バグを修正し続けたものを使用した方がはるかに安定したアプリとなり、さらに迅速に開発をすすめることができます。<br/>
しかし、注意しなくてはならないのは<strong>ライセンス</strong>です。ライセンスの種類としてはMITライセンス, GPLライセンス, MPLライセンス…などなどあります。これらのライセンスにのっとった使い方をしないとアプリの公開を中止せざるを得なくなるなど様々なことが起きてしまうことでしょう。<br/>
MITライセンスは比較的面倒なことが少ないので、MITライセンスだと「ラッキー！」と思います笑<br/>
詳しいライセンス条件については<a href="http://smkn.xsrv.jp/blog/2009/03/summary_for_gpl_mit_cc_etc/">GPLやMITやCCなど主要ライセンスの内容と意味のまとめ</a>などの先駆者のページをご参照下さい。<br/>
<strong>2: ネット上のアイコンを使用している場合</strong><br/>
iPhoneアプリを開発する上で欠かすことができないもの、それは画像(アイコン)です。<a href="http://www.adobe.com/jp/products/illustrator.html">Adobeイラストレータ</a>やフリーソフトの<a href="http://www.gimp.org/">Gimp</a>, 最近で言うと<a href="https://www.google.com/webdesigner/">Google Web Designer</a>(ただし、ベータ版)などが使いこなせる方は悩む必要はないのですが、ほとんどの方がフリーアイコンをネット上から探されるのではないでしょうか。<br/>
このときも当然ライセンスに気をつけなくてはなりません。特に商用フリーを謳っているものであってもよくよく詳細を見てみるとリンクを貼る、あるいはメール送信して許可をとるなど制限があることがあります。これに気づかずに、実装したままアプリを申請してしまうとこれまたアプリの公開を中止することになりかねません。<br/>
十分にライセンスには注意しましょう。<br/>
また、制限のない商用フリーアイコンであったとしても、明らかに著作権を違反しているものもあります。映画やアニメのキャラクターを使ったりしている場合ですね…。ま、これはぱっと見でわかるでしょう。</p>

<h4>ホームアイコンの作成方法</h4>

<p>筆者はホームアイコンの作成を考えたとき、初めに思い浮かんだのがGimpを使うという方法でした。しかし、ネットで調べてみると、あぁKeynoteを使えばよいのかと思い知らされました。Keynoteは有料アプリだったので購入する必要がありましたが、筆者はインストール済みだったため、このハードルは既にクリアしていました。<br/>
個人的にはGimpは慣れないと非常に使いにくいと思っているので、使い慣れたPowerPointに近いKeynoteを選択しました。<br/>
最近はiOS7になって、フラットデザイン押しになったこともあり、あえて立体感を出すようにアイコンに影をつけるといったことをする必要もあまりないでしょう。なので、Keynote上で正方形ベースにアイコンを貼ったり、文字を書いたりするだけで作成ができてしまうんです。<br/>
唯一、困るのが1024×1024など大きなアイコンやスプラッシュ画面の作成ではKeynoteのスライドをはみ出してしまうということだったのですが、スライドの大きさはカスタマイズできるので問題ありませんでした。<br/>
参考: <a href="http://support.apple.com/kb/HT2925?viewlocale=ja_JP">アーカイブ &ndash; Keynote 2: スライドの解像度をデフォルトのサイズから変更する方法</a></p>

<h4>iTunes Connect上で登録</h4>

<p>さて、いよいよアプリの申請作業に入っていきます。筆者はてっきり、iTunes Connect上で終了するのかと思っていたのですが、アプリ自体の送信は別作業なんですね…。<br/>
筆者は<a href="http://docs.monaca.mobi/ja/manual/deploy/appstore/reg_appstore/">iOS版アプリのApp Storeへの登録</a>を見て滞りなくiTunes Connectに登録できました。思った以上に必須項目が多かったこと、アプリの説明文章を考えていなかったり、App Storeで公開するキャプチャを用意してなかったり準備が足りなかったことが響き、とても時間がかかりました。(特に3.5インチのキャプチャは困りました。なんとかシミュレータ起動することでクリアしましたが…)</p>

<h4>アプリをAppleに送信する方法</h4>

<p>いよいよアプリをAppleに送ります。これにはどうやら２種類の方法があるようです。<br/>
<strong>1: Application Loaderを使う方法</strong><br/>
iTunes ConnectからダウンロードするApplication Loaderを利用することで申請ができるようです。しかし、筆者が試したところ、何度やっても『ネットワークが接続できません』と出てしまい、ダメでした。途方に暮れていたところ、次の方法の存在を知りました。<br/>
<strong>2: Xcodeを使う方法</strong>
もう１つの方法はXcodeを使う方法です。ここでは証明書の発行&amp;プロビジョニングファイルの発行と設定などは省略します。<br/>
まずは、Product > Archiveを選択して下さい。<br/>
<img src="/images/xcode_archive1.png" alt="ProductからArchiveを選択" /><br/>
するとOrganizerウィンドウが開かれるので『Distribute&hellip;』を選択して下さい。<br/>
<img src="/images/xcode_archive2.png" alt="Distributeを選択" /><br/>
次に『Submit to the iOS App Store』を選択して下さい。<br/>
<img src="/images/xcode_archive3.png" alt="Submit to the iOS App Storeを選択" /><br/>
最後にユーザ名とパスワードを確認して次に進めば終了です。
<img src="/images/xcode_archive4.png" alt="UsernameとPasswordを確認" /></p>

<p>さて、リジェクトされることも十分考えられますので、気長に待ちつつ、何か参考になることがあれば、ブログでもどしどし紹介していこうと思います。ということで本日はここまで。</p>
]]></content>
  </entry>
  
</feed>
