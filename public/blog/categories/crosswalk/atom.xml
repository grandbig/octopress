<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: crosswalk | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/crosswalk/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CROSSWALKの性能を確かめよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/12/crosswalk-test/"/>
    <updated>2015-04-12T16:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/12/crosswalk-test</id>
    <content type="html"><![CDATA[<h4>CROSSWALKは果たして優秀なのか！？</h4>

<p>以前、CROSSWALKについて紹介させて頂きました。<br/>
メリット/デメリットはいろいろなサイトで紹介されていますが、実際に性能はどうなのか気になりますよね？<br/>
そこで今回は幾つかの端末を用いて試験をしてみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Sunspiderでベンチマーク</h5>

<p>試験に利用した端末は下記3つです。</p>

<ul>
<li>Android4.4.2 / AQOUS 305SH</li>
<li>Android4.2.2 / AQOUS 303SH</li>
</ul>


<p>これら端末で下記4つのWebの性能を確かめました。</p>

<ul>
<li>CROSSWALK</li>
<li>標準のWebView</li>
<li>標準のブラウザ</li>
<li>Chrome</li>
</ul>


<p>早速ですが、結果を載せます。</p>

<p><img src="/images/crosswalk_sunspider_305sh.png" alt="Android4.4.2, AQOUS 305SH, Sunspider結果" /><br/>
<img src="/images/crosswalk_sunspider_303sh.png" alt="Android4.2.2, AQOUS 303SH, Sunspider結果" /></p>

<p>結果を見ると、処理速度だけで言えば、必ずしもCROSSWALKが優秀とは言えないことがわかります。<br/>
しかし、CROSSWALKの良さは処理速度に限ったことではありません。<br/>
何と言っても最新のChromiumと同じHTML, CSSの対応度合いが肝です。<br/>
では続けて、HTMLとCSSに関して試験してみましょう。</p>

<h5>HTML5のテスト</h5>

<p>まずは、HTML5の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="https://html5test.com/">HTML5test</a>です。<br/>
HTML5testは550点満点なので、数値が550に近いほど優秀と言えます。</p>

<p><img src="/images/crosswalk_html5test_305sh.png" alt="Android4.4.2, AQOUS 305SH, HTML5Test結果" /><br/>
<img src="/images/crosswalk_html5test_303sh.png" alt="Android4.2.2, AQOUS 303SH, HTML5Test結果" /></p>

<p>これはさすがの結果と言えるでしょう。<br/>
Chromeの方が高かったりしますが、標準のWebViewや標準のブラウザに比べれば遥かに優秀であると言えます。</p>

<h5>CSS3のテスト</h5>

<p>次に、CSS3の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="http://css3test.com/">The CSS3 Test</a>です。<br/>
The CSS3 Testは100%満点の%で表現されます。</p>

<p><img src="/images/crosswalk_css3test_305sh.png" alt="Android4.4.2 AQOUS 305SH, CSS3Test結果" /><br/>
<img src="/images/crosswalk_css3test_303sh.png" alt="Android4.2.2 AQOUS 303SH, CSS3Test結果" /></p>

<p>こちらもCROSSWALKがメリットとなる結果と言えるでしょう。<br/>
Chromeと同じ対応度合いであったので、全く問題がないと言えると思います。</p>

<h5>まとめ</h5>

<p>以上の結果を見ると、処理速度が気になるものの、WebSocketやWebGL, WebRTCなどに対応した上で、ターゲットにAndroid4.0〜4.3を含めたいのであれば、CROSSWALKは入れるべきと言えるでしょう。<br/>
Android5.0以上がほとんどを占める世の中になったとしたら、何も考えずに標準のWebViewを使えば良いのかもしれないですが、まだまだ先の話でしょう。<br/>
と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでCROSSWALKを使おう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/28/crosswalk/"/>
    <updated>2015-03-28T13:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/28/crosswalk</id>
    <content type="html"><![CDATA[<h4>Androidでハイブリッドアプリを作ろう</h4>

<p>以前、iOSではiOS8からWKWebViewという新しいWebViewが追加されたことを説明しました。<br/>
では、Androidはどうなのでしょうか？</p>

<p>Androidは4.3までWebKitベースのWebViewをアプリに組み込んでいました。<br/>
しかし、Android4.4より、ChromiumベースのWebViewとなりました。ここで、大きく異なるのはレンダリングエンジンが <strong>Blink</strong> になったというところです。<br/>
また、Android4.4まではChromiumがバージョンアップされたとしても、各メーカーがAndroidのOSバージョンアップを提供しなければ、最新のWebViewを利用することができませんでした。</p>

<p>この現状を見たのかGoogleはAndroid5.0以降、WebViewをOSから切り離し、Google Play経由でバージョンアップ可能としました。<br/>
よって、メーカーがOSのバージョンアップをする/しないに関わらず、Google側の意志で最新のWebViewをユーザに提供可能となったのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>近年はAndroid2.xを使っているユーザもだいぶ減少してきました。<br/>
が、未だ、Android4.0〜4.3の端末を利用しているユーザは相当数、存在しています。<br/>
では、4.x〜5.0.xまでの端末全てに対応するハイブリットアプリを作成するためには、各バージョンに気をつけつつ、開発するしかないのでしょうか？</p>

<p>本記事では、 <strong>CROSSWALK</strong> に注目し、上記の問題に対応することとしました。</p>

<h4>CROSSWALKを組み込もう</h4>

<p>まずは、CROSSWALKのレポジトリを追加できるようにしましょう。</p>

<p>```java
// build.gradle(Module: app)
apply plugin: &lsquo;com.android.application&rsquo;</p>

<p>android {</p>

<pre><code>....
</code></pre>

<p>}</p>

<p>// ここを追加
repositories {</p>

<pre><code>maven {
    url 'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:21.0.3'
compile 'org.xwalk:xwalk_core_library:10.39.235.15'     // ここも追加
</code></pre>

<p>}</p>

<p>```</p>

<p>次に、CROSSWALKのWebViewである <strong>XWalkView</strong> を画面に組み込みましょう。</p>

<p>```xml
// activity_main.xml
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
android:layout_height="match_parent" android:paddingLeft="0dp"
android:paddingRight="0dp"
android:paddingTop="0dp"
android:paddingBottom="0dp" tools:context=".MainActivity"&gt;

&lt;!-- XWalkViewを追加 --&gt;
&lt;org.xwalk.core.XWalkView
    android:id="@+id/xwalkWebView"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:background="#000000"
    /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>続いて、AndroidManifest.xmlにWebViewを使うための設定を書きましょう。</p>

<p>```xml
// AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.crosswalksample" &gt;

&lt;!-- 追加 --&gt;
&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;

....
</code></pre>

<p></manifest>
```</p>

<p>そして、メイン画面にWebViewの設定を書き込みましょう。</p>

<p>```java
// MainActivity.java</p>

<p>package com.example.takahiro.crosswalksample;</p>

<p>import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import org.xwalk.core.XWalkView;</p>

<p>public class MainActivity extends ActionBarActivity {</p>

<pre><code>private XWalkView mXWalkView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mXWalkView = (XWalkView) findViewById(R.id.activity_main);
    mXWalkView.load("https://www.google.co.jp", null);
}

@Override
protected void onPause() {
    super.onPause();
    if (mXWalkWebView != null) {
        mXWalkWebView.pauseTimers();
        mXWalkWebView.onHide();
    }
}

@Override
protected void onResume() {
    super.onResume();
    if (mXWalkWebView != null) {
        mXWalkWebView.resumeTimers();
        mXWalkWebView.onShow();
    }
}

@Override
protected void onDestroy() {
    super.onDestroy();
    if (mXWalkWebView != null) {
        mXWalkWebView.onDestroy();
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>これでAndroid4.x 〜 5.xで同じChromiumベースのWebViewを利用することができるはずです。<br/>
といったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://diego.org/2015/01/07/embedding-crosswalk-in-android-studio/">Embedding Crosswalk in Android Studio</a></li>
<li><a href="https://crosswalk-project.org/documentation/embedding_crosswalk.html">Embedding the Crosswalk Project</a></li>
<li><a href="https://crosswalk-project.org/apis/embeddingapidocs_v3/org/xwalk/core/XWalkView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String">XWalkView Reference</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
