<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode6 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/xcode6/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode6.2で使ってみようDoxygen]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/05/doxygen/"/>
    <updated>2015-04-05T14:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/05/doxygen</id>
    <content type="html"><![CDATA[<h4>Doxygen</h4>

<p>さて、本日はDoxygenについて書こうと思います。<br/>
筆者はAppleライクなリファレンスを生成できる<a href="https://github.com/tomaz/appledoc">appledoc</a>を利用していましたが、なぜかXcode6.2でうまく生成できないことやAppleの公式リファレンスのデザインが以前より大幅に変更されたことから<a href="http://www.doxygen.jp/">Doxygen</a>を使うことにしました。</p>

<p>DoxygenはC++, C, Java, Objective-C, Python, IDL, Fortran, VHDL, PHP, C#のためのドキュメントジェネレータツールです。<br/>
独特のリファレンススタイルであるものの、下記3点のメリットがあると公式サイトに書かれています。</p>

<ul>
<li>ドキュメントとソースコードの一貫性を保つことが容易</li>
<li>文書化されていないソースファイルから、 コードの構造を抽出するように設定可能</li>
<li>Doxygen を「乱用 (abuse)」して、 通常のドキュメントを作成可能</li>
</ul>


<p>では、早速使ってみることにしましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Doxygenの使い方</h5>

<p>まず、<a href="http://www.stack.nl/~dimitri/doxygen/download.html#srcbin">Doxygen公式サイト</a>からダウンロードしましょう。<br/>
PCへのインストールが完了すると、下記のウィンドウが表示されます。<br/>
<img src="/images/doxygen_1.png" alt="Doxygen.app" /></p>

<p>ドラッグ＆ドロップでApplicationに追加しましょう。</p>

<p>Doxygenを起動します。<br/>
すると下記のようなウィンドウが表示されます。<br/>
<img src="/images/doxygen_4.png" alt="Doxygenウィンドウ" /></p>

<p>各項目を下記のように指定しましょう。<br/>
<img src="/images/doxygen_3.png" alt="Doxygenウィンドウに各項目を指定" /></p>

<p>そして、Runをクリックしてタブを切り替えます。そして、Run doxygenをクリックします。<br/>
すると、Output produced by doxygenにログが出力されます。</p>

<p><img src="/images/doxygen_2.png" alt="ログを出力" /></p>

<p>完了したら、 <strong>Show HTML output</strong> をクリックしましょう。<br/>
ブラウザが起動して、リファレンスが表示されるはずです。</p>

<p><img src="/images/doxygen_5.png" alt="リファレンス" /></p>

<p>クラス間の関係性もわかるため、なかなか良い気がします。<br/>
appledocとほとんど書式も同じっぽいですし。<br/>
少しずつ慣れていこうと思います。<br/>
といったところで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6 Storyboardで多言語対応してみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/12/07/multilanguage/"/>
    <updated>2014-12-07T17:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/12/07/multilanguage</id>
    <content type="html"><![CDATA[<h4>Xcode6を使った多言語対応</h4>

<p>本日はXcode6(正確にはXcode6.1.1)で多言語対応する方法を書きます。<br/>
全スクリーンショットを載せます。</p>

<p>まず、多言語化に使うサンプルプロジェクトは下記です。<br/>
StoryboardにはLabelとButtonを1つずつ配置します。<br/>
<img src="/images/multiLanguage1.png" alt="StoryboardにLabelとButtonを配置" /></p>

<!-- more -->


<p>ソースは下記とします。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController () <UIAlertViewDelegate></p>

<p>@property(strong, nonatomic) UIAlertView *alert;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  self.alert.delegate = self;
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>// アラートの表示
&ndash; (IBAction)showAlert:(id)sender {</p>

<pre><code>self.alert = [[UIAlertView alloc] initWithTitle:@"確認"
                                        message:@"テスト"
                                       delegate:self
                              cancelButtonTitle:nil
                              otherButtonTitles:@"OK", nil];

[self.alert show];
</code></pre>

<p>}
@end</p>

<p>```</p>

<p>では、早速、多言語化を進めていきましょう。</p>

<ol>
<li><p>PROJECT > info > Localizationsに項目を追加<br/>
初めはEnglishのみ項目があります。『＋』をクリックして、追加したい言語を選択しましょう。<br/>
<img src="/images/multiLanguage2.png" alt="Localizationsに項目追加" /><br/>
<img src="/images/multiLanguage3.png" alt="追加したい言語を選択" /><br/>
<img src="/images/multiLanguage4.png" alt="チェックがついていることを確認" /></p></li>
<li><p>Main.storyboardの追加
次にstoryboardに言語の設定を追加しましょう。<br/>
Main.storyboardを選択し、右メニューの『Show the File inspector』> Localizationを見てください。<br/>
ここで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage5.png" alt="Main.storyboardに言語設定を追加" /></p></li>
<li><p>LaunchScreenの追加<br/>
そして、Main.storyboardで実施したのと同様にLaunchScreenでも言語を設定しましょう。<br/>
LaunchScreen.xibを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage6.png" alt="LaunchScreen.xibに言語設定を追加" /></p></li>
<li><p>Info.plistの追加
同様にInfo.plistでも言語を設定しましょう。<br/>
Info.plistを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage13.png" alt="Info.plistに言語設定を追加" /><br/>
アプリ名など言語ごとに変更したいKeyの値を変えましょう。</p></li>
<li><p>Localizable.stringsファイルの追加<br/>
続いて、ソース内の文言を多言語化する手順です。<br/>
Supporting FilesにStrings FileをLocalizable.stringsというファイル名で追加しましょう。<br/>
今は保存場所はあまり気にしなくて構いません。<br/>
ファイルを追加したら、Localizable.stringsを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage7.png" alt="Strings Fileを追加" /><br/>
<img src="/images/multiLanguage8.png" alt="Baseを選択したまま進む" /><br/>
<img src="/images/multiLanguage9.png" alt="Localizable.stringsに言語設定を追加" /></p></li>
<li><p>Localizable.stringsファイルに文言を追加
先ほど追加したファイルに文言を追加しましょう。</p></li>
</ol>


<p>```objective-c
// Localizable.strings(Base)ファイル
&ldquo;alertTitle&rdquo;=&ldquo;Confirm&rdquo;;
&ldquo;alertMessage&rdquo;=&ldquo;Test&rdquo;;
&ldquo;alertOKBtn&rdquo;=&ldquo;OK&rdquo;;</p>

<p>// Localizable.strings(English)ファイル
&ldquo;alertTitle&rdquo;=&ldquo;Confirm&rdquo;;
&ldquo;alertMessage&rdquo;=&ldquo;Test&rdquo;;
&ldquo;alertOKBtn&rdquo;=&ldquo;OK&rdquo;;</p>

<p>// Localizable.strings(Japanese)ファイル
&ldquo;alertTitle&rdquo;=&ldquo;確認&rdquo;;
&ldquo;alertMessage&rdquo;=&ldquo;テスト&rdquo;;
&ldquo;alertOKBtn&rdquo;=&ldquo;OK&rdquo;;</p>

<p>```</p>

<p>反映させたいファイルへは下記のように書きます。</p>

<p>```objective-c
// ViewController.mファイル</p>

<p>// アラートの表示
&ndash; (IBAction)showAlert:(id)sender {</p>

<pre><code>NSString *alertTitle = NSLocalizedString(@"alertTitle", nil);
NSString *alertMessage = NSLocalizedString(@"alertMessage", nil);
NSString *alertOKBtn = NSLocalizedString(@"alertOKBtn", nil);

self.alert = [[UIAlertView alloc] initWithTitle:alertTitle
                                        message:alertMessage
                                       delegate:self
                              cancelButtonTitle:nil
                              otherButtonTitles:alertOKBtn, nil];

[self.alert show];
</code></pre>

<p>}</p>

<p>```</p>

<p>ここまでできれば、多言語化OKです。</p>

<h4>注意点</h4>

<p>途中で躓いた場合の対応を書いておきます。</p>

<ol>
<li><p>Info.plistが見つからないというエラーが出る
下記のようなエラーが出た場合の対処を書いておきます。<br/>
<img src="/images/multiLanguage10.png" alt="Info.plistが見つからないエラー" /><br/>
これは、多言語化したことにより、当初はAppDelegate.mファイルと同じ階層にあったInfo.plistファイルが多言語ごとのフォルダ配下に移動したために発生しています。<br/>
なので、TARGETS > Build Settings > Packaging > Info.plist Fileのパスを変更しましょう。<br/>
<img src="/images/multiLanguage11.png" alt="パスの変更" /></p></li>
<li><p>途中でStoryboardにラベルを追加した場合の対応
開発していれば、途中で表示したいものを増やすこともあるでしょう。<br/>
その場合は、Main.storyboardを選択して、右メニューの『Show the File inspector』> LocalizationからBase以外のチェックを外しましょう。<br/>
それから、ラベルを追加して、再度、Base以外のチェックをつけましょう。<br/>
その際、前のファイルを使うか、新しいファイルに置き換えて使うかを問われます。<br/>
新しいファイルに置き換えて使う方の <strong>Replace file</strong> を選択しましょう。<br/>
<img src="/images/multiLanguage12.png" alt="Replace fileを選択" /></p></li>
</ol>


<p>以上で多言語化の注意点は終了です。<br/>
世界に羽ばたくアプリを開発するためには多言語化は必須ですね。<br/>
面倒な対応ではありますが、ぜひ取り組んでみてください。</p>

<p>ということで、今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6で様々な画面サイズに対応しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/07/xcode6-preview/"/>
    <updated>2014-10-07T23:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/07/xcode6-preview</id>
    <content type="html"><![CDATA[<h3>Xcode6でAuto Layoutを使おう！</h3>

<p>昨今はiPhone5, iPhone6, iPhone6 PlusなどiOSアプリでも様々な画面サイズに対応する必要性が出てきました。<br/>
これまでは2画面の対応だけを考えていれば良かったのに、大きな変化ですよね？<br/>
では、この対応をどうすれば良いのかというと、『Auto Layoutを使いましょう』ってことです。</p>

<p>では早速説明していきましょう。<br/>
StoryBoard上で右下にある<strong>Auto Layout</strong>ボタンをクリックします。<br/>
<img src="/images/xcode6_autolayout1.png" alt="Auto Layout" /></p>

<!--more-->


<p>ここはXcode5と同じようなんですが、Xcode5と何やら様子が異なることに気づきます。<br/>
それは、<strong>左右のConstraintが0</strong>にも関わらず、StoryBoard上では<strong>左右に間隔があいています</strong>。<br/>
Xcode6で慣れれば良い話なのかもしれませんが、気になるのであれば、下記の箇所から変更できます。</p>

<p><img src="/images/xcode6_autolayout2.png" alt="Constraint Margin" /></p>

<p>左右のConstraintsを選択した状態で、上図の箇所を確認してみましょう。<br/>
Second Itemに<strong>Relative to margin</strong>が紐付けられています。このチェックを外しましょう！
すると、marginがなくなるので、Constraintが0だと下図のようになります。<br/>
<img src="/images/xcode6_autolayout3.png" alt="marginなし" /></p>

<p>ここで<strong>Constraintを10</strong>にするなど、あけたい間隔を設定しましょう。</p>

<p>さて、ここでポイントなのが、TextFieldにはWidthの設定をつけていないことです。<br/>
これにより、左右のConstraintが適用されるので各画面に対応できます。</p>

<p>本当に対応できているのか、シミュレータや実機で確認する前にプレビューを見てみましょう。<br/>
確認方法としては、<br/>
1: Xcode6右上の<strong>Show the Assistant editor</strong>をクリック<br/>
2: Manual, Automatic, Top Level Objects, Localization, Previewとあるので、<strong>Preview</strong>をクリック</p>

<p><img src="/images/xcode6_autolayout4.png" alt="Previewの確認方法" /></p>

<p>すると、4インチサイズのPreviewがデフォルトで表示されます。<br/>
<img src="/images/xcode6_autolayout5.png" alt="デフォルトのPreview画面" /></p>

<p>4.7インチや5.5インチなどを追加する場合は、Previewの左下にある<strong>+ボタン</strong>をクリックして、追加したいディスプレイサイズを選択します。<br/>
これにより、下図のように複数のディスプレイサイズでレイアウトを確認することができます。</p>

<p><img src="/images/xcode6_autolayout6.png" alt="複数画面" /></p>

<p>いかがでしたでしょうか？<br/>
これからはiPhone6, iPhone6 Plusにも最適化したアプリを開発する必要がありますし、たいへんですが、頑張って行きたいですね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6でSingle View Applicationにチャレンジ]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard/"/>
    <updated>2014-09-20T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard</id>
    <content type="html"><![CDATA[<h3>Xcode6でプロジェクトを作成しよう</h3>

<p>さて、先日、一般ユーザ向けにXcode6のバージョンアップが解放されました。<br/>
それに合わせて、今回はXcode6の基本的な使い方を確認していきたいと思います。</p>

<p>それでは早速、Xcode6を起動してみましょう。<br/>
<img src="/images/xcode6_1.png" alt="Xcode6起動後の初期ウィンドウ" /></p>

<!--more-->


<p>さて、 <strong>Get started with a playground</strong> が先頭に来ている以外はあまり気になりませんね。<br/>
SwiftやPlaygroundの話は別の機会にということで、 <strong>Create a new Xcode project</strong> を選択してみましょう。</p>

<p>すると、次のようなウィンドウが表示されます。<br/>
<img src="/images/xcode6_2.png" alt="Xcode6でCreate a new Xcode projectを選択後に表示されるウィンドウ" /></p>

<p>筆者はここで、『あれ！？いつも使っていた <strong>Empty Application</strong> がない&hellip;.』と気づきました。<br/>
まさかと思い、あれやこれやと探し、『OtherにEmptyってのがある。これって前からあったっけ？』と思いつつEmptyでプロジェクトを作成してみると&hellip;.<br/>
<img src="/images/xcode6_3.png" alt="OtherにEmpty..." /><br/>
<img src="/images/xcode6_4.png" alt="超Empty...何もないよ..." /><br/>
TARGETもなければ、ソースも何もない。超Empty&hellip;..(泣)</p>

<p>この瞬間、時代は次に進んでいるのだと諦めて、筆者はこれまで使ってこなかったSingle View Applicationに手を伸ばすことにしました。<br/>
最大の障壁となるのが、今更ながら <strong>Storyboardを使ったことがない</strong> ということでした。<br/>
これを機に覚えよう＆Xcode6でも基本操作は変わっていないよ(たぶん)と証明するために先に進み始めました。</p>

<p>下記の手順でプロジェクトを作成します。<br/>
1. Single View Applicationを選択<br/>
2. ProductNameにStoryboardExampleと入力<br/>
3. DevicesはiPhoneを選択</p>

<p>そうして作成されたプロジェクトが下記になります。<br/>
<img src="/images/xcode6_5.png" alt="StoryboardExample" /></p>

<p>Main.storyboardを見てみると、『何の画面サイズ？？』といったViewControllerが表示されています。<br/>
今回はiPhoneのみに対応したアプリということで、サイズを変更したいと思います。<br/>
サイズは下記の手順で変更ができます。</p>

<ol>
<li>左ウィンドウでView Controllerを選択</li>
<li>右ウィンドウのメニューの右から3つ目の項目を選択</li>
<li>Simulated MetricksのSizeから変更したいiPhoneのサイズを選択</li>
</ol>


<p><img src="/images/xcode6_6.png" alt="サイズ変更方法" /></p>

<p>筆者の場合はせっかくなので、iPhone6のサイズである <strong>iPhone 4.7-inch</strong> に変更しました。<br/>
<img src="/images/xcode6_7.png" alt="4.7inchのViewController" /></p>

<h3>StoryboardでUINavigationControllerを使おう</h3>

<p>筆者がよく使っていたUINavigationControllerを使ってみようと思います。先ほどのView ControllerにはNavigationBarらしきものが見当たりません。これはUINavigationControllerが付与されていないためです。では、UINavigationControllerを付与しましょう。</p>

<p>XcodeメニューバーのEditor > Embed in > Navigation Controllerを選択してください。<br/>
<img src="/images/xcode6_8.png" alt="Navigation Controllerを追加する" /></p>

<p>すると、下記のようにNavigation Controllerが追加されます。(下図は見やすさのため表示倍率を変更しています。表示倍率はViewが配置されているウィンドウで右クリックするとサイズを選択可能なウィンドウが表示されます。)<br/>
<img src="/images/xcode6_9.png" alt="Navigation Controllerを追加した" /><br/>
また、初めからStoryboard上に表示されていたView ControllerにNavigationBarが表示されたことがわかります。<br/>
Navigation Controllerの大きさも先ほどと同じ手順で変えてしまいましょう。(変えなくてもコーディング上は問題ありませんが&hellip;.)</p>

<p>NavigationBarの良い所は画面遷移後に前の画面に戻るボタンを作らなくて良いということですね。</p>

<p>続いて、Storyboard上での画面遷移の実装方法について見て行きましょう。<br/>
画面遷移をするためには当然ながら画面が必要となるので、View Controllerを追加しましょう。また、画面遷移のアクションを起こすボタンを追加しましょう。<br/>
<img src="/images/xcode6_10.png" alt="View Controllerとボタンを追加" /></p>

<p>そして、画面遷移の実装は、<br/>
1. NEXTボタンを右クリックして遷移後の画面にドラッグ＆ドロップ<br/>
2. 表示されるウィンドウから <strong>show</strong> を選択<br/>
と超簡単にできます。<br/>
その証拠に遷移後の画面にも先ほどまでなかったNavigationBarが付与されています。</p>

<p><img src="/images/xcode6_11.png" alt="NEXTボタンからドラッグ＆ドロップ" /><br/>
<img src="/images/xcode6_12.png" alt="showを選択" /><br/>
<img src="/images/xcode6_13.png" alt="画面遷移が実装完了" /></p>

<p>さて、ここまで対応が完了したら、シミュレータで表示してみましょう。<br/>
利用するシミュレータはもちろんiPhone6です。<br/>
<img src="/images/xcode6_14.png" alt="シミュレータで表示" /></p>

<p>上記のような表示ができましたでしょうか？<br/>
Storyboardの使い方は案外簡単ですね！まだまだ触り程度の話ですが、これから使い込んでいこうかと思います。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
