<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Passbook | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/passbook/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Passbook webServiceURLについて]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/19/passbook-detail/"/>
    <updated>2014-01-19T21:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/19/passbook-detail</id>
    <content type="html"><![CDATA[<h3>Passbook webServiceURLの設定で躓いたところ</h3>

<p>さて、最近はPassbookばかり触っているので、3回連続でPassbookについてです。筆者が躓いたところをピックアップして記載していきます。<br/>
具体的には<br/>
・webServiceURLに指定するURL<br/>
・Passbookを追加/更新/削除したときに自動で投げてくるパラメータ<br/>
についてです。</p>

<!--more-->


<h4>webServiceURLについて</h4>

<p>PassbookではwebServiceURLを設定するところで躓きました。使いきり&amp;更新や削除などを感知しないパスであれば、何も気にせず適当なURLを設定して構いません。しかし、パスの追加/更新/削除を感知して、ユーザ固有のアクションを起こさせたいという狙いがある場合は、きちんと考えなくてはなりません。</p>

<p>結論から言うと、<strong>http</strong>ではなく<strong>https</strong>から始まるURLを指定しなくてはなりません。また、自己証明書で試した結果、通信ができませんでした&hellip;。これは筆者の設定が悪いのかどうか不明なところなんですが、きちんとした証明書で<strong>https</strong>通信ができるサーバで試した結果、通信できました。ここについてはネット上ではっきりと書かれているサイトがなかったため真実はわからないのですが、少なくとも筆者は自己証明書では失敗したということをお伝えします。</p>

<p>因みに筆者は今回、Windows AzureでWebサイトを作成して活用しました。Webサイトではhttpでもhttpsでもアクセスできるように設定されているとのことで非常に使い勝手が良かったです。</p>

<p>また、Apple iOS Developerであれば、開発者だけができる設定でwebServiceURLにhttpのURLを設定しても通信することができます。次の章で説明する内容を実際に見たい場合は余分なお金のかからないhttpサーバで試してみると良いでしょう。設定は下記のようにできます。<br/>
<img src="/images/httpAllow.png" alt="設定からhttpを許可する" /></p>

<h4>Passbookを追加/更新/削除したときに自動で投げてくるパラメータ</h4>

<p>続いて、Passbookをユーザが受け取ってからwebServiceURLに指定したサーバに投げてくるパラメータについて説明します。パラメータが送られるパターンは下記です。<br/>
・Passbookを受け取って<strong>追加</strong>ボタンを押したとき<br/>
・Passbookを手動/自動で<strong>更新</strong>したとき<br/>
・Passbookを<strong>削除</strong>したとき</p>

<p>それぞれについて具体的に説明します。</p>

<h5>Passbookを受け取って追加ボタンを押したとき</h5>

<p>追加ボタンを押した瞬間に自動的にPOSTで通信されます。<br/>
その際、投げられるURLは
<code>
/webServiceURLで指定したURL/v1/devices/デバイスライブラリID/registrations/パスタイプID/シリアルナンバー
</code>
となります。
このURLもしくはreq.paramsから<strong>デバイスライブラリID</strong>, <strong>パスタイプID</strong>, <strong>シリアルナンバー</strong>を取得することができます。また、req.headersに<strong>authorization</strong>の値が入っています。</p>

<p>デバイスライブラリIDはデバイスによって異なり、さらに新規パス取得の際には毎回異なる値です。パスタイプIDは開発者が発行するPassbookの証明書の.passを外した部分のことです。シリアルナンバーはパス毎に発行すべきものです。例えば、忘年会のチケットを配布する場合、そのチケットでは同じシリアルナンバーを使います。(ユーザごとにユニークな値をふるべきではありません。)authorizationはユーザ毎にユニークな値を持たせた方が使い勝手が良いと思われます。また、MD5などで暗号化した方がセキュリティ的には良いでしょう。</p>

<h5>Passbookを手動/自動で更新したとき</h5>

<p>Passbookアプリでパスの裏面を上から下にスクロールして手動で更新したときなどではGETで通信されます。<br/>
その際に投げられるURLは
<code>
/webServiceURLで指定したURL/v1/passes/パスタイプID/シリアルナンバー
</code>
となります。
更新の場合は<strong>パスタイプID</strong>, <strong>シリアルナンバー</strong>, <strong>authorization</strong>を取得することができます。<br/>
また、更新処理のときにはログ用にPOSTで
<code>
/webServiceURL/v1/log
</code>
が投げられます。<br/>
これを用いてログをDBに格納するのも良いでしょう。</p>

<h5>Passbookを削除したとき</h5>

<p>最後はパスを削除した場合です。このときはDELETEで通信されます。<br/>
その際、投げられるURLは
<code>
/webServiceURLで指定したURL/v1/devices/デバイスライブラリID/registrations/パスタイプID/シリアルナンバー
</code>
となります。</p>

<p>因みに筆者の場合は、Node.jsでExpressモジュールを使用しているので、下記のように書いています。<br/>
webServiceURLで末尾に/sendParamというパスをつけた場合です。<br/>
<code>
// Passbookを受け取って追加ボタンを押したとき
app.post('/sendParam/v1/devices/:deviceLibraryID/registrations/:passTypeID/:serialNumber', pass.createData);
// Passbookを手動/自動で更新したとき
app.get('/sendParam/v1/passes/:passTypeID/:serialNumber', pass.updateData);
// ログ用
app.post('/sendParam/v1/log', pass.logData);
// Passbookを削除したとき
app.delete('/sendParam/v1/devices/:deviceLibraryID/registrations/:passTypeID/:serialNumber', pass.deleteData);
</code></p>

<p>大体Passbookのことはわかってきたのですが、まだまだ躓くところも多く勉強です。本日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-passbookではまったこと]]></title>
    <link href="http://grandbig.github.io/blog/2014/01/06/node-passbook/"/>
    <updated>2014-01-06T22:45:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/01/06/node-passbook</id>
    <content type="html"><![CDATA[<h3>PassbookのPassを動的生成するためにnode-passbookを使ってみました</h3>

<p>皆様、あけましておめでとうございます。2014年1回目のブログ更新です。<br/>
今回は<strong>node-passbookではまったこと</strong>について紹介したいと思います。通常、はまらないことかもしれないのですが、筆者は2日半くらい悩みました。</p>

<p>node-passbookは<a href="https://github.com/assaf/node-passbook">Github</a>上で公開されています。</p>

<!--more-->


<h4>node-passbookの設定</h4>

<p>今回は、nodeのWebフレームワークであるExpressを使います。Expressの始め方については<a href="http://gihyo.jp/dev/serial/01/nodejs/0003">gihyo.jsさんのページ</a>を参考にしてください。Expressの準備が整っている前提で説明を始めたいと思います。</p>

<p>まずはnode-passbookモジュールをインストールしましょう。<br/>
<code>
npm install passbook
</code></p>

<p>次に、app.jsを編集しましょう。
```
var express = require(&lsquo;express&rsquo;);
var routes = require(&lsquo;./routes&rsquo;);
var user = require(&lsquo;./routes/user&rsquo;);
// passbook発行処理を書いたpass.jsをrequire
var pass = require(&lsquo;./routes/pass&rsquo;);</p>

<p>&lt;省略></p>

<p>app.get(&lsquo;/&rsquo;, routes.index);
app.get(&lsquo;/users&rsquo;, user.list);
// passbookのpassをダウンロードするときのget
app.get(&lsquo;/download&rsquo;, pass.download);
// passbookのpassを作成するときのget
app.get(&lsquo;/create&rsquo;, pass.create);</p>

<p>&lt;省略></p>

<p>```</p>

<p>では、passbook発行処理を書いたpass.jsをroutes配下に作成します。
```
var fs = require(&lsquo;fs&rsquo;);
var path = require(&lsquo;path&rsquo;);
var createTemplate = require(&ldquo;passbook&rdquo;);</p>

<p>exports.create = function(req, res) {</p>

<pre><code>// Passbook作成
var template = createTemplate('eventTicket', {
    'passTypeIdentifier': 'pass.****.****.****',
    'teamIdentifier': '***********',
    'organizationName': 'Passbookテスト'
});
template.keys('./public/keys', 'test12345');
var passbook = template.createPass({
    serialNumber: 'abcdefc',
    description: 'Passbookテスト用のチケットです。',
    logoText: '参加チケット',
    foregroundColor: 'rgb(255, 255, 255)',
    backgroundColor: 'rgb(60, 65, 76)'
});
passbook.fields.webServiceURL = "https://example.com/passes";
passbook.fields.authenticationToken = "vxwxd7J8AlNNFPS8k0a0FfUFtq0ewzFdc";
passbook.fields.relevantDate = "2014-01-25T17:00+09:00";
passbook.fields.barcode = {
    message: "http://google.com",
    format: "PKBarcodeFormatQR",
    messageEncoding: "iso-8859-1",
    altText: "ユーザID"
};
passbook.primaryFields.add([
    {
        "key" : "event",
        "label" : "イベント",
        "value" : "Passbookテスト"
    }
]);
passbook.secondaryFields.add([
    {
        "key" : "loc",
        "label" : "場所",
        "value" : "東京近辺"
    }
]);
passbook.backFields.add([
    {
        "key" : "message",
        "label" : "メッセージ",
        "value" : "Passbook盛り上げていきましょう！"
    }
]);
passbook.loadImagesFrom("./public/images");

var pkpassFile = fs.createWriteStream("mypass.pkpass");
passbook.on("error", function(error) {
    console.error(error);
    process.exit(1);
});
passbook.pipe(pkpassFile);

res.end();
</code></pre>

<p>};</p>

<p>exports.download = function(req, res){</p>

<pre><code>var file = './mypass.pkpass',
    filestream = fs.createReadStream(file),
    filename = path.basename(file),
    mimetype = 'application/vnd.apple.pkpass';
res.setHeader('Content-disposition', 'attachment; filename=' + filename);
res.setHeader('Content-type', mimetype); 
filestream.on('data', function(chunk) {
    res.write(chunk);
});
filestream.on('end', function() {
    res.end();
});
</code></pre>

<p>};</p>

<p>```
さて、これでソースの準備は完了です。<br/>
次の章では、筆者がはまった点について具体的に説明します。</p>

<h4>証明書ではまりました</h4>

<p>筆者は上記のソースを書き終わった時点で完了だと思ったのですが、iPhoneから落としてもうまくいきませんでした。<br/>
うまくいかなかったときの現象は下記です。<br/>
iOS6 ⇒ Pass自体は表示されるものの、追加ボタンを押しても追加されない<br/>
iOS7 ⇒ Pass自体表示されない</p>

<p>また、XcodeのOrganizerのコンソールでログを見たところ、<strong>Signature is missing</strong>と表示されてしまいました。<br/>
悩んだ果てにnode-inspectorでデバッグして1つ1つ処理を確認したところ、<strong>node_modules/passbook/lib/pass.js</strong>の342〜350行目を見て気づきました。</p>

<p>```
 function signManifest(template, manifest, callback) {</p>

<pre><code> var identifier = template.passTypeIdentifier().replace(/^pass./, "");

 var args = [
    "smime",
    "-sign", "-binary",
    "-signer",    Path.resolve(template.keysPath, identifier + ".pem"),
    "-certfile",  Path.resolve(template.keysPath, "wwdr.pem"),
    "-passin",    "pass:" + template.password
];

&lt;省略&gt;
</code></pre>

<p>```</p>

<p>そう、pemファイルの名前が間違っていたのです。pemファイルの名前は<strong>passTypeIdentifier</strong>に設定する文字列から<strong>pass.</strong>を削除したものにしなくてはなりませんでした。</p>

<p>やっぱりデバッグは大切ですね。</p>

<p>参考ページ:<br/>
<a href="http://blog.techfirm.co.jp/2012/10/23/node-js%E3%81%A7passbook%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B1/">node.jsでPassbookサーバをつくってみる</a><br/>
<a href="http://kataok.hatenablog.com/entry/2012/10/20/102125">Node.jsでPassbookを発行してみる</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passbookを使ってみよう！(超基礎)]]></title>
    <link href="http://grandbig.github.io/blog/2013/12/25/createpassbookbasic/"/>
    <updated>2013-12-25T23:47:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2013/12/25/createpassbookbasic</id>
    <content type="html"><![CDATA[<h3>Passbook 超入門</h3>

<p>今日はPassbookについて書いてみようと思います。この記事を書こうと思ったきっかけはネットでPassbookのPassの作成方法を探してみたところ、『いまいちわかりにくい&hellip;。画像で手順を見たい！！』という思いが生まれたからです。今後、日本でもPassbookの利用を盛り上げていきたいという意向もあります。だって触ってみると案外面白いんですから。<br/>
では、早速説明していきましょう。</p>

<!--more-->


<h4>キーチェーンアクセスに証明書を登録しよう</h4>

<p>Apple Developerプログラムに登録されている前提で説明します。<br/>
まず、<strong>iOS Pass Type IDs</strong>を新規作成します。右上の『＋』ボタンをクリックしましょう。<br/>
<img src="/images/create_passbook_cert1.png" alt="iOS Pass Type IDsを新規作成" /><br/>
次に、<strong>Pass Type ID Description</strong>と<strong>Identifier</strong>を入力してContinueを選択して先に進みましょう。<br/>
※ Identifierは必ず先頭に<strong>pass.</strong>がきます。<br/>
<img src="/images/create_passbook_cert2.png" alt="任意の文字列を入力" /><br/>
そして、Registerをクリックすれば、<strong>iOS Pass Type IDs</strong>を新たに作成されたことを確認できます。<br/>
<img src="/images/create_passbook_cert3.png" alt="Registerをクリック" /><br/>
<img src="/images/create_passbook_cert4.png" alt="iOS Pass Type IDsを新規作成できました" /><br/>
ここで終了ではありません。ここから<strong>iOS Pass Type IDs</strong>と<strong>certSigningRequestファイル</strong>をひもづける作業が必要となります。<br/>
先ほど作成した<strong>iOS Pass Type IDs</strong>を選択してEditをクリックしましょう。<br/>
<img src="/images/create_passbook_cert5.png" alt="iOS Pass Type IDsを編集" /><br/>
編集画面でCreate Certificate&hellip;を選択して、アップロードするファイルの説明書きを読んでContinueを選択したら、Choose File&hellip;をクリックして<strong>certSigningRequestファイル</strong>をアップロードしましょう！！<br/>
<img src="/images/create_passbook_cert6.png" alt="Create Certificateを選択" /><br/>
<img src="/images/create_passbook_cert7.png" alt="Continueでそのまま進む" /><br/>
<img src="/images/create_passbook_cert8.png" alt="Choose Fileを選択" /><br/>
これで証明書が作成できました。Downloadしてキーチェーンアクセスに登録しましょう！(Chromeであればブラウザの下部にダウンロードファイルが表示されるのでダブルクリックしましょう)<br/>
<img src="/images/create_passbook_cert9.png" alt="証明書をDownloadしましょう" /><br/>
<img src="/images/create_passbook_cert10.png" alt="キーチェーンアクセスに登録完了" /></p>

<h4>pass.jsonを編集しよう</h4>

<p>証明書の準備が整ったら実際にPassbookのPassの中身を作成していきます。0から作るのはたいへんですし、いろいろとApple側で決められている制限に従う必要があるので、<a href="https://developer.apple.com/downloads/index.action?name=Passbook">Apple公式ダウンロードページ</a>からサンプル(Passbook Materials)を落としてきましょう。<br/>
dmgファイルを解凍すると中身のファイル構成は下記のようになっています。<br/>
<img src="/images/create_passbook_cert11.png" alt="Passbook Materialsの中身" /></p>

<p>Passesの配下には<strong>.pkpassファイル</strong>と<strong>.rawフォルダ</strong>があります。PassbookのPassとして扱われるファイルが<strong>.pkpassファイル</strong>です。<strong>.rawフォルダ</strong>はPassを構成する素材が入っています。実は<strong>.pkpassファイル</strong>は<strong>.rawフォルダ</strong>を圧縮したものになっています。</p>

<p>また、ファイルやフォルダの種類としてBoardingPass, Coupon, Event, Generic, StoreCardの5種類がありますが、これはPassbookの種類になります。これはレイアウトが異なるので最適なものを利用するようにしましょう。</p>

<p>さて、ここからは実際にサンプルを編集することでオリジナルPassを作成してみたいと思います。<br/>
先ほど解答したフォルダからEvent.rawフォルダを任意の場所にコピーしましょう。<br/>
Event.rawフォルダ内のpass.jsonを編集します。</p>

<p>```
{</p>

<pre><code>"formatVersion" : 1,
"passTypeIdentifier" : "pass.com.apple.sample-event",
"serialNumber" : "nmyuxofgnb",
"teamIdentifier" : "A1B2C3D4E5",
</code></pre>

<p>```</p>

<p>必ず編集する必要があるのは<strong>passTypeIdentifier</strong>と<strong>teamIdentifier</strong>です。<br/>
<strong>passTypeIdentifier</strong>はキーチェーンアクセスから表示されているPass Type IDを使いましょう。(Apple Developerサイトからも確認できます。) また、<strong>teamIdentifier</strong>はキーチェーンアクセスでPassbookの証明書を右クリックして『情報を見る』を選択してください。その中の組織に表示されている英数字を使います。<br/>
<img src="/images/create_passbook_cert12.png" alt="passTypeIdentifierの確認" /><br/>
<img src="/images/create_passbook_cert13.png" alt="teamIdentifierの確認" /><br/>
これを先ほどのpass.json内に記載しましょう。</p>

<h4>Passを作成しよう</h4>

<p>さて、Passを作成するための素材は揃いました。最後に<strong>.pkpassファイル</strong>を作成するためのsignpassファイルを書き出します。<br/>
手順としては先ほどダウンロードしたdmgファイル内にあったsignpassフォルダ内のsignpass.xcodeprojファイルをXcodeで起動します。これをBuildしてください。デフォルト設定のままであれば『/Users/＜ユーザー名＞/Library/Developer/Xcode/DerivedData』配下にsignpass&hellip;..(signpassの後はよくわからない文字列)が作成されています。もし、デフォルト設定を変更したせいか、見つからない場合はXcode > Preferences&hellip; > Locations > DerivedDataで設定されているパスを確認して下さい。</p>

<p>該当フォルダを見ると、Build/Products/Debug配下にsignpassファイルが見つかるはずです。
ここまで来たら後は下記コマンドをターミナルで叩くだけ！
<code>
./signpass -p ＜パッケージするパスファイルのパス＞
</code>
パッケージするパスファイルのパスとは例えば、signpassファイルとEvent.rawフォルダが同じ階層にある場合は
<code>
./signpass -p ./Event.raw
</code>
となります。
これで<strong>Event.pkpassファイル</strong>が作成されているはずです。これにてPass作成完了です。</p>

<h4>PassをWeb配布しよう</h4>

<p>最後にWebでPassを配布する方法について解説します。<br/>
とりあえず、ローカルPCからPassを取得してみたいと思います。これを実現するにあたって、『システム環境設定の共有にWeb共有がない』なんて方がいるかもしれないので、それは<a href="http://d.hatena.ne.jp/sakura_bird1/20120804/1344055999">こちら</a>を参考に設定してください。<br/>
pkpassファイルを取得するためにはhttpd.confにpkpassファイルの行を書き足す必要があります。<br/>
※Apacheを使っている場合の説明です。<br/>
<code>
AddType application/vnd.apple.pkpass    pkpass
</code>
AddTypeが書かれている<IfModule>タグ内に記載してください。<br/>
apacheを再起動することをお忘れなく。<br/>
これで晴れてPassをWebから取ってくることができます！</p>

<p><img src="/images/create_passbook_sample.png" alt="Passのサンプル" /></p>

<p>細かいPassの編集については割愛しましたが、試してみていろいろとわかってきたらブログにも載せていきます。</p>

<p>では本日はこの辺で！</p>
]]></content>
  </entry>
  
</feed>
