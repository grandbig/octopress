<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode7 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/xcode7/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jazzyを使って、Swiftで書いたプロジェクトのリファレンスを自動生成しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/12/jazzy/"/>
    <updated>2016-01-12T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/12/jazzy</id>
    <content type="html"><![CDATA[<h4>jazzyとは</h4>

<p>さて、本日は<a href="https://github.com/Realm/jazzy">jazzy</a>について書こうと思います。<br/>
jazzyはSwiftで書いたプロジェクトのリファレンスを自動で生成できるツールです。<br/>
最近、熱いMobile DatabaseであるRealmと同じチームが開発しているようです。<br/>
今のところ、他に良さそうなツールはないんじゃないでしょうか？</p>

<p>兎にも角にも、早速使ってみることにします。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>jazzyのインストール</h5>

<p>jazzyのインストールは簡単です。<br/>
下記コマンドを実行してください。</p>

<p><code>sudo gem install jazzy</code></p>

<h5>jazzyのコマンド</h5>

<p><code>jazzy -h</code>を実行してコマンドを確認してみましょう。<br/>
下記のような結果が得られるはずです。</p>

<p>```objective-c
Usage: jazzy</p>

<p>Options</p>

<pre><code>-o, --output FOLDER              Folder to output the HTML docs to
-c, --[no-]clean                 Delete contents of output directory before running. 
                                 WARNING: If --output is set to ~/Desktop, this will delete the ~/Desktop directory.
    --[no-]objc                  Generate docs for Objective-C.
    --umbrella-header PATH       Umbrella header for your Objective-C framework.
    --framework-root PATH        The root path to your Objective-C framework.
    --sdk [iphone|watch|appletv][os|simulator]|macosx
                                 The SDK for which your code should be built.
    --config PATH                Configuration file (.yaml or .json)
                                 Default: .jazzy.yaml in source directory or ancestor
-x arg1,arg2,…argN,              Arguments to forward to xcodebuild
    --xcodebuild-arguments
-s FILEPATH,                     File generated from sourcekitten output to parse
    --sourcekitten-sourcefile
    --source-directory DIRPATH   The directory that contains the source to be documented
-e, --exclude file1,file2,…fileN Files to be excluded from documentation
    --swift-version VERSION
-a, --author AUTHOR_NAME         Name of author to attribute in docs (e.g. Realm)
-u, --author_url URL             Author URL of this project (e.g. http://realm.io)
-m, --module MODULE_NAME         Name of module being documented. (e.g. RealmSwift)
    --module-version VERSION     module version. will be used when generating docset
    --copyright COPYRIGHT_MARKDOWN
                                 copyright markdown rendered at the bottom of the docs pages
    --readme FILEPATH            The path to a markdown README file
    --podspec FILEPATH
    --docset-icon FILEPATH
    --docset-path DIRPATH        The relative path for the generated docset
-r, --root-url URL               Absolute URL root where these docs will be stored
-d, --dash_url URL               Location of the dash XML feed e.g. http://realm.io/docsets/realm.xml)
-g, --github_url URL             GitHub URL of this project (e.g. https://github.com/realm/realm-cocoa)
    --github-file-prefix PREFIX  GitHub URL file prefix of this project (e.g. https://github.com/realm/realm-cocoa/tree/v0.87.1)
    --min-acl [private | internal | public]
                                 minimum access control level to document
    --[no-]skip-undocumented     Don't document declarations that have no documentation comments.
    --[no-]hide-documentation-coverage
                                 Hide "(X% documented)" from the generated documents
    --head HTML                  Custom HTML to inject into &lt;head&gt;&lt;/head&gt;.
    --theme [apple | fullwidth | DIRPATH]
                                 Which theme to use. Specify either 'apple' (default), 'fullwidth' or the path to your mustache templates and other assets for a custom theme.
-t, --template-directory DIRPATH DEPRECATED: Use --theme instead.
    --assets-directory DIRPATH   DEPRECATED: Use --theme instead.
-v, --version                    Print version number
-h, --help [TOPIC]               Available topics:
                                    usage   Command line options (this help message)
                                    config  Configuration file options
                                 ...or an option keyword, e.g. "dash"
</code></pre>

<p>```</p>

<p>ヘルプを見て頂ければ、なんとなく概要をつかめると思いますが、特に重要なものを説明します。</p>

<ol>
<li><code>-o FOLDER</code><br/>
リファレンスの出力場所を指定するコマンドです</li>
<li><code>--min-acl [private | internal | public]</code><br/>
リファレンスに出力するプロパティおよびメソッドの最低アクセス権限<br/>
例えば、<code>--min-acl public</code>を指定した場合、<code>private</code>や<code>internal</code>指定されたプロパティやメソッドはリファレンスに出力されません。</li>
<li><code>--skip-undocumented</code><br/>
ドキュメントコメントが書かれていないプロパティやメソッドはリファレンスに出力しません。</li>
<li><code>--author AUTHOR_NAME</code><br/>
リファレンスに開発者を明記します。</li>
<li><code>--author_url URL</code><br/>
リファレンス上に表記される開発者名にURlリンクを付与します。</li>
</ol>


<h4>Swift2.0以降でのドキュメントコメントの書き方について</h4>

<p>Swift2.0以降でのドキュメントコメントの書き方を見ていきます。<br/>
<strong>jazzy</strong> を使うことを前提にした書き方のみ記述します。</p>

<p>```objective-c
import UIKit</p>

<p>/**</p>

<p>UIViewControllerを継承したViewControllerクラス</p>

<p>*/
class ViewController: UIViewController {</p>

<pre><code>// MARK: Properties
/// 文字列を格納するためのサンプル変数
var sampleParam1:String?
/// 数値を格納するためのサンプル定数
let sampleParam2:Int = 0

&lt;省略&gt;

// MARK: Method
/**

ログを出力するメソッド

- parameter message: ログ出力したいメッセージ

*/
func sampleMethod(message: String) {
    print(message)
}

/**

trueフラグを返すメソッド

- returns: trueフラグ

*/
func sampleMethod2() -&gt; Bool {
    return true
}

/**

メッセージを生成するメソッド

- parameter message: 生成したいメッセージの一部分
- returns: 生成したメッセージ

*/
func sampleMethod3(message:String) -&gt; String {
    return "生成したメッセージ： \(message)"
}
</code></pre>

<p>}
```</p>

<p>ポイントは、</p>

<ul>
<li>クラス名にドキュメントコメントを必ずつけること</li>
<li>メソッドのDescriptionとParameterもしくはReturnとの間に1行をあけること</li>
<li><code>:param:</code>や<code>:returns:</code>といった古い書き方をしないこと</li>
</ul>


<p>です。</p>

<p>上記ポイントを踏まえた上で、<br/>
<code>jazzy --min-acl internal --skip-undocumented -o jazzy_doc --author Takahiro --author_url https://grandbig.github.io/</code><br/>
を実行してみましょう。<br/>
オプションは必要に応じてつけてください。</p>

<p>結果、下図のようなリファレンスが作成されます。</p>

<p><img src="/images/jazzy_1.png" alt="トップページ" /><br/>
こちらはトップページです。</p>

<p><img src="/images/jazzy_2.png" alt="クラスの説明" /><br/>
続いて、クラスを選択した際に表示されるクラスの説明ページ</p>

<p><img src="/images/jazzy_3.png" alt="クラスのプロパティの説明" /><br/>
各プロパティを選択すれば、その説明が表示されます。</p>

<p><img src="/images/jazzy_4.png" alt="クラスのメソッドの説明" /><br/>
各メソッドを選択すれば、その説明が表示されます。</p>

<p>いかがだったでしょうか？<br/>
リファレンスは第三者にソースコードを説明する上でも非常に重要なものです。<br/>
初めから書式ルールに沿ってコードを書いておけば、自動生成ツールで速攻リファレンスを作れますので、ぜひぜひ把握しておきましょう。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
