<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WKWebView | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/wkwebview/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OAuth2.0認証をUIWebView&WKWebViewで実施しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/06/custom-oauth-webview/"/>
    <updated>2015-06-06T23:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/06/custom-oauth-webview</id>
    <content type="html"><![CDATA[<h4>最適なWebViewを使って、OAuth2.0認証をしよう！</h4>

<p>本日は、iOSのバージョン毎に最適なWebViewを使ってOAuth2.0認証を実施してみたいと思います。<br/>
やはり、iOS8であればWKWebViewを使いたいですし、iOS7ではUIWebViewしか利用できないという現実があります。</p>

<p>WKWebViewとUIWebViewの使い分け処理に関しては、<a href="http://techblog.yahoo.co.jp/ios/let-uiwebview-as-wkwebview/">let UIWebView as WKWebView</a>を参考にさせて頂きました。<br/>
(あえてObjective-Cで書いています。)</p>

<p>まずは、UIWebViewとWKWebViewの使い分け部分を説明していきます。</p>

<p>共通インターフェースとして<code>WKWebViewProtocol.h</code>を作成します。<br/>
共通化したい処理を書き出しています。</p>

<p>```objective-c
// WKWebViewProtocol.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;WebKit/WebKit.h></h1>

<p>@protocol WKWebViewProtocol <NSObject></p>

<p>@property (nonatomic, readonly, copy) NSString <em>title;
@property (nonatomic, readonly, copy) NSURL </em>URL;
@property (nonatomic, readonly, getter=isLoading) BOOL loading;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) BOOL canGoForward;</p>

<ul>
<li>(void)loadRequest:(NSURLRequest *)request;</li>
<li>(void)stopLoading;</li>
<li>(void)evaluateJavaScript:(NSString <em>)javaScriptString completionHandler:(void (^)(id, NSError </em>))completionHandler;</li>
<li>(void)goBack;</li>
<li>(void)goForward;</li>
</ul>


<p>@end</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>次にUIWebViewを拡張した<code>UIWebView+ProtocolConfirmed</code>クラスを作成します。<br/>
基本的にWKWebViewに合わせる形で実装していきます。</p>

<p>```objective-c
// UIWebView+ProtocolConfirmed.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &ldquo;WKWebViewProtocol.h&rdquo;</h1>

<p>@interface UIWebView(UIWebView_ProtocolConfirmed) <WKWebViewProtocol></p>

<p>@end</p>

<p>```</p>

<p>```objective-c
// UIWebView+ProtocolConfirmed.m</p>

<h1>import &ldquo;UIWebView+ProtocolConfirmed.h&rdquo;</h1>

<p>@implementation UIWebView(UIWebView_ProtocolConfirmed)</p>

<p>// NSURLの取得
&ndash; (NSURL *)URL
{</p>

<pre><code>NSString *URLString = [self stringByEvaluatingJavaScriptFromString:@"document.URL"];
return [NSURL URLWithString:URLString];
</code></pre>

<p>}</p>

<p>// ページのタイトルの取得
&ndash; (NSString *)title
{</p>

<pre><code> return [self stringByEvaluatingJavaScriptFromString:@"document.title"];
</code></pre>

<p>}</p>

<p>// JavaScriptの実行処理
&ndash; (void)evaluateJavaScript:(NSString <em>)javaScriptString completionHandler:(void (^)(id, NSError </em>))completionHandler
{</p>

<pre><code>NSString *result = [self stringByEvaluatingJavaScriptFromString:javaScriptString];
if(completionHandler) {
    completionHandler(result, nil);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>最後にWKWebView側を実装します。<br/>
と言っても、UIWebViewをWKWebViewに合わせるので、何も書くことはありません。</p>

<p>```objective-c
// WKWebView+ProtocolConfirmed.h</p>

<h1>import &lt;WebKit/WebKit.h></h1>

<h1>import &ldquo;WKWebViewProtocol.h&rdquo;</h1>

<p>@interface WKWebView(WKWebView_ProtocolConfirmed) <WKWebViewProtocol></p>

<p>@end</p>

<p>```</p>

<p>```objective-c
// WKWebView+ProtocolConfirmed.m</p>

<h1>import &ldquo;WKWebView+ProtocolConfirmed.h&rdquo;</h1>

<p>@implementation WKWebView(WKWebView_ProtocolConfirmed)</p>

<p>@end</p>

<p>```</p>

<p>では、実際に実装していきましょう。<br/>
OAuth認証の処理に関しては、<a href="http://grandbig.github.io/blog/2015/06/01/custom-oauth/">OAuth2.0認証の処理を自作しよう！</a>を参考にしてください。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;WKWebViewProtocol.h&rdquo;</h1>

<h1>import &ldquo;WKWebView+ProtocolConfirmed.h&rdquo;</h1>

<h1>import &ldquo;UIWebView+ProtocolConfirmed.h&rdquo;</h1>

<h1>import &ldquo;OAuth2Client.h&rdquo;</h1>

<p>static NSString <em>const clientId = @&ldquo;クライアントID&rdquo;;
static NSString </em>const clientSecret = @&ldquo;クライアントシークレット&rdquo;;
static NSString <em>const authorizationURL = @&ldquo;<a href="https://accounts.google.com/o/oauth2/auth">https://accounts.google.com/o/oauth2/auth</a>&rdquo;;
static NSString </em>const tokenURL = @&ldquo;<a href="https://accounts.google.com/o/oauth2/token">https://accounts.google.com/o/oauth2/token</a>&rdquo;;
static NSString *const scope = @&ldquo;<a href="https://www.googleapis.com/auth/plus.login+https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/calendar">https://www.googleapis.com/auth/plus.login+https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/calendar</a>&rdquo;;</p>

<p>// UIWebViewおよびWKWebView関連のDelegateを読み込む
@interface ViewController ()&lt;UIWebViewDelegate, WKUIDelegate, WKNavigationDelegate></p>

<p>// UIWebViewとWKWebViewを一纏めにしたWebViewとして下記を定義
@property(nonatomic, assign) id <WKWebViewProtocol> webView;
@property (strong, nonatomic) NSMutableData <em>receivedData;
@property (assign, nonatomic) BOOL </em>isLogin;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  // WebViewを画面に追加する処理
  [self createWebView];</p>

<p>  NSUserDefaults <em>defaults = [NSUserDefaults standardUserDefaults];
  if([defaults boolForKey:@&ldquo;isLogin&rdquo;]) {
      // 既にOAuth2.0認証実行済みの場合
      [[OAuth2Client sharedInstance] getRefreshAccessToken:^(NSString </em>accessToken) {
          // 成功した場合
          NSLog(@&ldquo;%@&rdquo;, accessToken);
      } failure:^(NSError <em>error) {
          // 失敗した場合
          NSLog(@&ldquo;%@&rdquo;, error);
      }];
  } else {
      // 初めてOAuth2.0認証を実行する場合
      // OAuth2.0認証に必要な各種パラメータの設定
      [[OAuth2Client sharedInstance] setUpOAuth2AccountClientId:clientId clientSecret:clientSecret scope:scope authorizationURL:authorizationURL tokenURL:tokenURL];
      // OAuth2.0認証リクエスト
      [[OAuth2Client sharedInstance] requestAccessToAccount:^(NSURL </em>preparedURL) {
          // リクエスト
          [_webView loadRequest:[NSURLRequest requestWithURL: preparedURL]];
      }
  }</p></li>
</ul>


<p>}</p>

<ul>
<li>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</li>
</ul>


<p>// WKWebViewまたはUIWebViewをViewに追加する処理
&ndash; (void)createWebView {</p>

<pre><code>if(NSClassFromString(@"WKWebView") != nil) {
    // iOS8の場合
    WKWebView *wkWebView = [[WKWebView alloc] initWithFrame:self.view.bounds];
    wkWebView.navigationDelegate = self;
    wkWebView.UIDelegate = self;
    [self.view addSubview:wkWebView];
    self.webView = wkWebView;
} else {
    // iOS7以下の場合
    UIWebView *uiWebView = [[UIWebView alloc] initWithFrame:self.view.bounds];
    uiWebView.delegate = self;
    [self.view addSubview:uiWebView];
    self.webView = uiWebView;
}
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; UIWebViewDelegate</h1>

<p>// ページの読込みが開始されたときに呼び出される処理
&ndash; (void)webViewDidStartLoad:(UIWebView *)webView {</p>

<pre><code>NSLog(@"webViewDidStartLoad");
</code></pre>

<p>}</p>

<p>// ページを読み終わった後に呼び出される処理
&ndash; (void)webViewDidFinishLoad:(UIWebView *)webView {</p>

<pre><code>NSLog(@"webViewDidFinishLoad");
</code></pre>

<p>}</p>

<p>// エラーが発生したときに呼び出される処理
&ndash; (void)webView:(UIWebView <em>)webView didFailLoadWithError:(NSError </em>)error {</p>

<pre><code>NSLog(@"didFailLoadWithError");
</code></pre>

<p>}</p>

<p>// ページ遷移する前に呼び出される処理
&ndash; (BOOL)webView:(UIWebView <em>)webView shouldStartLoadWithRequest:(NSURLRequest </em>)request navigationType:(UIWebViewNavigationType)navigationType {</p>

<pre><code>NSLog(@"shouldStartLoadWithRequest");

BOOL flag = [[OAuth2Client sharedInstance] checkRedirectURI:request];

if(flag) {
    [[OAuth2Client sharedInstance] getAccessToken:request completionHandler:^(NSString *accessToken){
        // 処理が終了したら呼び出される
        if(accessToken.length &gt; 0) {
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setBool:YES forKey:@"isLogin"];
            [defaults synchronize];
        }
        [webView removeFromSuperview];
    }];

    // ページ遷移しない
    return NO;
}

// ページ遷移する
return YES;
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; WKNavigationDelegate</h1>

<p>// ページの読込みが開始されたときに呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView didStartProvisionalNavigation:(WKNavigation </em>)navigation
{</p>

<pre><code>NSLog(@"didStartProvisionalNavigation");
</code></pre>

<p>}</p>

<p>// ページを読み終わった後に呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView didFinishNavigation:(WKNavigation </em>)navigation
{</p>

<pre><code>NSLog(@"didFinishNavigation");
</code></pre>

<p>}</p>

<p>// エラーが発生したときに呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView didFailProvisionalNavigation:(WKNavigation </em>)navigation withError:(NSError *)error
{</p>

<pre><code>NSLog(@"didFailProvisionalNavigation");
</code></pre>

<p>}</p>

<p>// ページ遷移する前に呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView decidePolicyForNavigationAction:(WKNavigationAction </em>)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler {</p>

<pre><code>NSLog(@"decidePolicyForNavigationAction");
NSURLRequest *request = navigationAction.request;

BOOL flag = [[OAuth2Client sharedInstance] checkRedirectURI:request];

if(flag) {
    [[OAuth2Client sharedInstance] getAccessToken:request completionHandler:^(NSString *accessToken){
        // 処理が終了したら呼び出される
        if(accessToken.length &gt; 0) {
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setBool:YES forKey:@"isLogin"];
            [defaults synchronize];
        }
        [webView removeFromSuperview];
    }];

    // ページ遷移しない
    decisionHandler(WKNavigationActionPolicyCancel);
}

// ページ遷移する
decisionHandler(WKNavigationActionPolicyAllow);
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>さあ、これでiOS8端末でもiOS7端末でも正しくOAuth認証画面が表示されるかと思います。<br/>
もう今年にはiOS9が発表され、WKWebViewが当然のようになってくるとしたら、UIWebViewは不要になると思いますが、今のところはまだまだ必要でしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewのベンチマーク取ってみた(SunSpider 利用)]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/02/wkwebview3/"/>
    <updated>2014-10-02T00:29:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/02/wkwebview3</id>
    <content type="html"><![CDATA[<h3>WKWebViewとUIWebViewのベンチマーク比較</h3>

<p>本日は<a href="https://www.webkit.org/perf/sunspider/sunspider.html">SunSpider</a>を利用してWKwebViewとUIWebViewのベンチマークを取った結果を紹介したいと思います。<br/>
今回はGoogle Octane 2.0と同じく下記条件で試験しました。</p>

<p>利用端末: iPhone5, iPhone6<br/>
利用OS: iOS7.1.2, iOS8.0<br/>
利用アプリ: Safari, 自作アプリ(内部にUIWebView利用), 自作アプリ(内部にWKWebView利用)</p>

<p>組み合わせは下記です。</p>

<ul>
<li>Safari / iOS7.1.2 / iPhone5</li>
<li>UIWebView / iOS7.1.2 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone6</li>
<li>UIWebView / iOS8.0 / iPhone6</li>
<li>WKWebView / iOS8.0 / iPhone6</li>
</ul>


<!--more-->


<p>結果は下記になりました。</p>

<p>Totalとしての結果は下記になりました。<br/>
<img src="/images/wkwebview_bench2.png" alt="Total結果" /></p>

<p>細かく見ていくと、<br/>
<img src="/images/wkwebview_bench3.png" alt="項目別結果" /><br/>
という結果になりました。</p>

<p>これから</p>

<ul>
<li>iPhone5とiPhone6で差がある</li>
<li>iOSバージョン別に比較すると、<strong>UIWebView &lt; Safari = WKWebView</strong>となる</li>
</ul>


<p>ということが言えます。</p>

<p>Google Octane 2.0でもiPhone6で試してみる価値がありそうですね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewのベンチマーク取ってみた(Google Octane2.0 利用)]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/23/wkwebview2/"/>
    <updated>2014-09-23T21:15:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/23/wkwebview2</id>
    <content type="html"><![CDATA[<h3>WKWebViewとUIWebViewのベンチマーク比較</h3>

<p>本日はGoogle Octane2.0を利用してWKwebViewとUIWebViewのベンチマークを取った結果を紹介したいと思います。<br/>
まずは、Google Octane2.0とは何かから説明しましょう。<br/>
Octane2.0とはGoogleからオープンソース提供している。ブラウザのパフォーマンスを測定するJavaScriptベンチマークスイートのことです。昨年、バージョン2.0が後悔され、これまでのテスト項目13から17への増えました。<br/>
では、そのテスト項目とは何があるのか説明しましょう。</p>

<!--more-->


<ul>
<li>Richards:

<ul>
<li>OSのタスクディスパッチ(プロセッサが、実行するタスクを切り替える)・シミュレーション・ベンチマーク</li>
<li><a href="http://www.cl.cam.ac.uk/~mr10/">Martin Richards</a>によって<a href="http://ja.wikipedia.org/wiki/BCPL">BCPL</a>で書かれたものをJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/richards.js?r=19">ソースコード</a></li>
</ul>
</li>
<li>Deltable:

<ul>
<li>単変数の<a href="http://constraints.cs.washington.edu/deltablue/">制約解法</a></li>
<li>John MaloneyとMario Wolczkoによって<a href="http://ja.wikipedia.org/wiki/Smalltalk">Smalltalk</a>で書かれたものをJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/deltablue.js">ソースコード</a></li>
</ul>
</li>
<li>Raytrace:

<ul>
<li>Adam Burmisterのコードを元に作成されたレイトレース(3次元空間内を伝わる波の伝播経路を追跡するシミュレーション)・ベンチマーク</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/raytrace.js">ソースコード</a></li>
</ul>
</li>
<li>Regexp:

<ul>
<li>正規表現ベンチマーク</li>
<li>最も人気のある50のWebページから正規表現の処理を抽出して作成</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/regexp.js">ソースコード</a></li>
</ul>
</li>
<li>NavierStokes:

<ul>
<li>二次ナビエ・ストークス方程式解法</li>
<li>倍精度(64ビットの浮動小数点数表現)配列を大量に処理</li>
<li>Oliver Huntのコードを元にしている</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/navier-stokes.js">ソースコード</a></li>
</ul>
</li>
<li>Crypto:

<ul>
<li>Tom Wuのコードを元にして作成した暗号化と復号化ベンチマーク</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/crypto.js">ソースコード</a></li>
</ul>
</li>
<li>Splay:

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%97%E3%83%AC%E3%83%BC%E6%9C%A8">スプレー木</a>や自動メモリ管理サブシステムを実行するデータ操作ベンチマーク</li>
<li>ノードへのメモリの割り当て＆古いノードに割り当てたメモリの再利用に要する処理時間を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/splay.js">ソースコード</a></li>
</ul>
</li>
<li>SplayLatency:

<ul>
<li>VMのGC(不要になったメモリ領域を自動開放する処理)サブシステムに圧力を与えるスプレー試験</li>
<li>GCやコンパイラが原因のレイテンシ(遅延時間)をテスト</li>
</ul>
</li>
<li>EarleyBoyer:

<ul>
<li>典型的なSchemeベンチをFlorian LoitschのScheme2Jsコンパイラを用いてJavaScriptに変換したもの</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/earley-boyer.js">ソースコード</a></li>
</ul>
</li>
<li>pdf.js:

<ul>
<li>JavaScriptで実装されたMozillaのPDFリーダ</li>
<li>デコード、インタープリター処理の時間を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/pdfjs.js">ソースコード</a></li>
</ul>
</li>
<li>Mandreel:

<ul>
<li>Mandreelを利用してC++からJavaScriptに移植した<a href="http://bulletphysics.org/wordpress/">3D Bullet 物理エンジン</a></li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/mandreel.js">ソースコード</a></li>
</ul>
</li>
<li>MandreelLatency:

<ul>
<li>Mandreelベンチ時のGCやコンパイラが原因のレイテンシ(遅延時間)をテスト</li>
</ul>
</li>
<li>GB Emulator:

<ul>
<li>携帯用コンソール(任天堂ゲームボーイ)のアーキテクチャをエミュレートして、厳しい3DシミュレーションをJavaScriptで実行</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/gbemu-part1.js">GB Emulatorソース1</a></li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/gbemu-part2.js">GB Emulatorソース2</a></li>
</ul>
</li>
<li>Code loading:

<ul>
<li>大規模なJavaScriptプログラムをロードしたあと、JavaScriptエンジンがどれだけ速くコードの実行を開始できるかを計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/code-load.js">ソースコード</a></li>
</ul>
</li>
<li>Box2DWeb:

<ul>
<li>Erin Cattoによって書かれた人気の2D物理シミュレーションエンジンである<a href="https://code.google.com/p/box2dweb/">Box2DWeb</a>のJavaScript移植版がベース</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/box2d.js">ソースコード</a></li>
</ul>
</li>
<li>zlib:

<ul>
<li><a href="https://github.com/kripken/emscripten/tree/master/tests/zlib">zlib</a> の試験により、JavaScriptとの互換性を保ちつつ、スクリプトのパフォーマンスをネイティブコード並みに高速化するasm.jsのコードの処理速度を計測</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/zlib.js">ソースコード</a></li>
</ul>
</li>
<li>Typescript:

<ul>
<li>Microsoftが発表したJavaScriptのスーパセットである<a href="http://www.typescriptlang.org/">Typescript</a>はJavaScriptが苦手な大規模アプリケーション開発に最適とされている</li>
<li>この試験ではTypescriptをJavaScriptにコンパイルする時間を計測可能</li>
<li><a href="https://code.google.com/p/octane-benchmark/source/browse/latest/typescript-compiler.js">コンパイラーソースコード</a></li>
</ul>
</li>
</ul>


<p>このOctane2.0を用いて、試験した結果を報告します。<br/>
今回は、下記条件で試験しました。</p>

<p>利用端末: iPhone5, iPhone6<br/>
利用OS: iOS7.1.2, iOS8.0<br/>
利用アプリ: Safari, 自作アプリ(内部にUIWebView利用), 自作アプリ(内部にWKWebView利用)</p>

<p>組み合わせは下記です。</p>

<ul>
<li>Safari / iOS7.1.2 / iPhone5</li>
<li>UIWebView / iOS7.1.2 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone5</li>
<li>UIWebView / iOS8.0 / iPhone5</li>
<li>WKWebView / iOS8.0 / iPhone5</li>
<li>Safari / iOS8.0 / iPhone6</li>
<li>UIWebView / iOS8.0 / iPhone6</li>
<li>WKWebView / iOS8.0 / iPhone6</li>
</ul>


<p>結果は下記になりました。<br/>
<img src="/images/wkwebview_bench.png" alt="Octane2.0によるベンチマーク結果" /></p>

<p>数値としては下記です。<br/>
* Safari / iOS7.1.2 / iPhone5: <strong>2,642</strong><br/>
* UIWebView / iOS7.1.2 / iPhone5: <strong>453</strong><br/>
* Safari / iOS8.0 / iPhone5: <strong>2983</strong><br/>
* UIWebView / iOS8.0 / iPhone5: <strong>447</strong><br/>
* WKWebView / iOS8.0 / iPhone5: <strong>3097</strong><br/>
* Safari / iOS8.0 / iPhone6: <strong>6529</strong><br/>
* UIWebView / iOS8.0 / iPhone6: <strong>1072</strong><br/>
* WKWebView / iOS8.0 / iPhone6: <strong>6763</strong></p>

<p>項目ごとの結果は下記になります。<br/>
<img src="/images/wkwebview_bench_octane1.png" alt="Octane2.0 ベンチマーク結果: Richards〜Regexp" /><br/>
<img src="/images/wkwebview_bench_octane2.png" alt="Octane2.0 ベンチマーク結果: Splay〜MandreelLatency" /><br/>
<img src="/images/wkwebview_bench_octane3.png" alt="Octane2.0 ベンチマーク結果: GB Emulator〜Typescript" /></p>

<p>全て1回だけ計測したため、ある程度の誤差があるかもしれません。<br/>
しかし、UIWebViewとWKWebViewが圧倒的に異なるということはわかりました。また、SafariとWKWebViewの結果がほぼ同じであることから、これまでSafariでしか利用できなかった各種機能が解放されていることがわかりました。<br/>
また、端末によって大きな差が出ました。やはり、iPhone5よりもiPhone6の方がマシンスペックが高いためにかなり良い結果が出ました。<br/>
因みに、UIWebViewで計測するとき、Box2DWebまでは他と大きな差がなく進んだのですが、zlibとTypescriptの試験が非常に時間がかかりました。(もうこれ以上は計測できないのでは？と思ったほどです。)</p>

<p>今日はここまで。</p>

<p>参考:<br/>
<a href="https://developers.google.com/octane/benchmark">Google Octane</a><br/>
<a href="http://jp.techcrunch.com/2013/11/07/20131106google-updates-its-octane-javascript-benchmark-adds-asm-js-and-typescript-tests/">GoogleがJavaScriptベンチマークOctaneをアップデート</a><br/>
<a href="http://www.forest.impress.co.jp/docs/news/20131107_622555.html">Google、JavaScriptベンチマークスイートOctane2.0をリリース</a><br/>
<a href="http://www.infoq.com/jp/news/2012/08/Octane-JavaScript-Benchmark">JavaScript用の新ベンチマークスイートOctaneをGoogleがオープンソース化</a><br/>
<a href="https://code.google.com/p/octane-benchmark/source/browse/#svn%2Flatest">octane benchmark</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WKWebViewとUIWebViewをシミュレータで比較してみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/22/wkwebview1/"/>
    <updated>2014-09-22T00:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/22/wkwebview1</id>
    <content type="html"><![CDATA[<h3>WKWebViewを使ってみる</h3>

<p>さて、本日はiOS8 SDKで新たに利用可能となった <strong>WKWebView</strong> を試してみたいと思います。<br/>
これまでSafariにしか解放されていなかった機能がいろいろと使えるとのことでこれから期待が膨らみます。<br/>
まずは、WKWebViewをアプリに実装するとことから始めましょう。</p>

<p>WKWebViewはUIWebViewと異なり、Storyboard上からドラッグ＆ドロップで追加することができません。<br/>
よって、ソース上から追加する必要があります。</p>

<p>WKWebViewExampleという名前でプロジェクトを作成しましょう。<br/>
<img src="/images/wkwebview1.png" alt="WKWebViewExampleプロジェクト" /></p>

<!--more-->


<p>ViewController.mファイルを下記のように実装します。</p>

<p>```objective-c</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;WebKit/WebKit.h>   // WebKitをimport</h1>

<p>// 表示するWebサイトのURlを設定
static NSString <em>const InitialURL = @&ldquo;<a href="http://localhost/testWeb/">http://localhost/testWeb/</a>&rdquo;;
// Delegateメソッドを利用できるように設定
@interface ViewController ()&lt;WKNavigationDelegate, WKUIDelegate>
// WKWebViewを宣言
@property(nonatomic, strong)IBOutlet WKWebView </em>webView;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  // WKWebViewをインスタンス化
  self.webView = [WKWebView alloc] initWithFrame:self.view.bounds];
  self.webView.translatesAutoresizingMaskIntoConstraints = NO;
  // WKWebViewをViewControllerのViewのsubViewとして追加
  [self.view addSubview:self.webView];</p>

<p>  // Delegateの設定
  self.webView.navigationDelegate = self;
  self.webView.UIDelegate = self;]
}</p></li>
<li><p>(void)viewDidAppear:(BOOL)animated {
  [super viewDidAppear:animated];</p>

<p>  // Web画面の表示
  NSURL <em>url = [NSURL URLWithString:InitialURL];
  NSURLRequest </em>request = [NSURLRequest requestWithURL:url];
  [self.webView loadRequest:request];
}</p></li>
</ul>


<p>```</p>

<p>たったこれだけでWKWebViewを実装することができました。</p>

<h3>WKWebViewとUIWebViewの性能を比較してみる</h3>

<p>気になっていた本題に入ります。<br/>
UIWebViewはJavaScriptの実行速度がSafariの約1/4と言われてきました。それが、WKWebViewの出現により、Safariと同等のJavaScript実行速度にまで引き上げられました。<br/>
という話から実際にWKWebViewとUIWebViewのJavaScript実行速度を比較してみようと思います。<br/>
今回利用するWebソースは下記です。</p>

<p>index.html<br/>
```html
&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;head&gt;
    &lt;meta charset="UTF-8" content="text/css" http-equiv="Content-Style-Type" /&gt;
    &lt;meta content="width=device-width, user-scalable=no,minimum-scale=0.5, maximum-scale=1.0" name="viewport" /&gt;
    &lt;title&gt;テストサイト&lt;/title&gt;
&lt;/head&gt;
&lt;body style="background-color: blue;"&gt;
    &lt;div&gt;テストサイトです。&lt;/div&gt;

    &lt;button type="button" id="testBtn" onclick=""&gt;テストボタン&lt;/button&gt;

    &lt;script src="./js/jquery-2.1.1.min.js"&gt;&lt;/script&gt;
    &lt;script src="./js/index.js"&gt;&lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html></p>

<p>```</p>

<p>jQueryは最新のバージョン2.1.1を利用しています。</p>

<p>index.js<br/>
```javascript
$(function() {</p>

<pre><code>$(document).on("click touchEnd", "#testBtn", function() {
    //window.alert("test");
    //$("body").css("background-color", "red");
    var startTime = new Date().getTime();
    for(var i=0; i &lt; 5000000; i++) {
        console.log(i+"回目のログ");
    }
    var endTime = new Date().getTime();
    var diff = endTime - startTime;
    $("body").append("&lt;div&gt;時間: " + diff + "&lt;/div&gt;");
});
</code></pre>

<p>});</p>

<p>```</p>

<p>これは簡単に言うと、大量のforループを実行し、その処理時間を画面に表示するというものです。<br/>
結果は下記になりました。<br/>
※iOS8に対応した実機がないため、シミュレータでのテストになります。</p>

<p>UIWebView: <strong>5,098.4</strong> [ms]<br/>
WKWebView: <strong>4,495.6</strong> [ms]</p>

<p>4倍とまではいかなくても確かに実行速度は向上しているようです。<br/>
近々、実機でも試してみる予定です。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
