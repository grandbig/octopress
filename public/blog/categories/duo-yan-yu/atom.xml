<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 多言語 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/duo-yan-yu/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode6 Storyboardで多言語対応してみた]]></title>
    <link href="http://grandbig.github.io/blog/2014/12/07/multilanguage/"/>
    <updated>2014-12-07T17:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/12/07/multilanguage</id>
    <content type="html"><![CDATA[<h4>Xcode6を使った多言語対応</h4>

<p>本日はXcode6(正確にはXcode6.1.1)で多言語対応する方法を書きます。<br/>
全スクリーンショットを載せます。</p>

<p>まず、多言語化に使うサンプルプロジェクトは下記です。<br/>
StoryboardにはLabelとButtonを1つずつ配置します。<br/>
<img src="/images/multiLanguage1.png" alt="StoryboardにLabelとButtonを配置" /></p>

<!-- more -->


<p>ソースは下記とします。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<p>@interface ViewController () <UIAlertViewDelegate></p>

<p>@property(strong, nonatomic) UIAlertView *alert;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  self.alert.delegate = self;
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>// アラートの表示
&ndash; (IBAction)showAlert:(id)sender {</p>

<pre><code>self.alert = [[UIAlertView alloc] initWithTitle:@"確認"
                                        message:@"テスト"
                                       delegate:self
                              cancelButtonTitle:nil
                              otherButtonTitles:@"OK", nil];

[self.alert show];
</code></pre>

<p>}
@end</p>

<p>```</p>

<p>では、早速、多言語化を進めていきましょう。</p>

<ol>
<li><p>PROJECT > info > Localizationsに項目を追加<br/>
初めはEnglishのみ項目があります。『＋』をクリックして、追加したい言語を選択しましょう。<br/>
<img src="/images/multiLanguage2.png" alt="Localizationsに項目追加" /><br/>
<img src="/images/multiLanguage3.png" alt="追加したい言語を選択" /><br/>
<img src="/images/multiLanguage4.png" alt="チェックがついていることを確認" /></p></li>
<li><p>Main.storyboardの追加
次にstoryboardに言語の設定を追加しましょう。<br/>
Main.storyboardを選択し、右メニューの『Show the File inspector』> Localizationを見てください。<br/>
ここで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage5.png" alt="Main.storyboardに言語設定を追加" /></p></li>
<li><p>LaunchScreenの追加<br/>
そして、Main.storyboardで実施したのと同様にLaunchScreenでも言語を設定しましょう。<br/>
LaunchScreen.xibを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage6.png" alt="LaunchScreen.xibに言語設定を追加" /></p></li>
<li><p>Info.plistの追加
同様にInfo.plistでも言語を設定しましょう。<br/>
Info.plistを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage13.png" alt="Info.plistに言語設定を追加" /><br/>
アプリ名など言語ごとに変更したいKeyの値を変えましょう。</p></li>
<li><p>Localizable.stringsファイルの追加<br/>
続いて、ソース内の文言を多言語化する手順です。<br/>
Supporting FilesにStrings FileをLocalizable.stringsというファイル名で追加しましょう。<br/>
今は保存場所はあまり気にしなくて構いません。<br/>
ファイルを追加したら、Localizable.stringsを選択し、右メニューの『Show the File inspector』> Localizationで使いたい言語にチェックをつけましょう。<br/>
<img src="/images/multiLanguage7.png" alt="Strings Fileを追加" /><br/>
<img src="/images/multiLanguage8.png" alt="Baseを選択したまま進む" /><br/>
<img src="/images/multiLanguage9.png" alt="Localizable.stringsに言語設定を追加" /></p></li>
<li><p>Localizable.stringsファイルに文言を追加
先ほど追加したファイルに文言を追加しましょう。</p></li>
</ol>


<p>```objective-c
// Localizable.strings(Base)ファイル
&ldquo;alertTitle&rdquo;=&ldquo;Confirm&rdquo;;
&ldquo;alertMessage&rdquo;=&ldquo;Test&rdquo;;
&ldquo;alertOKBtn&rdquo;=&ldquo;OK&rdquo;;</p>

<p>// Localizable.strings(English)ファイル
&ldquo;alertTitle&rdquo;=&ldquo;Confirm&rdquo;;
&ldquo;alertMessage&rdquo;=&ldquo;Test&rdquo;;
&ldquo;alertOKBtn&rdquo;=&ldquo;OK&rdquo;;</p>

<p>// Localizable.strings(Japanese)ファイル
&ldquo;alertTitle&rdquo;=&ldquo;確認&rdquo;;
&ldquo;alertMessage&rdquo;=&ldquo;テスト&rdquo;;
&ldquo;alertOKBtn&rdquo;=&ldquo;OK&rdquo;;</p>

<p>```</p>

<p>反映させたいファイルへは下記のように書きます。</p>

<p>```objective-c
// ViewController.mファイル</p>

<p>// アラートの表示
&ndash; (IBAction)showAlert:(id)sender {</p>

<pre><code>NSString *alertTitle = NSLocalizedString(@"alertTitle", nil);
NSString *alertMessage = NSLocalizedString(@"alertMessage", nil);
NSString *alertOKBtn = NSLocalizedString(@"alertOKBtn", nil);

self.alert = [[UIAlertView alloc] initWithTitle:alertTitle
                                        message:alertMessage
                                       delegate:self
                              cancelButtonTitle:nil
                              otherButtonTitles:alertOKBtn, nil];

[self.alert show];
</code></pre>

<p>}</p>

<p>```</p>

<p>ここまでできれば、多言語化OKです。</p>

<h4>注意点</h4>

<p>途中で躓いた場合の対応を書いておきます。</p>

<ol>
<li><p>Info.plistが見つからないというエラーが出る
下記のようなエラーが出た場合の対処を書いておきます。<br/>
<img src="/images/multiLanguage10.png" alt="Info.plistが見つからないエラー" /><br/>
これは、多言語化したことにより、当初はAppDelegate.mファイルと同じ階層にあったInfo.plistファイルが多言語ごとのフォルダ配下に移動したために発生しています。<br/>
なので、TARGETS > Build Settings > Packaging > Info.plist Fileのパスを変更しましょう。<br/>
<img src="/images/multiLanguage11.png" alt="パスの変更" /></p></li>
<li><p>途中でStoryboardにラベルを追加した場合の対応
開発していれば、途中で表示したいものを増やすこともあるでしょう。<br/>
その場合は、Main.storyboardを選択して、右メニューの『Show the File inspector』> LocalizationからBase以外のチェックを外しましょう。<br/>
それから、ラベルを追加して、再度、Base以外のチェックをつけましょう。<br/>
その際、前のファイルを使うか、新しいファイルに置き換えて使うかを問われます。<br/>
新しいファイルに置き換えて使う方の <strong>Replace file</strong> を選択しましょう。<br/>
<img src="/images/multiLanguage12.png" alt="Replace fileを選択" /></p></li>
</ol>


<p>以上で多言語化の注意点は終了です。<br/>
世界に羽ばたくアプリを開発するためには多言語化は必須ですね。<br/>
面倒な対応ではありますが、ぜひ取り組んでみてください。</p>

<p>ということで、今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
</feed>
