<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: request | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/request/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-cで改めて同期・非同期について考えてみる]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/07/async-and-sync/"/>
    <updated>2014-09-07T21:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/07/async-and-sync</id>
    <content type="html"><![CDATA[<h3>NSURLConnectionで同期・非同期通信をしてみる</h3>

<p>さて、1ヶ月ぶりでしょうか&hellip;.。久々にブログを更新します。<br/>
本日は、もはやObjective-c開発者なら誰しも使うであろうNSURLConnectionでの同期・非同期通信について書きたいと思います。</p>

<p>NSURLConnectionで同期通信を行う場合、 <strong>sendSynchronousRequest</strong> を利用します。一方、非同期通信を行う場合、 <strong>sendAsynchronousRequest</strong> を利用します。<br/>
この2つの通信のどちらを利用するかについてはまさに <strong>使いドコロ</strong> によります。<br/>
同期通信の場合、メインスレッドでの実行のため、通信先サーバで処理の遅延があると、その間はアプリのUI操作ができなくなります。そのため、通信中はアプリの操作が発生し得ない場合に適していると言えます。<br/>
逆に、通信頻度が多いアプリの場合、UI操作を滞らせることがないように非同期通信を利用するべきです。</p>

<!--more-->


<p>実際に同期・非同期の場合の通信の順番を見てみましょう。<br/>
下記のようなファイル構成を作ります。</p>

<p>```objective-c
syncAsyncTest                   // syncAsyncTest.xcodeprojを作成した際に自動で作られるフォルダ
|
|
L____ViewController             // メイン画面用のUIViewController</p>

<pre><code>    |
    L____ViewController.h
    L____ViewController.m
</code></pre>

<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody>
</tbody>
</table>


<p>L<strong><strong>AppDelegate.h              // 自動で作成されるdelegateヘッダーファイル
L</strong></strong>AppDelegate.m              // 自動で作成されるdelegateモデルファイル</p>

<p>```</p>

<p>続いて、ViewController.mに同期・非同期メソッドを下記のように定義します。</p>

<p>```objective-c
// 非同期通信メソッド
&ndash; (void)sendAsynchronousRequest:(NSURL *)url
{</p>

<pre><code>NSURLRequest *request = [NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10];

[NSURLConnection sendAsynchronousRequest:request queue:[[NSOperationQueue alloc] init] completionHandler:^(NSURLResponse *response, NSData *resData, NSError *error) {
    if(error) {
        NSLog(@"error: %@", error);
    } else {
        NSLog(@"resData: %@", resData);
    }
}];
</code></pre>

<p>}</p>

<p>// 同期通信メソッド
&ndash; (void)sendSynchronousRequest:(NSURL *)url
{</p>

<pre><code>NSURLRequest *request = [NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10];

NSError *error;
NSURLResponse *response;
NSData *resData = [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error];

if(error) {
    NSLog(@"error: %@", error);
} else {
    NSLog(@"resData: %@", resData);
}
</code></pre>

<p>}</p>

<p>// asyncBtnをタップしたときに実行されるアクション
&ndash; (IBAction)asyncAction:(id)sender {</p>

<pre><code>NSURL *url = [NSURL URLWithString:@"通信先サーバのURL"];
NSLog(@"リクエスト前");
[self sendAsynchronousRequest:url];
NSLog(@"リクエスト後");
</code></pre>

<p>}</p>

<p>// syncBtnをタップしたときに実行されるアクション
&ndash; (IBAction)syncAction:(id)sender {</p>

<pre><code>NSURL *url = [NSURL URLWithString:@"通信先サーバのURL"];
NSLog(@"リクエスト前");
[self sendSynchronousRequest:url];
NSLog(@"リクエスト後");
</code></pre>

<p>}
```</p>

<p>※asyncBtnとsyncBtnの2つのボタンををViewController.xibに配置しています。</p>

<p>上記のソースを実行すると、<br/>
asyncBtnをタップした場合: リクエスト前⇒リクエスト後⇒sendAsynchronousRequest内のログ<br/>
syncBtnをタップした場合: リクエスト前⇒sendSynchronousRequest内のログ⇒リクエスト後<br/>
といったログの順番になります。</p>

<p>このように処理に順番を踏まえた上で同期・非同期のどちらを利用するのか決めましょう。</p>

<p>また、お気づきの方もいるかもしれませんが、<br/>
sendAsynchronousRequestメソッドを利用した場合、それをラッピングしたメソッドでは <strong>sendAsynchronousRequestでサーバから取得してきたデータを戻り値として設定することができません。</strong><br/>
どういうことかと言うと、</p>

<p>```
// 非同期通信メソッド
&ndash; (NSData <em>)sendAsynchronousRequest:(NSURL </em>)url
{</p>

<pre><code>NSURLRequest *request = [NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10];

[NSURLConnection sendAsynchronousRequest:request queue:[[NSOperationQueue alloc] init] completionHandler:^(NSURLResponse *response, NSData *resData, NSError *error) {
    if(error) {
        NSLog(@"error: %@", error);
    } else {
        NSLog(@"resData: %@", resData);
    }

    return resData;
}];
</code></pre>

<p>}
```</p>

<p>と定義すると <strong>Incompatible block pointer types sending &lsquo;NSData *(^)&hellip;..</strong> といったエラーが発生します。</p>

<p>これはsendAsynchronousRequestの戻り値がvoid型で定義されているにも関わらず、NSData型の戻り値を返そうとしているのでエラーが発生しています。<br/>
特に工夫なく、サーバから取得したデータをラッピングしたメソッドの戻り値として返したいのであれば、sendSynchronousRequestを使えば良いのですが、冒頭で述べたように利用用途が限られます。</p>

<p>sendAsynchronousRequestメソッドを利用しつつ、その通信で取得したデータを別の処理で使い回したい場合は <strong>自作クラスにDelegateメソッド</strong> を実装することで解決可能です。</p>

<p>下記のようなフォルダ構成にしてみましょう。</p>

<p>```
syncAsyncTest                   // syncAsyncTest.xcodeprojを作成した際に自動で作られるフォルダ
|
|
L___TestDelegate                // 自作Delegateメソッドを実装するクラス</p>

<pre><code>    |
    L____TestDelegate.h
    L____TestDelegate.m
</code></pre>

<p>L____ViewController             // メイン画面用のUIViewController</p>

<pre><code>    |
    L____ViewController.h
    L____ViewController.m
</code></pre>

<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody>
</tbody>
</table>


<p>L<strong><strong>AppDelegate.h              // 自動で作成されるdelegateヘッダーファイル
L</strong></strong>AppDelegate.m              // 自動で作成されるdelegateモデルファイル</p>

<p>```</p>

<p>これまでViewControllerで実装していたsendAsynchronousRequestメソッドをTestDelegateクラスに移行します。</p>

<p>TestDelegate.hは下記</p>

<p>```objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@protocol TestDelegate <NSObject>
@optional</p>

<ul>
<li>(void)successMethod:(NSData *)data;</li>
<li>(void)failedMethod:(NSError *)err;</li>
</ul>


<p>@end</p>

<p>@interface TestDelegate : NSObject</p>

<p>@property (nonatomic, assign) id<TestDelegate> delegate;</p>

<ul>
<li>(void)sendAsynchronousRequest:(NSURL *)url;</li>
</ul>


<p>@end
```
続いて、TestDelegate.mは下記</p>

<p>```</p>

<h1>import &ldquo;TestDelegate.h&rdquo;</h1>

<p>@implementation TestDelegate</p>

<ul>
<li><p>(void)sendAsynchronousRequest:(NSURL <em>)url
{
  NSURLRequest </em>request = [NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10];</p>

<p>  [NSURLConnection sendAsynchronousRequest:request queue:[[NSOperationQueue alloc] init] completionHandler:^(NSURLResponse <em>response, NSData </em>resData, NSError *error) {
      if(error) {
          if ([self.delegate respondsToSelector:@selector(failedMethod:)]) {
              NSLog(@&ldquo;error: %@&rdquo;, error);
              [self.delegate failedMethod:error];
          }
      } else {
          if ([self.delegate respondsToSelector:@selector(successMethod:)]) {
              NSLog(@&ldquo;resData: %@&rdquo;, resData);
              [self.delegate successMethod:resData];
          }
      }
  }];
}</p></li>
</ul>


<p>```</p>

<p>これでDelegateメソッドの実装とsendAsynchronousRequestメソッドの移行が完了しました。</p>

<p>Delegateメソッドを呼び出す側のViewController.mは下記のようになります。</p>

<p>```</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;TestDelegate.h&rdquo;</h1>

<p>@interface ViewController () <TestDelegate></p>

<p>@property (strong, nonatomic) IBOutlet TestDelegate *td;</p>

<p>@end</p>

<p>&lt;省略></p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  self.td = [TestDelegate alloc] init];
  self.td.delegate = self;]
}</p></li>
</ul>


<p>&lt;省略></p>

<p>// asyncBtnをタップしたときに実行されるアクション
&ndash; (IBAction)asyncAction:(id)sender {</p>

<pre><code>NSURL *url = [NSURL URLWithString:@"通信先サーバのURL"];
NSLog(@"リクエスト前");
[self.td sendAsynchronousRequest:url];
NSLog(@"リクエスト後");
</code></pre>

<p>}</p>

<p>// TestDelegateクラスで実装したsuccessMethod
&ndash; (void)successMethod:(NSData *)data
{</p>

<pre><code>    NSLog(@"data: %@", data);
</code></pre>

<p>}</p>

<p>// TestDelegateクラスで実装したfailedMethod
&ndash; (void)failedMethod:(NSError *)err
{</p>

<pre><code>    NSLog(@"err: %@", err);
</code></pre>

<p>}
```</p>

<p>これでTestDelegateクラス内のsendAsynchronousRequestを実行して取得したデータをViewControllerクラス内のsuccessMethodやfailedMethodで受け取ることができるようになりました。</p>

<p>今回改めて調べてみることで、通信の同期・非同期は意外と奥が深いということがわかりました。<br/>
ということで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
</feed>
