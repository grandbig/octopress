<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios, | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for iOSを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/13/google-sign-in/"/>
    <updated>2015-09-13T02:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/13/google-sign-in</id>
    <content type="html"><![CDATA[<h4>Google Sign-in SDKを使ったOAuth認証をやってみよう！</h4>

<p>さて、本日はGoogle Sign-Inを利用したOAuth認証をやってみようと思います。<br/>
最近、<a href="https://console.developers.google.com">Google Developers Console</a>の画面が完全に一新されていました。<br/>
以前であれば、Google Developers ConsoleにOAuth2.0のiOSのクライアントIDを設定したときに、クライアントIDだけでなく、クライアントシークレットなども表示されていました。<br/>
それが、 <strong>クライアントID</strong> と <strong>iOSのURLスキーム</strong> のみになっていました。<br/>
これは完全にGoogleがGoogle Sign-Inを推奨している証であろうということで、早速使い方を見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Google Developers ConsoleでOAuth認証に必要な項目を登録しよう！</h4>

<p>さて、実際にGoogle Sign-Inを始める前に、やらなければならないことがあります。<br/>
それは<a href="https://console.developers.google.com">Google Developers Console</a>での登録作業です。<br/>
冒頭に述べたようにサイトのデザインや表示項目なども変わっているので、1つ1つ見ていきましょう。</p>

<p>まず、OAuth2.0の同意画面を作成しましょう。<br/>
因みに、筆者は既に登録済みのOAuth2.0クライアントIDがあったため、下図のように表示されます。<br/>
<strong>OAuth同意画面</strong> というボタンをクリックして、OAuth同意画面の作成ページに移りましょう。<br/>
<img src="/images/google-sign-in-5.png" alt="認証情報の確認ページ" /></p>

<p>OAuth同意画面では <strong>メールアドレス</strong> と <strong>サービス名</strong> を入力しましょう。(他は必要に応じて入力してください。)<br/>
<img src="/images/google-sign-in-6.png" alt="OAuth2.0の同意画面を作成" /></p>

<p>OAuth同意画面が作成できたら、認証情報を追加しましょう。<br/>
下図のように <strong>OAuth2.0クライアントID</strong> を選択してください。<br/>
<img src="/images/google-sign-in-7.png" alt="OAuth2.0クライアントIDを作成" /></p>

<p>今回はiOS用なので、下図の手順でクライアントIDを作成しましょう。<br/>
<img src="/images/google-sign-in-8.png" alt="OAuth2.0クライアントIDを作成②" /></p>

<p>これでクライアントIDが作成されたと思います。<br/>
作成したクライアントIDを選択すれば、下図のような情報が得られるはずです。<br/>
 <img src="/images/google-sign-in-1.png" alt="Google Developer ConsoleのOAuth2.0 for iOS" /></p>

<h4>Google Sign-in SDK for iOSを実装しよう</h4>

<p>当然のことながら、基本的なことは<a href="https://developers.google.com/identity/sign-in/ios/start-integrating">Googleの公式サイト</a>に書かれています。<br/>
とは言え、英語ですし、案外躓くところもあったりするので、順を追って説明していきます。</p>

<p>まずは、<a href="https://developers.google.com/identity/sign-in/ios/start">Google Sign-In for iOSのガイドページ</a>にアクセスしましょう。<br/>
そうすると、順番に説明されていることがわかります。<br/>
①はテストコードを手に入れるだけなので、自分のプロジェクトに組み込むなら②からはじめましょう。<br/>
<img src="/images/google-sign-in-9.png" alt="GET A CONFIGURATION FILE" /></p>

<p>そうすると、下図のようなページに遷移します。<br/>
<img src="/images/google-sign-in-10.png" alt="Enable Google services for your app" /></p>

<p>ここで <strong>App name</strong> にGoogle Developer Consoleのプロジェクト名を <strong>『選択』</strong> します。<br/>
注意点として、App nameに記載されているデフォルト名を削除すると、選択可能なプロジェクト名が表示されます。<br/>
App nameが入力されれば、 <strong>iOS Bundle ID</strong> も選択可能になります。</p>

<p>必要事項を入力した後はChoose and configure servicesボタンを選択しましょう。<br/>
<img src="/images/google-sign-in-11.png" alt="Choose and configure services" /></p>

<p>結果、画面が遷移します。<br/>
<img src="/images/google-sign-in-12.png" alt="Configuration Fileを作成しよう" /></p>

<p>画面下の方のGenerate configuration filesボタンをクリックしましょう。<br/>
<img src="/images/google-sign-in-13.png" alt="Configuration Fileを作成しよう" /></p>

<p>plistファイルのダウンロード画面が表示されるので、ダウンロードしましょう。<br/>
<img src="/images/google-sign-in-14.png" alt="plistファイルをダウンロード" /></p>

<p>必要なファイルが揃ったので、 <strong>Google Sign-In for iOS ライブラリ</strong> を自分のプロジェクトに導入しましょう。<br/>
Podfileを作成して、<code>pod 'Google/SignIn</code>と記載します。あとは<code>pod install</code>でOK</p>

<p>さて<code>xcworkspace</code>ファイルが作成されているはずなので、Xcodeで開きましょう。<br/>
先ほどダウンロードした<code>GoogleService-Info.plist</code>ファイルをプロジェクトに組み込みましょう。<br/>
ファイルを選択して、Xcodeプロジェクトにドラッグ＆ドロップでOKです。</p>

<p>続いて、<code>GoogleService-Info.plist</code>ファイルに記載された <strong>REVERSED_CLIENT_ID</strong> と <strong>BUNDLE_ID</strong> をURL schemesとして設定する必要があります。<br/>
TARGETS > info > URL TypesでURL Typeを2つ追加しましょう。<br/>
<img src="/images/google-sign-in-15.png" alt="URL Typesを追加" /></p>

<p>これでソースコードを書くまでの準備が整いました。<br/>
次にソースコードを書いていきます。</p>

<p>```objective-c
// AppDelegate.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;Google/SignIn.h></h1>

<p>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate, GIDSignInDelegate></p>

<p>@property (strong, nonatomic) UIWindow *window;</p>

<p>@end
```</p>

<p>```objective-c
// AppDelegate.m
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {</p>

<pre><code>// Override point for customization after application launch.

NSError* configureError;
[[GGLContext sharedInstance] configureWithError: &amp;configureError];
NSAssert(!configureError, @"Error configuring Google services: %@", configureError);

[GIDSignIn sharedInstance].delegate = self;

return YES;
</code></pre>

<p>}</p>

<p>&lt;省略></p>

<ul>
<li><p>(BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {</p>

<p>  return [[GIDSignIn sharedInstance] handleURL:url sourceApplication:sourceApplication annotation:annotation];
}</p></li>
</ul>


<p>// Google Sign-inに成功した場合に呼び出される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn didSignInForUser:(GIDGoogleUser </em>)user withError:(NSError *)error {</p>

<pre><code>// Perform any operations on signed in user here.
NSString *userId = user.userID;                  // For client-side use only!
NSString *idToken = user.authentication.idToken; // Safe to send to the server
NSString *name = user.profile.name;
NSString *email = user.profile.email;

NSLog(@"userId: %@, idToken: %@, name: %@, email: %@", userId, idToken, name, email);
</code></pre>

<p>}</p>

<p>// Google Sign-inに失敗した場合に呼び出される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn didDisconnectWithUser:(GIDGoogleUser </em>)user withError:(NSError *)error {</p>

<pre><code>// Perform any operations when the user disconnects from app here.
NSLog(@"error: %@", error);
</code></pre>

<p>}</p>

<p>```</p>

<p>```objective-c
// ViewController.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;Google/SignIn.h></h1>

<p>@interface ViewController : UIViewController <GIDSignInUIDelegate></p>

<p>@property (weak, nonatomic) IBOutlet GIDSignInButton *signInButton;</p>

<p>@end</p>

<p>```</p>

<p>```objective-c
// ViewController.m
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

[GIDSignIn sharedInstance].uiDelegate = self;
// 任意のスコープを設定
[GIDSignIn sharedInstance].scopes = @[@"https://www.googleapis.com/auth/calendar", @"https://www.googleapis.com/auth/drive"];
NSLog(@"scope: %@", [GIDSignIn sharedInstance].scopes);
</code></pre>

<p>}</p>

<p>// エラーが発生した場合に呼び出される処理
&ndash; (void)signInWillDispatch:(GIDSignIn <em>)signIn error:(NSError </em>)error {</p>

<pre><code>NSLog(@"error: %@", error);
</code></pre>

<p>}</p>

<p>// Google OAuth2認証画面を開始するときに実行される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn presentViewController:(UIViewController </em>)viewController {</p>

<pre><code>// OAuth2認証画面を表示する処理
[self presentViewController:viewController animated:YES completion:nil];
</code></pre>

<p>}</p>

<p>// Google OAuth2認証が完了したら実行される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn dismissViewController:(UIViewController </em>)viewController {</p>

<pre><code>// OAuth2認証の画面を閉じる処理
[self dismissViewControllerAnimated:YES completion:nil];
</code></pre>

<p>}</p>

<p>// Google Sign-inボタンをクリックした場合の処理(Storyboardで設定すること)
&ndash; (IBAction)didTapSignIn:(id)sender {</p>

<pre><code>// Google Sign-inを実行する処理
[[GIDSignIn sharedInstance] signIn];
</code></pre>

<p>}
```</p>

<p>上記を実行することで下記のようにOAuth2認証ができました。</p>

<p><img src="/images/google-sign-in-2.png" alt="Google OAuth2認証開始画面" /><br/>
<img src="/images/google-sign-in-3.png" alt="Google OAuth2認証の認証許可確認画面" /></p>

<p><strong>Google+アプリ</strong> がインストールされている場合はSafariではなく <strong>Google+アプリ</strong> が起動します。</p>

<p>さて、いかがだったでしょうか？<br/>
今回はひとまず、ここまでにしますが、今後はOAuth2認証後にGoogle Calendar APIやGoogle Driveの画面表示をしてみたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
