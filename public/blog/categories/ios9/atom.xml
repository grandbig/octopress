<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios9 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ios9/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SFSafariViewControllerを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/22/sfsafariviewcontroller/"/>
    <updated>2015-09-22T22:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/22/sfsafariviewcontroller</id>
    <content type="html"><![CDATA[<h4>iOS9から導入されたSFSafariViewControllerを使ってみよう！</h4>

<p>さて、iPhone6s, iPhone6s Plusの発売を心待ちにされている開発者の皆さんを横目にブログを更新したいと思います。<br/>
と言っても、筆者は土曜日にはiPhone6sをGETできるはず&hellip;。</p>

<p>本日はSFSafariViewControllerを触ってみたいと思います。<br/>
SFSafariViewControllerはアプリ内でWeb画面を表示したいときに使うことをAppleが奨励しています。これにより、今まで自作アプリからSafariを起動させていたのに対して、アプリ内でSafariを呼び出すことが可能となりました。<br/>
気をつけて欲しいのは、 <strong>カスタマイズはできない</strong> ということです。<br/>
例えば、UIWebViewやWKWebViewでやっていたような『Web側から <strong>document.location = &hellip;.</strong> を実行することでネイティブ側で何か処理をさせる』といったことはできません。<br/>
あくまでも <strong>単なるWebサイトの表示</strong> に利用します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>SFSafariViewControllerの使い方</h5>

<p>まずは、使い方を説明しましょう。<br/>
SFSafariViewControllerを使うためには、 <strong>SafariServices.framework</strong> を追加する必要があります。</p>

<p><img src="/images/sfsafariviewcontroller_1.png" alt="SafariServices.frameworkを追加" /></p>

<p>後は、ソースコードを書くだけです。<br/>
今回は画面上に置かれた『WEB』ボタンをクリックしたときにSFSafariViewControllerを呼び出すようにしてみます。</p>

<p><img src="/images/sfsafariviewcontroller_2.png" alt="画面キャプチャ" /></p>

<p>実際のソースコードは下記です。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;SafariServices/SafariServices.h></h1>

<p>@interface ViewController () <SFSafariViewControllerDelegate></p>

<p>@property (strong, nonatomic) SFSafariViewController *sfv;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>// WEBボタンをタップした際に呼び出される処理
&ndash; (IBAction)goToWebPage:(id)sender {</p>

<pre><code>self.sfv = [[SFSafariViewController alloc] initWithURL:[NSURL URLWithString:@"http://www.yahoo.co.jp/"]];
self.sfv.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
[self presentViewController:self.sfv animated:YES completion:nil];
self.sfv.delegate = self;
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; SFSafariViewControllerDelegate</h1>

<p>// アクションボタンをタップされた際に呼び出される処理
&ndash; (NSArray<UIActivity *> <em>)safariViewController:(SFSafariViewController </em>)controller activityItemsForURL:(NSURL <em>)URL title:(NSString </em>)title {</p>

<pre><code>NSLog(@"activityItemdForURL");          
return @[];
</code></pre>

<p>}</p>

<p>// SFSafariViewControllerに表示する最初の画面の読込みが完了した際に呼び出される処理
&ndash; (void)safariViewController:(SFSafariViewController *)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully {</p>

<pre><code>NSLog(@"didCompleteInitialLoad");
</code></pre>

<p>}</p>

<p>// SFSafariViewControllerのDone(完了)ボタンをタップした際に呼び出される処理
&ndash; (void)safariViewControllerDidFinish:(SFSafariViewController *)controller {</p>

<pre><code>NSLog(@"safariViewControllerDidFinish");
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>これでSFsafariViewControllerが実装されたことがわかると思います。</p>

<p>因みに、SFSafariViewControllerを使う上で気をつけたいのが、如何にユーザにあくまでもアプリ内の遷移であると理解させることかと思います。<br/>
例えば、デフォルトではSFSafariViewControllerは下から上に上がってくる形で表示がされます。<br/>
もし、WebView内でふわっと浮かび上がってくるような画面遷移のアニメーションをしているのだとしたら、これはかなりの違和感になりますよね？<br/>
なので、<code>self.sfv.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;</code>のようにアニメーションを工夫することも重要になってきます。</p>

<p>また、<code>SFSafariViewControllerDelegate</code>のメソッドを3つ書いてみましたが、あまり使いどころが思い浮かばないというのが正直なところです。<br/>
Done(完了)ボタンを押したときに<code>dismissViewController</code>が必要かとも思ったのですが、自動的に閉じますし&hellip;。</p>

<p><code>SFSafariViewController</code>をユーザに見せている間に何らかの処理を裏でしておくといったことは考えられるかもしれませんね。</p>

<h5>Safariを起動する</h5>

<p>SFSafariViewControllerが登場したからといって、Safari起動ができなくなったわけではもちろんありません。<br/>
Safariを起動したって良いんです。<br/>
というのもiOS9からはアプリ間遷移がスムーズになったからです。<br/>
ただし、 <strong>1つ前のアプリに戻る</strong> ときのみの話ですが、頻繁に多種多様なアプリ間を移動するアプリでなければ十分でしょう。</p>

<p>試しに、先ほどの『WEB』ボタンをタップしたときの処理をSafariの起動に変更してみます。</p>

<p>```objective-c
// ViwController.mから一部抜粋
// WEBボタンをタップした際に呼び出される処理
&ndash; (IBAction)goToWebPage:(id)sender {</p>

<pre><code>// Safariを起動
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.yahoo.co.jp/"]];
</code></pre>

<p>}
```</p>

<p>Safariアプリを起動した後、下記のように、左上に戻るボタンが表示されます。</p>

<p><img src="/images/sfsafariviewcontroller_3.png" alt="1つ前のアプリに戻る" /></p>

<p>さて、いかがだったでしょうか。<br/>
今後は、iOS9以降対応のアプリを開発すると、すぐには完全に割り切ることはできないと思いますので、iOS8までのことも踏まえつつ、最適な方法を取るのが良いでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9でWebViewの性能を測ろう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/21/ios9-webview/"/>
    <updated>2015-09-21T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/21/ios9-webview</id>
    <content type="html"><![CDATA[<h4>iOS9で使えるWebViewで各種テスト</h4>

<p>さて、iOS8が出た時にも結果を載せましたが、iOS9でもやってみようと思います。<br/>
iOS9では <strong>SFSafariViewController</strong> というものが増えましたし、UIWebViewおよびWKWebViewがSafariに対して、どの程度の性能を示すのか改めて調べておくことも重要だと思います。</p>

<p>早速結果を記載していきます。</p>

<h5>HTML5の結果</h5>

<p><a href="https://html5test.com/">HTML5test</a>の結果を記載します。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 391</li>
<li>WKWebView: 407</li>
<li>SFSafariViewController: 407</li>
<li>Safari: 409</li>
</ul>


<p>上記のような結果が得られました。<br/>
各種WebView間での差異は全て <strong>Storage</strong> の差です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>CSS3の結果</h5>

<p><a href="http://css3test.com/">CSS3test</a>の結果を記載します。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 55%</li>
<li>WKWebView: 55%</li>
<li>SFSafariViewController: 55%</li>
<li>Safari: 55%</li>
</ul>


<p>上記のようにCSS3においては差異はありませんでした。</p>

<h5>SunSpiderの結果</h5>

<p><a href="https://www.webkit.org/perf/sunspider/sunspider.html">SunSpider</a>の結果を記載します。<br/>
これはJavaScriptを利用したテストです。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 1481.2 ms</li>
<li>WKWebView: 351.7 ms</li>
<li>SFSafariViewController: 364.5 ms</li>
<li>Safari: 343.1 ms</li>
</ul>


<p>上記のような結果が得られました。<br/>
UIWebViewは以前もお伝えしたようにWKWebViewの約4倍程度の処理時間がかかっています。<br/>
他は誤差の範囲で全く同じと見てよいでしょう。</p>

<h5>Octane2.0の結果</h5>

<p><a href="https://developers.google.com/octane/">Octane2.0</a>の結果を記載します。<br/>
これもJavaScriptを利用したテストです。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 987</li>
<li>WKWebView: 8541</li>
<li>SFSafariViewController: 8112</li>
<li>Safari: 8627</li>
</ul>


<p>Octaneは点数制なので、スコアが高いほど優秀と言えます。<br/>
UIWebViewは他と比べて、低い点数となっています。<br/>
一方で、他の3つはほぼ誤差の範囲と見て良いでしょう。(SFSafariViewControllerが多少差がついているものの&hellip;)</p>

<p>以上の結果から用途を守って正しくWebViewを使うと良いでしょう。</p>

<ul>
<li>UIWebView

<ul>
<li>Storyboard上で配置できるので、使い方が簡単。</li>
<li>重い処理をさせることがない(高速処理を求めない)</li>
</ul>
</li>
<li>WKWebView

<ul>
<li>ソースコードベースで書くため、少し手間がかかる。</li>
<li>カスタマイズ性が高い＆高速処理が可能</li>
</ul>
</li>
<li>SFSafariViewController

<ul>
<li>単なるWebサイトを表示するためだけに利用。</li>
<li>カスタマイズ性が全く不要な場合に適切</li>
</ul>
</li>
<li>Safari

<ul>
<li>アプリ外の遷移でも問題なければ、アプリからSafariを起動するのも良いでしょう。iOS9からアプリ間の遷移がスムーズになったわけですし。</li>
</ul>
</li>
</ul>


<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9 App Transport Securityについて]]></title>
    <link href="http://grandbig.github.io/blog/2015/08/31/ios9-ats/"/>
    <updated>2015-08-31T22:59:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/08/31/ios9-ats</id>
    <content type="html"><![CDATA[<h4>iOS9のApp Transport Securityについて調べてみた</h4>

<p>さて、今月、最終日になんとかブログ更新です。<br/>
来週、新型iPhoneの発表が期待される中、開発者間で話題となっているApp Transport Security(以下、ATS)について調べてみました。</p>

<p>ATSの詳細は<a href="http://qiita.com/yanayanalte/items/e6d83c12af77fa238a58">iOS9 ATS問題</a>などで既に詳しく書かれていますので、割愛します。<br/>
どちらかと言うと実開発よりで話をしたいと思います。</p>

<p>これまで筆者はiOSアプリを作り続けてきたわけなんですが、実は会社では所謂ハイブリッドアプリと呼ばれる、 <strong>WebViewを用いたアプリ</strong> の開発をすることが多く、古くからあるUIWebViewはもちろんのことWKWebViewも利用してきました。<br/>
正直、これまで特別な場合を覗いて、 <strong>HTTPS</strong> を意識することはありませんでした。<br/>
しかし、昨今のセキュリティ問題から周りの考え方も変わりつつあります。<br/>
それをさらに一押したのが、iOS9のATSではないかと考えています。<br/>
今後は、グローバルに空いているサーバに対しては <strong>HTTPS</strong> しか許されないことになることでしょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>iOS8でのWKWebViewにおける自己証明書について</h5>

<p>iOS9の具体的な話に入る前に一言だけ。<br/>
周知のことかもしれませんが、iOS8のWKWebViewでは自己証明書を利用したサーバの <strong>https</strong> から始まるURLを指定することはできません。<br/>
指定したとしても、表示することができません。<br/>
これは<a href="http://stackoverflow.com/questions/27100540/allow-unverified-ssl-certificates-in-wkwebview">stackoverflow &ndash; Allow unverified ssl certificates in WKWebView</a>に書かれている通り、WKNavigationDelegate Protocolである <strong>didReceiveAuthenticationChallenge</strong> メソッドが呼ばれないためです。</p>

<p>iOS8が登場した当初はバグでは？と騒がれていましたが、iOS9での <strong>HTTPS</strong> 推奨の流れから見るに、わざとだったのでは？とも勘ぐれますね&hellip;。</p>

<h5>iOS9でのWKWebViewにおける自己証明書について</h5>

<p>iOS9からは <strong>didReceiveAuthenticationChallenge</strong> メソッドを通るらしく、コードを書くことで、自己証明書を利用したHTTPS通信が可能なようです。<br/>
<a href="http://qiita.com/niwatako/items/9ae602cb173625b4530a">iOS9からWKWebViewのSSL/TLS接続はコードで制御する</a>を参照のこと。<br/>
確かに、問題なく、実行できることを確認しました。</p>

<h5>iOS9でのHTTP通信許可方法について</h5>

<p>Info.plistに下記の設定を入れることで、全てのHTTP通信を許可できます。</p>

<p>```objective-c
<key>NSAppTransportSecurity</key>
<dict></p>

<pre><code>&lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;
&lt;true/&gt;
</code></pre>

<p></dict>
```</p>

<p>流石に全てを許可するのははばかられるといった場合にはHTTP通信を許可するドメインを指定することもできます。</p>

<p>```objective-c
<key>NSAppTransportSecurity</key>
<dict></p>

<pre><code>&lt;key&gt;NSExceptionDomains&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;xxx.com&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&lt;/key&gt;
        &lt;true/&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
</code></pre>

<p></dict>
```</p>

<p>しかし、これには注意が必要です。<br/>
もしも、指定したドメインアクセス時に呼び出されるHTMLファイルの中に、外部ドメインから取得しているJavaScriptファイルがあった場合、それらもInfo.plistに指定する必要があります。<br/>
これまで、WebソースはAppleの審査を介さずとも変更が可能な範疇でしたが、HTTP通信として設定を必要とする場合が出てくるため、十分に注意が必要です。<br/>
HTTP, HTTPSのどちらでもソースが取得できる場合は、Info.plistにHTTP通信用のドメインとして登録するのではなく、下記のように <strong>https</strong> からパスを指定した方が良いでしょう。</p>

<p>```html</p>

<script type="text/javascript" src="https://〜"></script>


<p>```</p>

<p>本日は試してみたことをパパっと書きましたが、時間があるときにもっと探ってみようと思います。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
