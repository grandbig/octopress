<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reference | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/reference/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swiftでドキュメントコメントを正しく書こう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/24/swift-document-comment/"/>
    <updated>2016-01-24T00:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/24/swift-document-comment</id>
    <content type="html"><![CDATA[<h4>Swiftでのドキュメントコメントの書き方を覚えよう！</h4>

<p>先日、<a href="http://grandbig.github.io/blog/2016/01/12/jazzy/">jazzy: リファレンス自動生成ツール</a>の記事を書きました。<br/>
その中で幾つかのドキュメントコメントの書き方を紹介しましたが、改めて説明しておきたいと思います。</p>

<p>Swiftではドキュメントコメントの中でマークアップ言語の書式が有効に働きます。<br/>
代表的なマークアップ言語の書式は下記の通りです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>マークアップ言語の書式</h4>

<h5>見出し</h5>

<p>```objective-c</p>

<h1>最大見出し</h1>

<h2>大見出し</h2>

<h3>中見出し</h3>

<h4>見出し</h4>

<h5>小見出し</h5>

<h6>最小見出し</h6>

<p>```</p>

<p><img src="/images/documment_comment_1.png" alt="見出しを書いた場合" /></p>

<h5>リスト</h5>

<p>```objective-c
&ndash; リスト項目１</p>

<pre><code>- リスト小項目１
- リスト小項目２
- リスト小項目３
</code></pre>

<ul>
<li>リスト項目２</li>
<li>リスト項目３
```</li>
</ul>


<p><img src="/images/documment_comment_2.png" alt="リストを書いた場合" /></p>

<h5>順序リスト</h5>

<p>```objective-c
1. 順序リスト項目１</p>

<pre><code>1. 小順序リスト項目１
2. 小順序リスト項目２
3. 小順序リスト項目３
</code></pre>

<ol>
<li>順序リスト項目２</li>
<li>順序リスト項目３
```</li>
</ol>


<p><img src="/images/documment_comment_3.png" alt="順序リストを書いた場合" /></p>

<h5>ItalicとBold</h5>

<p>```objective-c
normal</p>

<p><em>Italic</em></p>

<p><strong>Bold</strong>
```</p>

<p><img src="/images/documment_comment_4.png" alt="ItalicとBold" /></p>

<h5>URLリンク</h5>

<p><code>objective-c
[URLリンク](https://developer.apple.com/jp/)
</code></p>

<p><img src="/images/documment_comment_5.png" alt="URLリンク" /></p>

<h5>罫線</h5>

<p>```objective-c
abcdefg</p>

<hr />

<p>123456</p>

<hr />

<p>あいうえお</p>

<hr />

<p>かきくけこ
```</p>

<p><img src="/images/documment_comment_6.png" alt="罫線" /></p>

<h5>コード表記</h5>

<p>(Octopressの都合上、ここでは書き方が異なりますが、ご了承ください。)</p>

<p>` ` `<br/>
self.sampleMethod()<br/>
` ` `</p>

<p><img src="/images/documment_comment_7.png" alt="コード表記" /></p>

<h4>Swiftのドキュメントコメントの書式</h4>

<h5>MARK</h5>

<p>```objective-c
// MARK: &ndash; Properties
var sample:String = &ldquo;sampleProperty&rdquo;</p>

<p>// MARK: &ndash; Method
func sampleMethod() {</p>

<pre><code>print("This is sampleMethod.")
</code></pre>

<p>}
```</p>

<p><img src="/images/documment_comment_8.png" alt="MARK" /></p>

<h5>FIXME</h5>

<p>```objective-c
func sampleMethod() {</p>

<pre><code>// FIXME: - ログ出力ではなく、アラートを出す
print("This is sampleMethod.")
</code></pre>

<p>}
```</p>

<p><img src="/images/documment_comment_9.png" alt="FIXME" /></p>

<h5>TODO</h5>

<p>```objective-c
func sampleMethod() {</p>

<pre><code>// TODO: - ログ出力ではなく、何か処理を書く(まだ決まっていないけど)
print("This is sampleMethod.")
</code></pre>

<p>}
```</p>

<p><img src="/images/documment_comment_10.png" alt="TODO" /></p>

<h5>Parameter / Throws / Returns</h5>

<p>```objective-c
/**
 サンプルメソッド</p>

<ul>
<li>parameter name: パラメータの書き方</li>
<li>throws: 例外処理の書き方</li>
<li><p>returns: 戻り値の書き方
*/
func sampleMethod2(name:String) throws &ndash;> String {</p>

<p>  return &ldquo;result: &rdquo; + name
}
```</p></li>
</ul>


<p><img src="/images/documment_comment_11.png" alt="Parameter / Throws / Returns" /></p>

<h5>Description内で利用可能な文言</h5>

<p>この他にクラス, プロパティ, メソッドの説明(Description)を書く際に利用可能な予約語的なものが幾つかあります。</p>

<p><code>objective-c
/**
 - Attention: 注意書き
 - Author: 作成者が一人の場合
 - Authors: 作成者が複数人の場合
 - Bug: バグの詳細
 - Copyright: 著作権の所在
 - Date: 日付(作成日, 更新日など)
 - Experiment: 実験内容
 - Important: 重要事項
 - Invariant: 不変事項
 - Note: その他、必要事項
 - Precondition: 事前条件
 - Postcondition: 事後条件
 - Remark: 備考
 - Requires: 要求事項
 - SeeAlso: 参照事項
 - Since: いつから実装されているか
 - Version: バージョン
 - Warning: 警告                 
*/
</code>
上記のように書くことで、 <strong>太字</strong> かつ <strong>各用語に属する説明</strong> が付与されます。</p>

<p><img src="/images/documment_comment_12.png" alt="予約語1" /></p>

<p><img src="/images/documment_comment_13.png" alt="予約語2" /></p>

<h4>まとめ</h4>

<p>さて、いかがだったでしょうか？<br/>
これだけ知っていれば、ほぼ確実に困ることはないと思います。<br/>
どこまで頑張って書くかは開発者次第かもしれませんが、やはり初めてコードを見る人でも極力伝わるようにしておくことは必要不可欠かと思います。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jazzyを使って、Swiftで書いたプロジェクトのリファレンスを自動生成しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/12/jazzy/"/>
    <updated>2016-01-12T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/12/jazzy</id>
    <content type="html"><![CDATA[<h4>jazzyとは</h4>

<p>さて、本日は<a href="https://github.com/Realm/jazzy">jazzy</a>について書こうと思います。<br/>
jazzyはSwiftで書いたプロジェクトのリファレンスを自動で生成できるツールです。<br/>
最近、熱いMobile DatabaseであるRealmと同じチームが開発しているようです。<br/>
今のところ、他に良さそうなツールはないんじゃないでしょうか？</p>

<p>兎にも角にも、早速使ってみることにします。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>jazzyのインストール</h5>

<p>jazzyのインストールは簡単です。<br/>
下記コマンドを実行してください。</p>

<p><code>sudo gem install jazzy</code></p>

<h5>jazzyのコマンド</h5>

<p><code>jazzy -h</code>を実行してコマンドを確認してみましょう。<br/>
下記のような結果が得られるはずです。</p>

<p>```objective-c
Usage: jazzy</p>

<p>Options</p>

<pre><code>-o, --output FOLDER              Folder to output the HTML docs to
-c, --[no-]clean                 Delete contents of output directory before running. 
                                 WARNING: If --output is set to ~/Desktop, this will delete the ~/Desktop directory.
    --[no-]objc                  Generate docs for Objective-C.
    --umbrella-header PATH       Umbrella header for your Objective-C framework.
    --framework-root PATH        The root path to your Objective-C framework.
    --sdk [iphone|watch|appletv][os|simulator]|macosx
                                 The SDK for which your code should be built.
    --config PATH                Configuration file (.yaml or .json)
                                 Default: .jazzy.yaml in source directory or ancestor
-x arg1,arg2,…argN,              Arguments to forward to xcodebuild
    --xcodebuild-arguments
-s FILEPATH,                     File generated from sourcekitten output to parse
    --sourcekitten-sourcefile
    --source-directory DIRPATH   The directory that contains the source to be documented
-e, --exclude file1,file2,…fileN Files to be excluded from documentation
    --swift-version VERSION
-a, --author AUTHOR_NAME         Name of author to attribute in docs (e.g. Realm)
-u, --author_url URL             Author URL of this project (e.g. http://realm.io)
-m, --module MODULE_NAME         Name of module being documented. (e.g. RealmSwift)
    --module-version VERSION     module version. will be used when generating docset
    --copyright COPYRIGHT_MARKDOWN
                                 copyright markdown rendered at the bottom of the docs pages
    --readme FILEPATH            The path to a markdown README file
    --podspec FILEPATH
    --docset-icon FILEPATH
    --docset-path DIRPATH        The relative path for the generated docset
-r, --root-url URL               Absolute URL root where these docs will be stored
-d, --dash_url URL               Location of the dash XML feed e.g. http://realm.io/docsets/realm.xml)
-g, --github_url URL             GitHub URL of this project (e.g. https://github.com/realm/realm-cocoa)
    --github-file-prefix PREFIX  GitHub URL file prefix of this project (e.g. https://github.com/realm/realm-cocoa/tree/v0.87.1)
    --min-acl [private | internal | public]
                                 minimum access control level to document
    --[no-]skip-undocumented     Don't document declarations that have no documentation comments.
    --[no-]hide-documentation-coverage
                                 Hide "(X% documented)" from the generated documents
    --head HTML                  Custom HTML to inject into &lt;head&gt;&lt;/head&gt;.
    --theme [apple | fullwidth | DIRPATH]
                                 Which theme to use. Specify either 'apple' (default), 'fullwidth' or the path to your mustache templates and other assets for a custom theme.
-t, --template-directory DIRPATH DEPRECATED: Use --theme instead.
    --assets-directory DIRPATH   DEPRECATED: Use --theme instead.
-v, --version                    Print version number
-h, --help [TOPIC]               Available topics:
                                    usage   Command line options (this help message)
                                    config  Configuration file options
                                 ...or an option keyword, e.g. "dash"
</code></pre>

<p>```</p>

<p>ヘルプを見て頂ければ、なんとなく概要をつかめると思いますが、特に重要なものを説明します。</p>

<ol>
<li><code>-o FOLDER</code><br/>
リファレンスの出力場所を指定するコマンドです</li>
<li><code>--min-acl [private | internal | public]</code><br/>
リファレンスに出力するプロパティおよびメソッドの最低アクセス権限<br/>
例えば、<code>--min-acl public</code>を指定した場合、<code>private</code>や<code>internal</code>指定されたプロパティやメソッドはリファレンスに出力されません。</li>
<li><code>--skip-undocumented</code><br/>
ドキュメントコメントが書かれていないプロパティやメソッドはリファレンスに出力しません。</li>
<li><code>--author AUTHOR_NAME</code><br/>
リファレンスに開発者を明記します。</li>
<li><code>--author_url URL</code><br/>
リファレンス上に表記される開発者名にURlリンクを付与します。</li>
</ol>


<h4>Swift2.0以降でのドキュメントコメントの書き方について</h4>

<p>Swift2.0以降でのドキュメントコメントの書き方を見ていきます。<br/>
<strong>jazzy</strong> を使うことを前提にした書き方のみ記述します。</p>

<p>```objective-c
import UIKit</p>

<p>/**</p>

<p>UIViewControllerを継承したViewControllerクラス</p>

<p>*/
class ViewController: UIViewController {</p>

<pre><code>// MARK: Properties
/// 文字列を格納するためのサンプル変数
var sampleParam1:String?
/// 数値を格納するためのサンプル定数
let sampleParam2:Int = 0

&lt;省略&gt;

// MARK: Method
/**

ログを出力するメソッド

- parameter message: ログ出力したいメッセージ

*/
func sampleMethod(message: String) {
    print(message)
}

/**

trueフラグを返すメソッド

- returns: trueフラグ

*/
func sampleMethod2() -&gt; Bool {
    return true
}

/**

メッセージを生成するメソッド

- parameter message: 生成したいメッセージの一部分
- returns: 生成したメッセージ

*/
func sampleMethod3(message:String) -&gt; String {
    return "生成したメッセージ： \(message)"
}
</code></pre>

<p>}
```</p>

<p>ポイントは、</p>

<ul>
<li>クラス名にドキュメントコメントを必ずつけること</li>
<li>メソッドのDescriptionとParameterもしくはReturnとの間に1行をあけること</li>
<li><code>:param:</code>や<code>:returns:</code>といった古い書き方をしないこと</li>
</ul>


<p>です。</p>

<p>上記ポイントを踏まえた上で、<br/>
<code>jazzy --min-acl internal --skip-undocumented -o jazzy_doc --author Takahiro --author_url https://grandbig.github.io/</code><br/>
を実行してみましょう。<br/>
オプションは必要に応じてつけてください。</p>

<p>結果、下図のようなリファレンスが作成されます。</p>

<p><img src="/images/jazzy_1.png" alt="トップページ" /><br/>
こちらはトップページです。</p>

<p><img src="/images/jazzy_2.png" alt="クラスの説明" /><br/>
続いて、クラスを選択した際に表示されるクラスの説明ページ</p>

<p><img src="/images/jazzy_3.png" alt="クラスのプロパティの説明" /><br/>
各プロパティを選択すれば、その説明が表示されます。</p>

<p><img src="/images/jazzy_4.png" alt="クラスのメソッドの説明" /><br/>
各メソッドを選択すれば、その説明が表示されます。</p>

<p>いかがだったでしょうか？<br/>
リファレンスは第三者にソースコードを説明する上でも非常に重要なものです。<br/>
初めから書式ルールに沿ってコードを書いておけば、自動生成ツールで速攻リファレンスを作れますので、ぜひぜひ把握しておきましょう。</p>

<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6.2で使ってみようDoxygen]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/05/doxygen/"/>
    <updated>2015-04-05T14:07:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/05/doxygen</id>
    <content type="html"><![CDATA[<h4>Doxygen</h4>

<p>さて、本日はDoxygenについて書こうと思います。<br/>
筆者はAppleライクなリファレンスを生成できる<a href="https://github.com/tomaz/appledoc">appledoc</a>を利用していましたが、なぜかXcode6.2でうまく生成できないことやAppleの公式リファレンスのデザインが以前より大幅に変更されたことから<a href="http://www.doxygen.jp/">Doxygen</a>を使うことにしました。</p>

<p>DoxygenはC++, C, Java, Objective-C, Python, IDL, Fortran, VHDL, PHP, C#のためのドキュメントジェネレータツールです。<br/>
独特のリファレンススタイルであるものの、下記3点のメリットがあると公式サイトに書かれています。</p>

<ul>
<li>ドキュメントとソースコードの一貫性を保つことが容易</li>
<li>文書化されていないソースファイルから、 コードの構造を抽出するように設定可能</li>
<li>Doxygen を「乱用 (abuse)」して、 通常のドキュメントを作成可能</li>
</ul>


<p>では、早速使ってみることにしましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Doxygenの使い方</h5>

<p>まず、<a href="http://www.stack.nl/~dimitri/doxygen/download.html#srcbin">Doxygen公式サイト</a>からダウンロードしましょう。<br/>
PCへのインストールが完了すると、下記のウィンドウが表示されます。<br/>
<img src="/images/doxygen_1.png" alt="Doxygen.app" /></p>

<p>ドラッグ＆ドロップでApplicationに追加しましょう。</p>

<p>Doxygenを起動します。<br/>
すると下記のようなウィンドウが表示されます。<br/>
<img src="/images/doxygen_4.png" alt="Doxygenウィンドウ" /></p>

<p>各項目を下記のように指定しましょう。<br/>
<img src="/images/doxygen_3.png" alt="Doxygenウィンドウに各項目を指定" /></p>

<p>そして、Runをクリックしてタブを切り替えます。そして、Run doxygenをクリックします。<br/>
すると、Output produced by doxygenにログが出力されます。</p>

<p><img src="/images/doxygen_2.png" alt="ログを出力" /></p>

<p>完了したら、 <strong>Show HTML output</strong> をクリックしましょう。<br/>
ブラウザが起動して、リファレンスが表示されるはずです。</p>

<p><img src="/images/doxygen_5.png" alt="リファレンス" /></p>

<p>クラス間の関係性もわかるため、なかなか良い気がします。<br/>
appledocとほとんど書式も同じっぽいですし。<br/>
少しずつ慣れていこうと思います。<br/>
といったところで今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
