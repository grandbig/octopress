<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webview | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/webview/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SFSafariViewControllerを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/22/sfsafariviewcontroller/"/>
    <updated>2015-09-22T22:13:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/22/sfsafariviewcontroller</id>
    <content type="html"><![CDATA[<h4>iOS9から導入されたSFSafariViewControllerを使ってみよう！</h4>

<p>さて、iPhone6s, iPhone6s Plusの発売を心待ちにされている開発者の皆さんを横目にブログを更新したいと思います。<br/>
と言っても、筆者は土曜日にはiPhone6sをGETできるはず&hellip;。</p>

<p>本日はSFSafariViewControllerを触ってみたいと思います。<br/>
SFSafariViewControllerはアプリ内でWeb画面を表示したいときに使うことをAppleが奨励しています。これにより、今まで自作アプリからSafariを起動させていたのに対して、アプリ内でSafariを呼び出すことが可能となりました。<br/>
気をつけて欲しいのは、 <strong>カスタマイズはできない</strong> ということです。<br/>
例えば、UIWebViewやWKWebViewでやっていたような『Web側から <strong>document.location = &hellip;.</strong> を実行することでネイティブ側で何か処理をさせる』といったことはできません。<br/>
あくまでも <strong>単なるWebサイトの表示</strong> に利用します。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>SFSafariViewControllerの使い方</h5>

<p>まずは、使い方を説明しましょう。<br/>
SFSafariViewControllerを使うためには、 <strong>SafariServices.framework</strong> を追加する必要があります。</p>

<p><img src="/images/sfsafariviewcontroller_1.png" alt="SafariServices.frameworkを追加" /></p>

<p>後は、ソースコードを書くだけです。<br/>
今回は画面上に置かれた『WEB』ボタンをクリックしたときにSFSafariViewControllerを呼び出すようにしてみます。</p>

<p><img src="/images/sfsafariviewcontroller_2.png" alt="画面キャプチャ" /></p>

<p>実際のソースコードは下記です。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;SafariServices/SafariServices.h></h1>

<p>@interface ViewController () <SFSafariViewControllerDelegate></p>

<p>@property (strong, nonatomic) SFSafariViewController *sfv;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>// WEBボタンをタップした際に呼び出される処理
&ndash; (IBAction)goToWebPage:(id)sender {</p>

<pre><code>self.sfv = [[SFSafariViewController alloc] initWithURL:[NSURL URLWithString:@"http://www.yahoo.co.jp/"]];
self.sfv.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
[self presentViewController:self.sfv animated:YES completion:nil];
self.sfv.delegate = self;
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; SFSafariViewControllerDelegate</h1>

<p>// アクションボタンをタップされた際に呼び出される処理
&ndash; (NSArray<UIActivity *> <em>)safariViewController:(SFSafariViewController </em>)controller activityItemsForURL:(NSURL <em>)URL title:(NSString </em>)title {</p>

<pre><code>NSLog(@"activityItemdForURL");          
return @[];
</code></pre>

<p>}</p>

<p>// SFSafariViewControllerに表示する最初の画面の読込みが完了した際に呼び出される処理
&ndash; (void)safariViewController:(SFSafariViewController *)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully {</p>

<pre><code>NSLog(@"didCompleteInitialLoad");
</code></pre>

<p>}</p>

<p>// SFSafariViewControllerのDone(完了)ボタンをタップした際に呼び出される処理
&ndash; (void)safariViewControllerDidFinish:(SFSafariViewController *)controller {</p>

<pre><code>NSLog(@"safariViewControllerDidFinish");
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>これでSFsafariViewControllerが実装されたことがわかると思います。</p>

<p>因みに、SFSafariViewControllerを使う上で気をつけたいのが、如何にユーザにあくまでもアプリ内の遷移であると理解させることかと思います。<br/>
例えば、デフォルトではSFSafariViewControllerは下から上に上がってくる形で表示がされます。<br/>
もし、WebView内でふわっと浮かび上がってくるような画面遷移のアニメーションをしているのだとしたら、これはかなりの違和感になりますよね？<br/>
なので、<code>self.sfv.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;</code>のようにアニメーションを工夫することも重要になってきます。</p>

<p>また、<code>SFSafariViewControllerDelegate</code>のメソッドを3つ書いてみましたが、あまり使いどころが思い浮かばないというのが正直なところです。<br/>
Done(完了)ボタンを押したときに<code>dismissViewController</code>が必要かとも思ったのですが、自動的に閉じますし&hellip;。</p>

<p><code>SFSafariViewController</code>をユーザに見せている間に何らかの処理を裏でしておくといったことは考えられるかもしれませんね。</p>

<h5>Safariを起動する</h5>

<p>SFSafariViewControllerが登場したからといって、Safari起動ができなくなったわけではもちろんありません。<br/>
Safariを起動したって良いんです。<br/>
というのもiOS9からはアプリ間遷移がスムーズになったからです。<br/>
ただし、 <strong>1つ前のアプリに戻る</strong> ときのみの話ですが、頻繁に多種多様なアプリ間を移動するアプリでなければ十分でしょう。</p>

<p>試しに、先ほどの『WEB』ボタンをタップしたときの処理をSafariの起動に変更してみます。</p>

<p>```objective-c
// ViwController.mから一部抜粋
// WEBボタンをタップした際に呼び出される処理
&ndash; (IBAction)goToWebPage:(id)sender {</p>

<pre><code>// Safariを起動
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.yahoo.co.jp/"]];
</code></pre>

<p>}
```</p>

<p>Safariアプリを起動した後、下記のように、左上に戻るボタンが表示されます。</p>

<p><img src="/images/sfsafariviewcontroller_3.png" alt="1つ前のアプリに戻る" /></p>

<p>さて、いかがだったでしょうか。<br/>
今後は、iOS9以降対応のアプリを開発すると、すぐには完全に割り切ることはできないと思いますので、iOS8までのことも踏まえつつ、最適な方法を取るのが良いでしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9でWebViewの性能を測ろう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/21/ios9-webview/"/>
    <updated>2015-09-21T23:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/21/ios9-webview</id>
    <content type="html"><![CDATA[<h4>iOS9で使えるWebViewで各種テスト</h4>

<p>さて、iOS8が出た時にも結果を載せましたが、iOS9でもやってみようと思います。<br/>
iOS9では <strong>SFSafariViewController</strong> というものが増えましたし、UIWebViewおよびWKWebViewがSafariに対して、どの程度の性能を示すのか改めて調べておくことも重要だと思います。</p>

<p>早速結果を記載していきます。</p>

<h5>HTML5の結果</h5>

<p><a href="https://html5test.com/">HTML5test</a>の結果を記載します。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 391</li>
<li>WKWebView: 407</li>
<li>SFSafariViewController: 407</li>
<li>Safari: 409</li>
</ul>


<p>上記のような結果が得られました。<br/>
各種WebView間での差異は全て <strong>Storage</strong> の差です。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>CSS3の結果</h5>

<p><a href="http://css3test.com/">CSS3test</a>の結果を記載します。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 55%</li>
<li>WKWebView: 55%</li>
<li>SFSafariViewController: 55%</li>
<li>Safari: 55%</li>
</ul>


<p>上記のようにCSS3においては差異はありませんでした。</p>

<h5>SunSpiderの結果</h5>

<p><a href="https://www.webkit.org/perf/sunspider/sunspider.html">SunSpider</a>の結果を記載します。<br/>
これはJavaScriptを利用したテストです。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 1481.2 ms</li>
<li>WKWebView: 351.7 ms</li>
<li>SFSafariViewController: 364.5 ms</li>
<li>Safari: 343.1 ms</li>
</ul>


<p>上記のような結果が得られました。<br/>
UIWebViewは以前もお伝えしたようにWKWebViewの約4倍程度の処理時間がかかっています。<br/>
他は誤差の範囲で全く同じと見てよいでしょう。</p>

<h5>Octane2.0の結果</h5>

<p><a href="https://developers.google.com/octane/">Octane2.0</a>の結果を記載します。<br/>
これもJavaScriptを利用したテストです。<br/>
テストは全てiOS9, iPhone6端末で実施しています。</p>

<ul>
<li>UIWebView: 987</li>
<li>WKWebView: 8541</li>
<li>SFSafariViewController: 8112</li>
<li>Safari: 8627</li>
</ul>


<p>Octaneは点数制なので、スコアが高いほど優秀と言えます。<br/>
UIWebViewは他と比べて、低い点数となっています。<br/>
一方で、他の3つはほぼ誤差の範囲と見て良いでしょう。(SFSafariViewControllerが多少差がついているものの&hellip;)</p>

<p>以上の結果から用途を守って正しくWebViewを使うと良いでしょう。</p>

<ul>
<li>UIWebView

<ul>
<li>Storyboard上で配置できるので、使い方が簡単。</li>
<li>重い処理をさせることがない(高速処理を求めない)</li>
</ul>
</li>
<li>WKWebView

<ul>
<li>ソースコードベースで書くため、少し手間がかかる。</li>
<li>カスタマイズ性が高い＆高速処理が可能</li>
</ul>
</li>
<li>SFSafariViewController

<ul>
<li>単なるWebサイトを表示するためだけに利用。</li>
<li>カスタマイズ性が全く不要な場合に適切</li>
</ul>
</li>
<li>Safari

<ul>
<li>アプリ外の遷移でも問題なければ、アプリからSafariを起動するのも良いでしょう。iOS9からアプリ間の遷移がスムーズになったわけですし。</li>
</ul>
</li>
</ul>


<p>と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth2.0認証をUIWebView&WKWebViewで実施しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/06/06/custom-oauth-webview/"/>
    <updated>2015-06-06T23:38:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/06/06/custom-oauth-webview</id>
    <content type="html"><![CDATA[<h4>最適なWebViewを使って、OAuth2.0認証をしよう！</h4>

<p>本日は、iOSのバージョン毎に最適なWebViewを使ってOAuth2.0認証を実施してみたいと思います。<br/>
やはり、iOS8であればWKWebViewを使いたいですし、iOS7ではUIWebViewしか利用できないという現実があります。</p>

<p>WKWebViewとUIWebViewの使い分け処理に関しては、<a href="http://techblog.yahoo.co.jp/ios/let-uiwebview-as-wkwebview/">let UIWebView as WKWebView</a>を参考にさせて頂きました。<br/>
(あえてObjective-Cで書いています。)</p>

<p>まずは、UIWebViewとWKWebViewの使い分け部分を説明していきます。</p>

<p>共通インターフェースとして<code>WKWebViewProtocol.h</code>を作成します。<br/>
共通化したい処理を書き出しています。</p>

<p>```objective-c
// WKWebViewProtocol.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;WebKit/WebKit.h></h1>

<p>@protocol WKWebViewProtocol <NSObject></p>

<p>@property (nonatomic, readonly, copy) NSString <em>title;
@property (nonatomic, readonly, copy) NSURL </em>URL;
@property (nonatomic, readonly, getter=isLoading) BOOL loading;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) BOOL canGoForward;</p>

<ul>
<li>(void)loadRequest:(NSURLRequest *)request;</li>
<li>(void)stopLoading;</li>
<li>(void)evaluateJavaScript:(NSString <em>)javaScriptString completionHandler:(void (^)(id, NSError </em>))completionHandler;</li>
<li>(void)goBack;</li>
<li>(void)goForward;</li>
</ul>


<p>@end</p>

<p>```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>次にUIWebViewを拡張した<code>UIWebView+ProtocolConfirmed</code>クラスを作成します。<br/>
基本的にWKWebViewに合わせる形で実装していきます。</p>

<p>```objective-c
// UIWebView+ProtocolConfirmed.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &ldquo;WKWebViewProtocol.h&rdquo;</h1>

<p>@interface UIWebView(UIWebView_ProtocolConfirmed) <WKWebViewProtocol></p>

<p>@end</p>

<p>```</p>

<p>```objective-c
// UIWebView+ProtocolConfirmed.m</p>

<h1>import &ldquo;UIWebView+ProtocolConfirmed.h&rdquo;</h1>

<p>@implementation UIWebView(UIWebView_ProtocolConfirmed)</p>

<p>// NSURLの取得
&ndash; (NSURL *)URL
{</p>

<pre><code>NSString *URLString = [self stringByEvaluatingJavaScriptFromString:@"document.URL"];
return [NSURL URLWithString:URLString];
</code></pre>

<p>}</p>

<p>// ページのタイトルの取得
&ndash; (NSString *)title
{</p>

<pre><code> return [self stringByEvaluatingJavaScriptFromString:@"document.title"];
</code></pre>

<p>}</p>

<p>// JavaScriptの実行処理
&ndash; (void)evaluateJavaScript:(NSString <em>)javaScriptString completionHandler:(void (^)(id, NSError </em>))completionHandler
{</p>

<pre><code>NSString *result = [self stringByEvaluatingJavaScriptFromString:javaScriptString];
if(completionHandler) {
    completionHandler(result, nil);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>最後にWKWebView側を実装します。<br/>
と言っても、UIWebViewをWKWebViewに合わせるので、何も書くことはありません。</p>

<p>```objective-c
// WKWebView+ProtocolConfirmed.h</p>

<h1>import &lt;WebKit/WebKit.h></h1>

<h1>import &ldquo;WKWebViewProtocol.h&rdquo;</h1>

<p>@interface WKWebView(WKWebView_ProtocolConfirmed) <WKWebViewProtocol></p>

<p>@end</p>

<p>```</p>

<p>```objective-c
// WKWebView+ProtocolConfirmed.m</p>

<h1>import &ldquo;WKWebView+ProtocolConfirmed.h&rdquo;</h1>

<p>@implementation WKWebView(WKWebView_ProtocolConfirmed)</p>

<p>@end</p>

<p>```</p>

<p>では、実際に実装していきましょう。<br/>
OAuth認証の処理に関しては、<a href="http://grandbig.github.io/blog/2015/06/01/custom-oauth/">OAuth2.0認証の処理を自作しよう！</a>を参考にしてください。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &ldquo;WKWebViewProtocol.h&rdquo;</h1>

<h1>import &ldquo;WKWebView+ProtocolConfirmed.h&rdquo;</h1>

<h1>import &ldquo;UIWebView+ProtocolConfirmed.h&rdquo;</h1>

<h1>import &ldquo;OAuth2Client.h&rdquo;</h1>

<p>static NSString <em>const clientId = @&ldquo;クライアントID&rdquo;;
static NSString </em>const clientSecret = @&ldquo;クライアントシークレット&rdquo;;
static NSString <em>const authorizationURL = @&ldquo;<a href="https://accounts.google.com/o/oauth2/auth">https://accounts.google.com/o/oauth2/auth</a>&rdquo;;
static NSString </em>const tokenURL = @&ldquo;<a href="https://accounts.google.com/o/oauth2/token">https://accounts.google.com/o/oauth2/token</a>&rdquo;;
static NSString *const scope = @&ldquo;<a href="https://www.googleapis.com/auth/plus.login+https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/calendar">https://www.googleapis.com/auth/plus.login+https://www.googleapis.com/auth/userinfo.email+https://www.googleapis.com/auth/calendar</a>&rdquo;;</p>

<p>// UIWebViewおよびWKWebView関連のDelegateを読み込む
@interface ViewController ()&lt;UIWebViewDelegate, WKUIDelegate, WKNavigationDelegate></p>

<p>// UIWebViewとWKWebViewを一纏めにしたWebViewとして下記を定義
@property(nonatomic, assign) id <WKWebViewProtocol> webView;
@property (strong, nonatomic) NSMutableData <em>receivedData;
@property (assign, nonatomic) BOOL </em>isLogin;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  // WebViewを画面に追加する処理
  [self createWebView];</p>

<p>  NSUserDefaults <em>defaults = [NSUserDefaults standardUserDefaults];
  if([defaults boolForKey:@&ldquo;isLogin&rdquo;]) {
      // 既にOAuth2.0認証実行済みの場合
      [[OAuth2Client sharedInstance] getRefreshAccessToken:^(NSString </em>accessToken) {
          // 成功した場合
          NSLog(@&ldquo;%@&rdquo;, accessToken);
      } failure:^(NSError <em>error) {
          // 失敗した場合
          NSLog(@&ldquo;%@&rdquo;, error);
      }];
  } else {
      // 初めてOAuth2.0認証を実行する場合
      // OAuth2.0認証に必要な各種パラメータの設定
      [[OAuth2Client sharedInstance] setUpOAuth2AccountClientId:clientId clientSecret:clientSecret scope:scope authorizationURL:authorizationURL tokenURL:tokenURL];
      // OAuth2.0認証リクエスト
      [[OAuth2Client sharedInstance] requestAccessToAccount:^(NSURL </em>preparedURL) {
          // リクエスト
          [_webView loadRequest:[NSURLRequest requestWithURL: preparedURL]];
      }
  }</p></li>
</ul>


<p>}</p>

<ul>
<li>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</li>
</ul>


<p>// WKWebViewまたはUIWebViewをViewに追加する処理
&ndash; (void)createWebView {</p>

<pre><code>if(NSClassFromString(@"WKWebView") != nil) {
    // iOS8の場合
    WKWebView *wkWebView = [[WKWebView alloc] initWithFrame:self.view.bounds];
    wkWebView.navigationDelegate = self;
    wkWebView.UIDelegate = self;
    [self.view addSubview:wkWebView];
    self.webView = wkWebView;
} else {
    // iOS7以下の場合
    UIWebView *uiWebView = [[UIWebView alloc] initWithFrame:self.view.bounds];
    uiWebView.delegate = self;
    [self.view addSubview:uiWebView];
    self.webView = uiWebView;
}
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; UIWebViewDelegate</h1>

<p>// ページの読込みが開始されたときに呼び出される処理
&ndash; (void)webViewDidStartLoad:(UIWebView *)webView {</p>

<pre><code>NSLog(@"webViewDidStartLoad");
</code></pre>

<p>}</p>

<p>// ページを読み終わった後に呼び出される処理
&ndash; (void)webViewDidFinishLoad:(UIWebView *)webView {</p>

<pre><code>NSLog(@"webViewDidFinishLoad");
</code></pre>

<p>}</p>

<p>// エラーが発生したときに呼び出される処理
&ndash; (void)webView:(UIWebView <em>)webView didFailLoadWithError:(NSError </em>)error {</p>

<pre><code>NSLog(@"didFailLoadWithError");
</code></pre>

<p>}</p>

<p>// ページ遷移する前に呼び出される処理
&ndash; (BOOL)webView:(UIWebView <em>)webView shouldStartLoadWithRequest:(NSURLRequest </em>)request navigationType:(UIWebViewNavigationType)navigationType {</p>

<pre><code>NSLog(@"shouldStartLoadWithRequest");

BOOL flag = [[OAuth2Client sharedInstance] checkRedirectURI:request];

if(flag) {
    [[OAuth2Client sharedInstance] getAccessToken:request completionHandler:^(NSString *accessToken){
        // 処理が終了したら呼び出される
        if(accessToken.length &gt; 0) {
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setBool:YES forKey:@"isLogin"];
            [defaults synchronize];
        }
        [webView removeFromSuperview];
    }];

    // ページ遷移しない
    return NO;
}

// ページ遷移する
return YES;
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; WKNavigationDelegate</h1>

<p>// ページの読込みが開始されたときに呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView didStartProvisionalNavigation:(WKNavigation </em>)navigation
{</p>

<pre><code>NSLog(@"didStartProvisionalNavigation");
</code></pre>

<p>}</p>

<p>// ページを読み終わった後に呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView didFinishNavigation:(WKNavigation </em>)navigation
{</p>

<pre><code>NSLog(@"didFinishNavigation");
</code></pre>

<p>}</p>

<p>// エラーが発生したときに呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView didFailProvisionalNavigation:(WKNavigation </em>)navigation withError:(NSError *)error
{</p>

<pre><code>NSLog(@"didFailProvisionalNavigation");
</code></pre>

<p>}</p>

<p>// ページ遷移する前に呼び出される処理
&ndash; (void)webView:(WKWebView <em>)webView decidePolicyForNavigationAction:(WKNavigationAction </em>)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler {</p>

<pre><code>NSLog(@"decidePolicyForNavigationAction");
NSURLRequest *request = navigationAction.request;

BOOL flag = [[OAuth2Client sharedInstance] checkRedirectURI:request];

if(flag) {
    [[OAuth2Client sharedInstance] getAccessToken:request completionHandler:^(NSString *accessToken){
        // 処理が終了したら呼び出される
        if(accessToken.length &gt; 0) {
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setBool:YES forKey:@"isLogin"];
            [defaults synchronize];
        }
        [webView removeFromSuperview];
    }];

    // ページ遷移しない
    decisionHandler(WKNavigationActionPolicyCancel);
}

// ページ遷移する
decisionHandler(WKNavigationActionPolicyAllow);
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>さあ、これでiOS8端末でもiOS7端末でも正しくOAuth認証画面が表示されるかと思います。<br/>
もう今年にはiOS9が発表され、WKWebViewが当然のようになってくるとしたら、UIWebViewは不要になると思いますが、今のところはまだまだ必要でしょう。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CROSSWALKの性能を確かめよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/04/12/crosswalk-test/"/>
    <updated>2015-04-12T16:50:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/04/12/crosswalk-test</id>
    <content type="html"><![CDATA[<h4>CROSSWALKは果たして優秀なのか！？</h4>

<p>以前、CROSSWALKについて紹介させて頂きました。<br/>
メリット/デメリットはいろいろなサイトで紹介されていますが、実際に性能はどうなのか気になりますよね？<br/>
そこで今回は幾つかの端末を用いて試験をしてみました。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h5>Sunspiderでベンチマーク</h5>

<p>試験に利用した端末は下記3つです。</p>

<ul>
<li>Android4.4.2 / AQOUS 305SH</li>
<li>Android4.2.2 / AQOUS 303SH</li>
</ul>


<p>これら端末で下記4つのWebの性能を確かめました。</p>

<ul>
<li>CROSSWALK</li>
<li>標準のWebView</li>
<li>標準のブラウザ</li>
<li>Chrome</li>
</ul>


<p>早速ですが、結果を載せます。</p>

<p><img src="/images/crosswalk_sunspider_305sh.png" alt="Android4.4.2, AQOUS 305SH, Sunspider結果" /><br/>
<img src="/images/crosswalk_sunspider_303sh.png" alt="Android4.2.2, AQOUS 303SH, Sunspider結果" /></p>

<p>結果を見ると、処理速度だけで言えば、必ずしもCROSSWALKが優秀とは言えないことがわかります。<br/>
しかし、CROSSWALKの良さは処理速度に限ったことではありません。<br/>
何と言っても最新のChromiumと同じHTML, CSSの対応度合いが肝です。<br/>
では続けて、HTMLとCSSに関して試験してみましょう。</p>

<h5>HTML5のテスト</h5>

<p>まずは、HTML5の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="https://html5test.com/">HTML5test</a>です。<br/>
HTML5testは550点満点なので、数値が550に近いほど優秀と言えます。</p>

<p><img src="/images/crosswalk_html5test_305sh.png" alt="Android4.4.2, AQOUS 305SH, HTML5Test結果" /><br/>
<img src="/images/crosswalk_html5test_303sh.png" alt="Android4.2.2, AQOUS 303SH, HTML5Test結果" /></p>

<p>これはさすがの結果と言えるでしょう。<br/>
Chromeの方が高かったりしますが、標準のWebViewや標準のブラウザに比べれば遥かに優秀であると言えます。</p>

<h5>CSS3のテスト</h5>

<p>次に、CSS3の対応度合いを見て行きましょう。<br/>
計測に使うのはもちろん<a href="http://css3test.com/">The CSS3 Test</a>です。<br/>
The CSS3 Testは100%満点の%で表現されます。</p>

<p><img src="/images/crosswalk_css3test_305sh.png" alt="Android4.4.2 AQOUS 305SH, CSS3Test結果" /><br/>
<img src="/images/crosswalk_css3test_303sh.png" alt="Android4.2.2 AQOUS 303SH, CSS3Test結果" /></p>

<p>こちらもCROSSWALKがメリットとなる結果と言えるでしょう。<br/>
Chromeと同じ対応度合いであったので、全く問題がないと言えると思います。</p>

<h5>まとめ</h5>

<p>以上の結果を見ると、処理速度が気になるものの、WebSocketやWebGL, WebRTCなどに対応した上で、ターゲットにAndroid4.0〜4.3を含めたいのであれば、CROSSWALKは入れるべきと言えるでしょう。<br/>
Android5.0以上がほとんどを占める世の中になったとしたら、何も考えずに標準のWebViewを使えば良いのかもしれないですが、まだまだ先の話でしょう。<br/>
と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioでCROSSWALKを使おう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/03/28/crosswalk/"/>
    <updated>2015-03-28T13:57:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/03/28/crosswalk</id>
    <content type="html"><![CDATA[<h4>Androidでハイブリッドアプリを作ろう</h4>

<p>以前、iOSではiOS8からWKWebViewという新しいWebViewが追加されたことを説明しました。<br/>
では、Androidはどうなのでしょうか？</p>

<p>Androidは4.3までWebKitベースのWebViewをアプリに組み込んでいました。<br/>
しかし、Android4.4より、ChromiumベースのWebViewとなりました。ここで、大きく異なるのはレンダリングエンジンが <strong>Blink</strong> になったというところです。<br/>
また、Android4.4まではChromiumがバージョンアップされたとしても、各メーカーがAndroidのOSバージョンアップを提供しなければ、最新のWebViewを利用することができませんでした。</p>

<p>この現状を見たのかGoogleはAndroid5.0以降、WebViewをOSから切り離し、Google Play経由でバージョンアップ可能としました。<br/>
よって、メーカーがOSのバージョンアップをする/しないに関わらず、Google側の意志で最新のWebViewをユーザに提供可能となったのです。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>近年はAndroid2.xを使っているユーザもだいぶ減少してきました。<br/>
が、未だ、Android4.0〜4.3の端末を利用しているユーザは相当数、存在しています。<br/>
では、4.x〜5.0.xまでの端末全てに対応するハイブリットアプリを作成するためには、各バージョンに気をつけつつ、開発するしかないのでしょうか？</p>

<p>本記事では、 <strong>CROSSWALK</strong> に注目し、上記の問題に対応することとしました。</p>

<h4>CROSSWALKを組み込もう</h4>

<p>まずは、CROSSWALKのレポジトリを追加できるようにしましょう。</p>

<p>```java
// build.gradle(Module: app)
apply plugin: &lsquo;com.android.application&rsquo;</p>

<p>android {</p>

<pre><code>....
</code></pre>

<p>}</p>

<p>// ここを追加
repositories {</p>

<pre><code>maven {
    url 'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:21.0.3'
compile 'org.xwalk:xwalk_core_library:10.39.235.15'     // ここも追加
</code></pre>

<p>}</p>

<p>```</p>

<p>次に、CROSSWALKのWebViewである <strong>XWalkView</strong> を画面に組み込みましょう。</p>

<p>```xml
// activity_main.xml
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
android:layout_height="match_parent" android:paddingLeft="0dp"
android:paddingRight="0dp"
android:paddingTop="0dp"
android:paddingBottom="0dp" tools:context=".MainActivity"&gt;

&lt;!-- XWalkViewを追加 --&gt;
&lt;org.xwalk.core.XWalkView
    android:id="@+id/xwalkWebView"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:background="#000000"
    /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>続いて、AndroidManifest.xmlにWebViewを使うための設定を書きましょう。</p>

<p>```xml
// AndroidManifest.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>package="com.example.takahiro.crosswalksample" &gt;

&lt;!-- 追加 --&gt;
&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;

....
</code></pre>

<p></manifest>
```</p>

<p>そして、メイン画面にWebViewの設定を書き込みましょう。</p>

<p>```java
// MainActivity.java</p>

<p>package com.example.takahiro.crosswalksample;</p>

<p>import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import org.xwalk.core.XWalkView;</p>

<p>public class MainActivity extends ActionBarActivity {</p>

<pre><code>private XWalkView mXWalkView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mXWalkView = (XWalkView) findViewById(R.id.activity_main);
    mXWalkView.load("https://www.google.co.jp", null);
}

@Override
protected void onPause() {
    super.onPause();
    if (mXWalkWebView != null) {
        mXWalkWebView.pauseTimers();
        mXWalkWebView.onHide();
    }
}

@Override
protected void onResume() {
    super.onResume();
    if (mXWalkWebView != null) {
        mXWalkWebView.resumeTimers();
        mXWalkWebView.onShow();
    }
}

@Override
protected void onDestroy() {
    super.onDestroy();
    if (mXWalkWebView != null) {
        mXWalkWebView.onDestroy();
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>これでAndroid4.x 〜 5.xで同じChromiumベースのWebViewを利用することができるはずです。<br/>
といったところで本日はここまで。</p>

<p>参考:</p>

<ul>
<li><a href="https://diego.org/2015/01/07/embedding-crosswalk-in-android-studio/">Embedding Crosswalk in Android Studio</a></li>
<li><a href="https://crosswalk-project.org/documentation/embedding_crosswalk.html">Embedding the Crosswalk Project</a></li>
<li><a href="https://crosswalk-project.org/apis/embeddingapidocs_v3/org/xwalk/core/XWalkView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String">XWalkView Reference</a></li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
