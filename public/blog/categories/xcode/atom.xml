<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcodeが正常かチェックしましょう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/23/check-xcode/"/>
    <updated>2015-09-23T13:35:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/23/check-xcode</id>
    <content type="html"><![CDATA[<h4>今、話題のXcodeGhostってなに！？</h4>

<p>中国で出回っている改ざんされたXcodeのことだそうです。<br/>
App Storeから一般公開向けのXcodeをダウンロードしたり、Apple DeveloperサイトからDeveloper向けの最新版をダウンロードするのであれば、特に何の問題もないでしょう。<br/>
『いや、実はどこどこから&hellip;』なんて方がいたら、早速チェックしてみましょう。</p>

<p>ユーザとして気をつけるのは、怪しいアプリはもちろんのこと、話題として上っているアプリはきちんと対応が完了しているのか確認してみるくらいでしょうか。<br/>
Appleも感染アプリの削除に全力で取り組んでいるでしょうし、様子を見るしかなさそうですね。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Xcodeの正常チェックの方法</h4>

<p>さて、本日、Appleから以下の内容のメールが飛んできました。</p>

<p>We recently removed apps from the App Store that were built with a counterfeit version of Xcode which had the potential to cause harm to customers. You should always download Xcode directly from the Mac App Store, or from the Apple Developer website, and leave Gatekeeper enabled on all your systems to protect against tampered software.</p>

<p>When you download Xcode from the Mac App Store, OS X automatically checks the code signature for Xcode and validates that it is code signed by Apple. When you download Xcode from the Apple Developer website, the code signature is also automatically checked and validated by default as long as you have not disabled Gatekeeper.</p>

<p>Whether you downloaded Xcode from Apple or received Xcode from another source, such as a USB or Thunderbolt disk, or over a local network, you can easily verify the integrity of your copy of Xcode. Learn more.</p>

<p>で、最後の <strong>Learn more</strong> をクリックすることで専用サイトで方法を教えてくれます。</p>

<p>コマンドは下記です。<br/>
<code>spctl --assess --verbose /Applications/Xcode.app</code></p>

<p>実行してから完了までに数分かかりますが、問題なければ、</p>

<p><code>
/Applications/Xcode.app: accepted
source=Mac App Store
</code></p>

<p>もしくは、</p>

<p><code>
/Applications/Xcode.app: accepted
source=Apple
</code></p>

<p>あるいは、</p>

<p><code>
/Applications/Xcode.app: accepted
source=Apple System
</code></p>

<p>といった結果が得られるはずです。<br/>
App Storeからダウンロードしたか、AppleのDeveloperサイトからダウンロードしたかで異なります。</p>

<p>因みに、通常、正規のルートでダウンロードしてきた場合は、自動的にGatekeeperがチェックしているそうです。<br/>
意図的にGatekeeperをdisableにしていない限り。</p>

<p>Gatekeeperは『システム環境設定 > セキュリティとプライバシー > 一般 > ダウンロードしたアプリケーションの実行許可』から変更できるそうです。<br/>
それがGatekeeperとか意識したことなかったですけど&hellip;。<br/>
(ここで、すべてのアプリケーションを許可しているとGatekeeperがOFFだとか&hellip;。)</p>

<p>筆者は念のため、調べて問題ないことを確認しましたが、気になる方は試してみてはいかがでしょうか。<br/>
と言ったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6で様々な画面サイズに対応しよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/10/07/xcode6-preview/"/>
    <updated>2014-10-07T23:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/10/07/xcode6-preview</id>
    <content type="html"><![CDATA[<h3>Xcode6でAuto Layoutを使おう！</h3>

<p>昨今はiPhone5, iPhone6, iPhone6 PlusなどiOSアプリでも様々な画面サイズに対応する必要性が出てきました。<br/>
これまでは2画面の対応だけを考えていれば良かったのに、大きな変化ですよね？<br/>
では、この対応をどうすれば良いのかというと、『Auto Layoutを使いましょう』ってことです。</p>

<p>では早速説明していきましょう。<br/>
StoryBoard上で右下にある<strong>Auto Layout</strong>ボタンをクリックします。<br/>
<img src="/images/xcode6_autolayout1.png" alt="Auto Layout" /></p>

<!--more-->


<p>ここはXcode5と同じようなんですが、Xcode5と何やら様子が異なることに気づきます。<br/>
それは、<strong>左右のConstraintが0</strong>にも関わらず、StoryBoard上では<strong>左右に間隔があいています</strong>。<br/>
Xcode6で慣れれば良い話なのかもしれませんが、気になるのであれば、下記の箇所から変更できます。</p>

<p><img src="/images/xcode6_autolayout2.png" alt="Constraint Margin" /></p>

<p>左右のConstraintsを選択した状態で、上図の箇所を確認してみましょう。<br/>
Second Itemに<strong>Relative to margin</strong>が紐付けられています。このチェックを外しましょう！
すると、marginがなくなるので、Constraintが0だと下図のようになります。<br/>
<img src="/images/xcode6_autolayout3.png" alt="marginなし" /></p>

<p>ここで<strong>Constraintを10</strong>にするなど、あけたい間隔を設定しましょう。</p>

<p>さて、ここでポイントなのが、TextFieldにはWidthの設定をつけていないことです。<br/>
これにより、左右のConstraintが適用されるので各画面に対応できます。</p>

<p>本当に対応できているのか、シミュレータや実機で確認する前にプレビューを見てみましょう。<br/>
確認方法としては、<br/>
1: Xcode6右上の<strong>Show the Assistant editor</strong>をクリック<br/>
2: Manual, Automatic, Top Level Objects, Localization, Previewとあるので、<strong>Preview</strong>をクリック</p>

<p><img src="/images/xcode6_autolayout4.png" alt="Previewの確認方法" /></p>

<p>すると、4インチサイズのPreviewがデフォルトで表示されます。<br/>
<img src="/images/xcode6_autolayout5.png" alt="デフォルトのPreview画面" /></p>

<p>4.7インチや5.5インチなどを追加する場合は、Previewの左下にある<strong>+ボタン</strong>をクリックして、追加したいディスプレイサイズを選択します。<br/>
これにより、下図のように複数のディスプレイサイズでレイアウトを確認することができます。</p>

<p><img src="/images/xcode6_autolayout6.png" alt="複数画面" /></p>

<p>いかがでしたでしょうか？<br/>
これからはiPhone6, iPhone6 Plusにも最適化したアプリを開発する必要がありますし、たいへんですが、頑張って行きたいですね！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode6でSingle View Applicationにチャレンジ]]></title>
    <link href="http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard/"/>
    <updated>2014-09-20T23:18:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/09/20/xcode6-storyboard</id>
    <content type="html"><![CDATA[<h3>Xcode6でプロジェクトを作成しよう</h3>

<p>さて、先日、一般ユーザ向けにXcode6のバージョンアップが解放されました。<br/>
それに合わせて、今回はXcode6の基本的な使い方を確認していきたいと思います。</p>

<p>それでは早速、Xcode6を起動してみましょう。<br/>
<img src="/images/xcode6_1.png" alt="Xcode6起動後の初期ウィンドウ" /></p>

<!--more-->


<p>さて、 <strong>Get started with a playground</strong> が先頭に来ている以外はあまり気になりませんね。<br/>
SwiftやPlaygroundの話は別の機会にということで、 <strong>Create a new Xcode project</strong> を選択してみましょう。</p>

<p>すると、次のようなウィンドウが表示されます。<br/>
<img src="/images/xcode6_2.png" alt="Xcode6でCreate a new Xcode projectを選択後に表示されるウィンドウ" /></p>

<p>筆者はここで、『あれ！？いつも使っていた <strong>Empty Application</strong> がない&hellip;.』と気づきました。<br/>
まさかと思い、あれやこれやと探し、『OtherにEmptyってのがある。これって前からあったっけ？』と思いつつEmptyでプロジェクトを作成してみると&hellip;.<br/>
<img src="/images/xcode6_3.png" alt="OtherにEmpty..." /><br/>
<img src="/images/xcode6_4.png" alt="超Empty...何もないよ..." /><br/>
TARGETもなければ、ソースも何もない。超Empty&hellip;..(泣)</p>

<p>この瞬間、時代は次に進んでいるのだと諦めて、筆者はこれまで使ってこなかったSingle View Applicationに手を伸ばすことにしました。<br/>
最大の障壁となるのが、今更ながら <strong>Storyboardを使ったことがない</strong> ということでした。<br/>
これを機に覚えよう＆Xcode6でも基本操作は変わっていないよ(たぶん)と証明するために先に進み始めました。</p>

<p>下記の手順でプロジェクトを作成します。<br/>
1. Single View Applicationを選択<br/>
2. ProductNameにStoryboardExampleと入力<br/>
3. DevicesはiPhoneを選択</p>

<p>そうして作成されたプロジェクトが下記になります。<br/>
<img src="/images/xcode6_5.png" alt="StoryboardExample" /></p>

<p>Main.storyboardを見てみると、『何の画面サイズ？？』といったViewControllerが表示されています。<br/>
今回はiPhoneのみに対応したアプリということで、サイズを変更したいと思います。<br/>
サイズは下記の手順で変更ができます。</p>

<ol>
<li>左ウィンドウでView Controllerを選択</li>
<li>右ウィンドウのメニューの右から3つ目の項目を選択</li>
<li>Simulated MetricksのSizeから変更したいiPhoneのサイズを選択</li>
</ol>


<p><img src="/images/xcode6_6.png" alt="サイズ変更方法" /></p>

<p>筆者の場合はせっかくなので、iPhone6のサイズである <strong>iPhone 4.7-inch</strong> に変更しました。<br/>
<img src="/images/xcode6_7.png" alt="4.7inchのViewController" /></p>

<h3>StoryboardでUINavigationControllerを使おう</h3>

<p>筆者がよく使っていたUINavigationControllerを使ってみようと思います。先ほどのView ControllerにはNavigationBarらしきものが見当たりません。これはUINavigationControllerが付与されていないためです。では、UINavigationControllerを付与しましょう。</p>

<p>XcodeメニューバーのEditor > Embed in > Navigation Controllerを選択してください。<br/>
<img src="/images/xcode6_8.png" alt="Navigation Controllerを追加する" /></p>

<p>すると、下記のようにNavigation Controllerが追加されます。(下図は見やすさのため表示倍率を変更しています。表示倍率はViewが配置されているウィンドウで右クリックするとサイズを選択可能なウィンドウが表示されます。)<br/>
<img src="/images/xcode6_9.png" alt="Navigation Controllerを追加した" /><br/>
また、初めからStoryboard上に表示されていたView ControllerにNavigationBarが表示されたことがわかります。<br/>
Navigation Controllerの大きさも先ほどと同じ手順で変えてしまいましょう。(変えなくてもコーディング上は問題ありませんが&hellip;.)</p>

<p>NavigationBarの良い所は画面遷移後に前の画面に戻るボタンを作らなくて良いということですね。</p>

<p>続いて、Storyboard上での画面遷移の実装方法について見て行きましょう。<br/>
画面遷移をするためには当然ながら画面が必要となるので、View Controllerを追加しましょう。また、画面遷移のアクションを起こすボタンを追加しましょう。<br/>
<img src="/images/xcode6_10.png" alt="View Controllerとボタンを追加" /></p>

<p>そして、画面遷移の実装は、<br/>
1. NEXTボタンを右クリックして遷移後の画面にドラッグ＆ドロップ<br/>
2. 表示されるウィンドウから <strong>show</strong> を選択<br/>
と超簡単にできます。<br/>
その証拠に遷移後の画面にも先ほどまでなかったNavigationBarが付与されています。</p>

<p><img src="/images/xcode6_11.png" alt="NEXTボタンからドラッグ＆ドロップ" /><br/>
<img src="/images/xcode6_12.png" alt="showを選択" /><br/>
<img src="/images/xcode6_13.png" alt="画面遷移が実装完了" /></p>

<p>さて、ここまで対応が完了したら、シミュレータで表示してみましょう。<br/>
利用するシミュレータはもちろんiPhone6です。<br/>
<img src="/images/xcode6_14.png" alt="シミュレータで表示" /></p>

<p>上記のような表示ができましたでしょうか？<br/>
Storyboardの使い方は案外簡単ですね！まだまだ触り程度の話ですが、これから使い込んでいこうかと思います。</p>

<p>今日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5でDebug gaugesを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2014/03/16/xcode5debug/"/>
    <updated>2014-03-16T21:56:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/03/16/xcode5debug</id>
    <content type="html"><![CDATA[<h3>Xcode5のデバッグ機能を使ってCPUとスレッドを調べよう</h3>

<p>最近、アプリを開発する上で、その操作が<strong>どのくらいCPUを消費するのか</strong>, <strong>マルチスレッドを有効に使えているのか</strong>を厳しく見る必要が出てきました。それまでCPUやスレッドもそこまで気にしたことはなかったのですが、Xcode5からはInstrumentを起動しなくとも、簡易的に確認できるということで試しにやってみました。</p>

<!--more-->


<h4>Xcode5でDebug gaugesを使ってみる</h4>

<p>まずは、本当に簡単な何もしない画面を作成して、様子を見てみました。<br/>
<img src="/images/xcode_debug1.png" alt="何もしない画面の様子" /></p>

<p>4つスレッドがあります。そして、画面の描画に使われているであろうスレッドがThread1であることがわかると思います。他は全く使ってないですね。<br/>
また、本試験ではiPhone5(iOS7.1)を利用しているため、マルチコアなので、CPUのメータが最大200%であることが示されています。<br/>
しばらく見ていると、4つあったスレッドが2つに減ります。<br/>
<img src="/images/xcode_debug2.png" alt="スレッドが2つになる" /></p>

<p>続いて、for分で10000回ループしてひたすらログを出力するボタンを作成して、様子を見てみました。<br/>
<img src="/images/xcode_debug3.png" alt="for分で10000回ループ" /></p>

<p>さて、スレッドを別に作成して実行してみましょう。<br/>
```objective-c
dispatch_queue_t gQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</p>

<p>dispatch_async(gQueue, ^(void) {</p>

<pre><code>for(NSInteger j=0; j &lt; 10000; j++) {
    NSLog(@"%d回目のループ", j);
}
</code></pre>

<p>});
```</p>

<p>その結果が下図。<br/>
<img src="/images/xcode_debug4.png" alt="別スレッドで実行" /><br/>
これを見るとメインスレッドとは別のスレッドで実行されていることがわかります。基本的に描画はメインスレッドでしか実行がされないので、その他の処理はメインスレッドとは別スレッドで行うのが良さそうですね。</p>

<p>実際にやってみましょう。<br/>
```objective-c
dispatch_queue_t gQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</p>

<p>dispatch_async(gQueue, ^(void) {</p>

<pre><code>for(NSInteger j=0; j &lt; 10000; j++) {
    NSLog(@"%d回目のループ", j);
    dispatch_async(dispatch_get_main_queue(), ^(void) {
        NSLog(@"メインのループ");
    });
}
</code></pre>

<p>});
```
<img src="/images/xcode_debug5.png" alt="マルチスレッドでの実行" /><br/>
メインスレッドと別スレッドで各10000回ログを出力する処理を実行しているため、同じ時間帯にリソースを使っていることがわかりますね。</p>

<h3>マップを描画してDebug gaugesを見てみる</h3>

<p>アプリを開発するときにマップを利用すると様々な操作でメインスレッドを利用していることがわかります。まずはマップを起動してみましょう。<br/>
<img src="/images/xcode_debug6.png" alt="マップを起動してみる" /><br/>
起動直後から大量のスレッドが作成されていることがわかります。描画はメインスレッドでやるものの、様々な計算は別スレッドでやっているということなんでしょうか&hellip;。<br/>
起動してからしばらく放置しておくとスレッドがどんどん減っていきます。<br/>
しかし、マップを拡大・縮小するとスレッドが大量に作成されます。また、CPUも激しく消費することがわかります。(余裕で140〜150%まで上がったりしますね&hellip;)</p>

<p>これらはユーザの操作によって引き起こされる現象なので、極端な話、触らなければCPUの消費はされません。<br/>
では、下記のようにしてみたらどうなるでしょうか？<br/>
```objective-c
&ndash; (void)mapViewDidFinishLoadingMap:(MKMapView *)mapView
{</p>

<pre><code>[self.map setUserTrackingMode:MKUserTrackingModeFollowWithHeading animated:YES];
</code></pre>

<p>}
```
<img src="/images/xcode_debug7.png" alt="ユーザの方向にマップが回転する" /><br/>
ユーザの動きを検知して自動で回転するので、CPUを使い続けます。</p>

<h3>まとめ</h3>

<p>アプリを開発する上で、端末のリソースをどのようにうまく使っていくのかは非常に重要です。マップを使うアプリを作成するときは特に注意が必要ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode5でAuto Layoutを使おう]]></title>
    <link href="http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout/"/>
    <updated>2014-02-09T17:25:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/02/09/xcode5-autolayout</id>
    <content type="html"><![CDATA[<h3>Auto Layoutで『iOS6・iOS7』と『3.5-inch・4-inch』対応</h3>

<p>さて、これまで<strong>iOS6/7 deltas</strong>を利用した方法や<strong>全てコードで書く</strong>方法について説明してきました。これとは別に本日は<strong>Auto Layout</strong>を利用した方法について説明します。<br/>
先にこれらの方法の違いについて紹介します。<br/>
・iOS6/7 deltasを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS5以前から対応する場合<br/>
・全てコードで書く方法<br/>
  XIBやStoryboardなどのGUIを利用せずに、全OS・全ディスプレイに対応する場合<br/>
・Auto Layoutを利用する方法<br/>
  XIBやStoryboardを利用した上でiOS6以降から対応する場合</p>

<p>求められている仕様や開発者の技量、プロジェクトの運用から最適な方法を選択する必要があります。<br/>
とは言え、個人的には<strong>全てコードで書く</strong>方法が最も自由がきくと思っているので、これに慣れていると他の手法は案外シンドイです。</p>

<!--more-->


<h4>Auto LayoutでUINavigationBarを調整しよう</h4>

<p>以前、iOS6/7 deltasを利用する方法で説明したことをAuto Layoutで説明します。皆様、ご存知の通りiOS6以前とiOS7以降とではステータスバーの20px分をナビゲーションバーの高さを考慮しなくてはなりません。<br/>
<img src="/images/ios6_7_difference.png" alt="iOS6とiOS7でナビゲーションバーの高さが異なる" /></p>

<p>早速、詳しく説明していきます。<br/>
まず、プロジェクトを作成し終わったら、XIBファイルを表示してください。そしてUINavigationBarを設置します。このUINavigationBarの高さをiOSのバージョンごとに変化させたいので、下記手順でAuto LayoutのConstraintを追加します。<br/>
1: 右下のバーの左から2番目をクリックしてConstraintsのウィンドウを表示<br/>
2: 高さを変更したいのでHeightにチェックを入れる<br/>
3: Add ConstraintボタンをクリックしてConstraintを追加する<br/>
<img src="/images/autolayout1.png" alt="Constraintを追加する" /></p>

<p>これでConstraintsが追加されたのでViewController.hと関連づける。<br/>
1: Constraints > Heightを右クリックしてViewController.hへドラッグ&amp;ドロップ<br/>
2: ウィンドウが表示されるので、名前をつけてConnectをクリックする<br/>
<img src="/images/autolayout2.png" alt="ViewController.hに関連づける" /><br/>
<img src="/images/autolayout3.png" alt="名前をつけてConnect" /></p>

<p>次にViewController.mファイルを開きましょう。<br/>
以下のように編集してください。<br/>
```
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// iOS7の場合は64pxにする
if (floor(NSFoundationVersionNumber) &gt; NSFoundationVersionNumber_iOS_6_1) {
    self.nvBarHeight.constant = 64;
}
</code></pre>

<p>}
```
以上の手順をすることで下記のようにiOS6とiOS7でUINavigationBarを正しく表示することができます。<br/>
<img src="/images/autolayout4.png" alt="UINavigationBarの表示" /></p>

<h4>Auto LayoutでUIViewを中央に配置しよう</h4>

<p>次に主にディスプレイサイズで困るであろう中央配置の方法について説明します。<br/>
まずは、何も考えずに普通にUIViewを追加してみましょう。そしてViewを3.5-inch Full Screenと4-inch Full Screenとで表示を変更して見てみましょう。すると、下記のようにUIViewの高さが変わってしまうことがわかると思います。<br/>
<img src="/images/autolayout5.png" alt="4-inchの場合" /><br/>
<img src="/images/autolayout6.png" alt="3.5-inchの場合" /><br/>
こんなはずでは&hellip;なんて絶句してしまうかもしれません。が、ご安心ください。これは先ほど説明したHeightのConstraintsを追加することで対応できます。先ほどと同様に下記の手順でHeightのConstraintを追加してみてください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 高さを保持したいのでHeightにチェックを入れます。高さが希望の値になっていることを確認してください。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する</p>

<p>これで先ほどと同様にViewのinchを変更させてみてください。追加したUIViewの高さが保持されていることがわかると思います。</p>

<p>はい。本題です。<br/>
UIViewをディスプレイのCenterに表示させたい場合は下記手順を実行してください。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から1番目をクリックしてConstraintのウィンドウを表示<br/>
2: Vertical方向に常にディスプレイの中央に表示させたいので、Vertical Center in Containerにチェックを入れます。<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="/images/autolayout7.png" alt="Vertical Center in Containerを追加" /></p>

<p>これでUIViewを高さを保持した状態で3.5-inch/4-inchでもディスプレイの中央に表示することができます。</p>

<h4>Auto Layoutでマージンを調整しよう</h4>

<p>そして、Auto Layoutを用いたマージンの調整方法についても説明しましょう。<br/>
先ほど、ディスプレイの中央に表示したい場合を説明したと思いますが、3.5-inchで見るとUINavigationBarに近すぎると感じることがあるかもしれません。<br/>
であるならば、3.5-inchでも4-inchでもUINavigationBarから一定の距離を保持した方が見栄えが良いと思うこともあると思います。<br/>
さて、その方法について説明します。</p>

<p>1: 追加したUIViewを選択した状態で右下のバーの左から2番目をクリックしてConstraintのウィンドウを表示<br/>
2: 上部との距離を変更します。(初期状態は点線表記になっていますが、赤の実線になるように値を変更してください)<br/>
3: Add ConstraintボタンをクリックしてConstraintsを追加する<br/>
<img src="/images/autolayout8.png" alt="上部マージンを追加" /></p>

<p>これで3.5-inch/4-inchにディスプレイが変更されたとしてもUINavigationBarとUIViewとの距離は一定に保たれます。</p>

<h4>最後に</h4>

<p>いかがだったでしょうか？<br/>
筆者的には完全に手探りな状態で始めたので、わからないことだらけだったのですが、なんとなく理解できてきました。<br/>
現在はiPhone4S以前を利用しているユーザは(日本では？)少なくなってきたと思うのですが、iPadがiPhoneの3.5-inchと同じ比率ですので、Universalアプリを開発するのであれば対応せざるを得ません。<br/>
また、iOS6ユーザはまだまだいると思いますので、仕様として要求される可能性は十分あります。細かい修正が常に要求されるとは思いますが、忍耐強くiOS8, 9, 10&hellip;とリリースされるのを待ちましょう笑<br/>
次回リリースされるiPhoneやiPadまたはリリースされるかもしれない新デバイスがどんなディスプレイの比率になるかもわからないので、今後こういった対応は常に要求されるんでしょうね(汗)</p>

<p>ということでまた次回！<br/>
筆者も継続して勉強します。</p>
]]></content>
  </entry>
  
</feed>
