<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IoT | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/iot/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[REBL600FRの発信パラメータをiOSアプリで変更してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/11/bl600sample3/"/>
    <updated>2015-02-11T14:23:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/11/bl600sample3</id>
    <content type="html"><![CDATA[<h4>REBL600FRのパラメータ値を変更</h4>

<p><a href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/">前回</a>はREBL600FRの検知＆パラメータ値の読込みまでやってみました。<br/>
今日はREBL600FRが発信するパラメータ値をiOSアプリから変更してみます。</p>

<p>まず、UIButtonをタップしたときにmajorの値を固定値に変更するメソッドを作成してみます。</p>

<p>```objective-c
// ViewController.m
// 書き込みテスト用のメソッド
&ndash; (IBAction)writeDataTestMethod:(id)sender {</p>

<pre><code>// ① majorの値を4661に設定
NSInteger writeInt = 4661;
// ② 10進数を16進数に変換して文字列にする
NSString *witeString = [NSString stringWithFormat:@"%lX",(long)writeInt];
// ③ 16進数のNSString型をNSData型に変換する処理
NSData *writeData = [witeString dataFromHexString];
NSLog(@"writeData: %@", writeData);

// ④ データの書込み処理
[self.connectedPeripheral writeValue:writeData forCharacteristic:self.majorChar type:CBCharacteristicWriteWithResponse];
</code></pre>

<p>}
```</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>上記メソッドの説明をします。<br/>
まず、majorの値を4661に変更したいとします。</p>

<p>【処理の順番】<br/>
① ユーザが入力する際には当然、10進数の値で考えると思うので、初めの入力値は <strong>10進数</strong> の4661とします。<br/>
② 次にREBL600FRが理解できるように16進数に変換する必要があります。<br/>
『NSInteger型かつ10進数』で表された4661を『NSString型かつ16進数』の値に変換します。<br/>
③ 書換えたい値をREBL600FRに送るためにNSData型に変換します。<br/>
④ 書込みたいデータが用意できたので、書込み処理を実行します。<br/>
<code>self.majorChar</code>には予め、major値のキャラクタリスティックを保持しています。</p>

<p>さて、③と④の処理について説明が不十分なので、説明します。<br/>
③ですが、NSString型のクラスを拡張し、 <strong>16進数のNSString型をNSData型に変換する</strong> メソッドを追加します。</p>

<p>```objective-c
// NSString+Conversion.h</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface NSString (NSString_Conversion)</p>

<h1>pragma mark &ndash; Data Conversion</h1>

<ul>
<li>(NSData *)dataFromHexString;</li>
</ul>


<p>@end
```</p>

<p>```objective-c
// NSString+Conversion.m</p>

<h1>import &ldquo;NSString+Conversion.h&rdquo;</h1>

<p>@implementation NSString (NSString_Conversion)</p>

<h1>pragma mark &ndash; Data Conversion</h1>

<ul>
<li><p>(NSData <em>)dataFromHexString {
  const char </em>chars = [self UTF8String];
  NSUInteger i = 0, len = self.length;</p>

<p>  NSMutableData *data = [NSMutableData dataWithCapacity:len / 2];
  char byteChars[3] = {&lsquo;\0&rsquo;,&lsquo;\0&rsquo;,&lsquo;\0&rsquo;};
  unsigned long wholeByte;</p>

<p>  while (i &lt; len) {
      byteChars[0] = chars[i++];
      byteChars[1] = chars[i++];
      wholeByte = strtoul(byteChars, NULL, 16);
      [data appendBytes:&amp;wholeByte length:1];
  }</p>

<p>  return data;
}</p></li>
</ul>


<p>@end
```</p>

<p>続いて、④について説明します。<br/>
<code>self.majorChar</code>にmajor値のキャラクタリステックを保持するために、<a href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/">前回</a>の記事で説明した処理を少し書換えます。</p>

<p>```objective-c
// ViewController.m
// Characteristicesが見つかったときに呼び出される処理
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didDiscoverCharacteristicsForService:(CBService </em>)service error:(NSError *)error {</p>

<pre><code>for(CBCharacteristic *characteristic in service.characteristics) {
    // キャラクタリステックのUUID値を取得
    CBUUID *uuid = characteristic.UUID;
    NSString *uuidString = [NSString alloc] initWithFormat:@"%@", uuid];]

    if([uuidString isEqual:@"569A2013-B87F-490C-92CB-11BA5EA5167C"]) {
        // major値の場合はCharacteristicをメモリに保持
        self.majorChar = characteristic;
    }

    // 値が変わったときに通知を受けたい場合に実行
    [peripheral setNotifyValue:YES forCharacteristic:characteristic];
    // キャラクタリステックのvalueを知りたい場合に実行
    [peripheral readValueForCharacteristic:characteristic];
}
</code></pre>

<p>}
```</p>

<p>上記処理のタイミングで<code>self.majorChar</code>をメモリに保持できるので、<code>writeValue</code>メソッドの引数として指定できます。<br/>
さて、<code>writeValue</code>メソッドを実行したときにエラーが発生する可能性があるので、下記メソッドを追加します。</p>

<p>```objective-c
// Characteristicの書き込み処理が完了した場合に呼び出される処理
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didWriteValueForCharacteristic:(CBCharacteristic </em>)characteristic error:(NSError *)error
{</p>

<pre><code>if(error) {
    NSLog(@"error: %@", error);
    return;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>以上の処理を実装した上でUIButtonを押して、<a href="https://itunes.apple.com/jp/app/lightblue-bluetooth-low-energy/id557428110?mt=8">LightBlue</a>を使って確認してみると、確かに値が変更されていることがわかります。</p>

<p>これまでのソースは<a href="https://github.com/grandbig/REBL600FR-Central">GitHub</a>にアップしてありますので、興味がある方はご自由にお使いください。</p>

<p>参考:<br/>
<a href="http://tyashushi.blogspot.jp/2012/09/1016.html">10進数と16進数の変換</a><br/>
<a href="http://stackoverflow.com/questions/2501033/nsstring-hex-to-bytes">NSString hex to bytes</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRを検知するiOSアプリを開発してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/08/bl600sample2/"/>
    <updated>2015-02-08T21:11:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/08/bl600sample2</id>
    <content type="html"><![CDATA[<h4>REBL600FRを検知</h4>

<p>引き続き、REBL600FRを用いて遊んでみたいと思います。<br/>
前回の<a href="http://grandbig.github.io/blog/2015/02/07/bl600sample/">REBL600FRをiBeaconとして検知してみた！</a>では既存のアプリを拝借してREBL600FRを検知していました。<br/>
今回はそこを自作してみたいと思います。</p>

<p>そのためにCoreBluetooth.frameworkを使います。<br/>
まずは、REBL600FRの発信するBLEを検知してみましょう。</p>

<!-- more -->


<p>```objective-c
// ViewController.mファイル</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreBluetooth/CoreBluetooth.h></h1>

<p>@interface ViewController ()&lt;CBCentralManagerDelegate, CBPeripheralDelegate></p>

<p>@property(strong, nonatomic) CBCentralManager <em>cm;
@property(strong, nonatomic) CBPeripheral </em>connectedPeripheral;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];</p>

<p>  // 1: CBCentralManagerの初期化
  self.cm = [CBCentralManager alloc] initWithDelegate:self queue:nil options:nil];]
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<h1>pragma mark &ndash; CBCentralManagerDelegate</h1>

<ul>
<li>(void)centralManagerDidUpdateState:(CBCentralManager *)central
{
  if(central.state == CBCentralManagerStatePoweredOn) {
      // Centralとして機能可能な場合
      // 2: Peripheralのスキャンを開始
      [self.cm scanForPeripheralsWithServices:nil options:nil];
  }
}</li>
</ul>


<p>@end
```</p>

<p>上記ソースの説明をします。<br/>
1でCBCentralManagerを初期化すると、centralManagerDidUpdateStateメソッドが呼び出されます。<br/>
そこで、Centralとして機能する(BluetoothがONで正常である)場合に限り、scanForPeripheralsWithServicesメソッドを実行することでPeripheralのスキャンを開始します。</p>

<p>今回は、<code>scanForPeripheralsWithServices</code>の<code>serviceUUIDs</code>と<code>options</code>をnilにしています。<br/>
もし、あらかじめスキャンしたいBLEのUUIDが決まっているのであれば、</p>

<p><code>objective-c
NSArray *services = [NSArray arrayWithObjects:[CBUUID UUIDWithString:@"C6D0F826-CCBA-4738-97CE-81491F748039"], nil];
</code></p>

<p>といったように指定してあげましょう。<br/>
※ nilの指定は非推奨とされています。</p>

<p>また、optionsには<code>CBCentralManagerScanOptionAllowDuplicatesKey</code>と<code>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</code>を指定可能となっています。<br/>
<code>CBCentralManagerScanOptionAllowDuplicatesKey</code>を明示的指定しない場合はデフォルトNOと判断されます。<br/>
YESにした場合、Peripheralからアドバタイズパケットを受信する度にペリフェラル発見通知が実行されます。</p>

<p><code>CBCentralManagerScanOptionSolicitedServiceUUIDsKey</code>にはスキャンしたいUUIDの配列を指定できます。<br/>
servicesで既に指定しているので、実際のところ何が違うのでしょうか&hellip;。</p>

<p>続いての実装です。</p>

<p>```
&ndash; (void)centralManagerDidUpdateState:(CBCentralManager *)central
{</p>

<pre><code>&lt;省略&gt;
</code></pre>

<p>}</p>

<ul>
<li>(void)centralManager:(CBCentralManager <em>)central didDiscoverPeripheral:(CBPeripheral </em>)peripheral advertisementData:(NSDictionary <em>)advertisementData RSSI:(NSNumber </em>)RSSI
{
  NSLog(@&ldquo;%@&rdquo;, RSSI);
  NSLog(@&ldquo;%@&rdquo;, advertisementData);
}</li>
</ul>


<p>```</p>

<p><code>scanForPeripheralsWithServices</code>実行後にPeripheralを発見した場合、<code>didDiscoverPeripheral</code>メソッドが呼び出されます。<br/>
このメソッドでは、<code>advertisementData</code>と<code>RSSI</code>の値を取得できます。</p>

<p>では、実際に取得できる値を見てみましょう。<br/>
<code>scanForPeripheralsWithServices</code>が実行された後に、REBL600FRのスイッチをONにします。</p>

<p><img src="/images/REBL600FR_3.jpg" alt="REBL600FRのスイッチをONにしましょう。" /></p>

<p>すると、</p>

<p>```
RSSI = -94</p>

<p>advertisementData = {</p>

<pre><code>kCBAdvDataChannel = 37,
kCBAdvDataIsConnectable = 1,
kCBAdvDataLocalName = "Laird iBeacon"
</code></pre>

<p>}
```</p>

<p>と値を取得できました。<br/>
<code>kCBAdvDataChannel</code>はBLEデバイスの発見と接続に利用するアドバタイズメントチャネルのことで、<code>kCBAdvDataIsConnectable</code>は接続可能なPeripheralかどうか判別する値(1であれば接続可)で、<code>kCBAdvDataLocalName</code>はPeripheralの名前のことです。</p>

<p>Appleの<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys">CBCentralManagerDelegate Protocol Reference</a>を見ると、advertisementDataには他にも取得可能な値が入っていることがあるようです。</p>

<h4>REBL600FRに接続</h4>

<p>次に、先ほど発見することができたREBL600FRに接続してみたいと思います。<br/>
<code>didDiscoverPeripheral</code>が実行されたときに検知したperipheralに接続するようにしてみます。</p>

<p>```objective-c</p>

<ul>
<li><p>(void)centralManager:(CBCentralManager <em>)central didDiscoverPeripheral:(CBPeripheral </em>)peripheral advertisementData:(NSDictionary <em>)advertisementData RSSI:(NSNumber </em>)RSSI
{
  NSLog(@&ldquo;%@&rdquo;, RSSI);
  NSLog(@&ldquo;%@&rdquo;, advertisementData);</p>

<p>  self.connectedPeripheral = peripheral;
  self.connectedPeripheral.delegate = self;</p>

<p>  // Peripheralへの接続処理
  [self.cm connectPeripheral:self.connectedPeripheral options:nil];
}
```</p></li>
</ul>


<p><code>connectPeripheral</code>メソッドで接続したいPeripheralに接続することができます。<br/>
このとき<code>options</code>には<code>CBConnectPeripheralOptionNotifyOnConnectionKey</code>, <code>CBConnectPeripheralOptionNotifyOnDisconnectionKey</code>, <code>CBConnectPeripheralOptionNotifyOnNotificationKey</code>の3種類のいずれかを指定可能です。<br/>
それぞれ、Peripheralと接続, Peripherlと切断, PeripheralからNotificationを受信した場合にアラートを表示したい場合に指定します。</p>

<p>接続が確立された場合に<code>centralManager:didConnectPeripheral:</code>メソッドが呼び出されます。<br/>
この中で、Peripheralが提供するサービスを検索する処理を書いてみましょう。</p>

<p>```objective-c
// Peripheralと接続できた場合に呼び出される処理
&ndash; (void)centralManager:(CBCentralManager <em>)central didConnectPeripheral:(CBPeripheral </em>)peripheral
{</p>

<pre><code>// スキャンの停止
[self.cm stopScan];

// Peripheralのサービスを検索
[self.connectedPeripheral discoverServices:nil];
</code></pre>

<p>}
```</p>

<p>電池の消耗を防ぐために、接続が確立された後はPeripheralのスキャンを停止します。<br/>
<code>discoverServices</code>メソッドでPeripheralのサービスを検索します。<br/>
引数には検索したいサービスのUUIDの配列を指定可能です。<br/>
nilにした場合は全てのサービスを検索します。こちらもnilの指定は非推奨とされています。</p>

<p>サービスが見つかると、<code>didDiscoverServices:</code>メソッドが呼び出されます。<br/>
そこでさらに、サービスが持っているキャラクタリスティックを検索します。</p>

<p>```objective-c</p>

<h1>pragma mark &ndash; CBPeripheralDelegate</h1>

<p>// Servicesが見つかったときに呼び出される処理
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didDiscoverServices:(NSError </em>)error
{</p>

<pre><code>NSArray *services = peripheral.services;

for(CBService *service in services) {
    NSLog(@"Service UUID: %@", service.UUID);
    // Characteristicsの検索
    [peripheral discoverCharacteristics:nil forService:service];
}
</code></pre>

<p>}
```</p>

<p>キャラクタリスティックの検索は<code>discoverCharacteristics:</code>メソッドを使います。<br/>
例によって、引数の<code>characteristicUUIDs</code>はnilを指定することで、全てのキャラクタリスティックを検索しています。<br/>
もちろんnilは非推奨とされています。</p>

<p>今回は取得できた全てのサービスに対して、全てのキャラクタリスティックを検索するため、上記のようにfor文を使っています。</p>

<p>キャラクタリスティックが見つかると、<code>didDiscoverCharacteristicsForService:</code>メソッドが呼び出されます。</p>

<p>```objective-c
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didDiscoverCharacteristicsForService:(CBService </em>)service error:(NSError *)error
{</p>

<pre><code>for(CBCharacteristic *characteristic in service.characteristics) {
    // 値が変わったときに通知を受けたい場合に実行
    [peripheral setNotifyValue:YES forCharacteristic:characteristic];
    // キャラクタリステックのvalueを知りたい場合に実行
    [peripheral readValueForCharacteristic:characteristic];
}
</code></pre>

<p>}
```</p>

<p><code>setNotifyValue</code>はキャラクタリステックの値が変わったときに<code>didUpdateNotificationStateForCharacteristic:error:</code>を呼び出すために<code>YES</code>で設定しています。<br/>
<code>readValueForCharacteristic:</code>メソッドは検索して見つかったキャラクタリステックの値を読むために実行しています。</p>

<p>因みに、<code>CBCharacteristic</code>クラスはプロパティに<code>properties</code>を持っています。<br/>
これは、そのデータが <strong>Read Only</strong> なのか <strong>Read and Write</strong> なのかを判別するために利用します。<br/>
REBL600FRの場合、characteristicsをNSLogでログ出力してみると、</p>

<p>```
// Read Onlyの例
characteristic: &lt;CBCharacteristic: 0x175744d0 UUID = Manufacturer Name String, Value = (null), Properties = 0x2, Notifying = NO, Broadcasting = NO></p>

<p>// Read and Writeの例
characteristic: &lt;CBCharacteristic: 0x17572690 UUID = 569A2010-B87F-490C-92CB-11BA5EA5167C, Value = (null), Properties = 0xA, Notifying = NO, Broadcasting = NO>
```</p>

<p>となりました。<br/>
<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreBluetooth/Reference/CBCharacteristic_Class/index.html#//apple_ref/occ/instp/CBCharacteristic/properties">CBCharacteristic Class Reference</a>を見ると、<code>0x2</code>は<code>CBCharacteristicPropertyRead</code>とされていますが、<code>0xA</code>は該当するものが記載されていませんでした。</p>

<p>キャラクタリステックの値の取得が完了すると、<code>didUpdateValueForCharacteristic:error:</code>メソッドが呼ばれます。</p>

<p>```objective-c
&ndash; (void)peripheral:(CBPeripheral <em>)peripheral didUpdateValueForCharacteristic:(CBCharacteristic </em>)characteristic error:(NSError *)error
{</p>

<pre><code>NSString *value = [[NSString alloc] initWithData:characteristic.value encoding:NSUTF8StringEncoding];
NSLog(@"value: %@", value);
</code></pre>

<p>}</p>

<p>```</p>

<p>これで各パラメータの値が確認できました。<br/>
気をつけたいのは、major, minor, Tx PowerなどはUTF8でエンコードをかけると文字化けしたログを吐くので、どんな値か見たい場合はエンコードせずにNSDataの値のまま見てみましょう。</p>

<p>う〜ん。今回は時間切れですね&hellip;。<br/>
次回はREBL600FRのパラメータをiPhoneから書き換えることにチャレンジしたいと思います。</p>

<p>といったところで本日はここまで。<br/>
ソースはパラメータの書き換えが完了したタイミングでGitHubにアップしたいと思います。</p>

<p>参考:<br/>
<a href="http://qiita.com/rnamiki/items/ea912393c4fb58e7a9b9">CoreBluetoothで出来る事</a><br/>
<a href="http://qiita.com/miyatay/items/4d4ce4ccd7905ddc0144">Bluetooth Low Energy（BLE）/ iBeaconとは</a><br/>
<a href="http://reinforce-lab.github.io/blog/2013/01/25/CBCentralManagerClassReference_jp/">Reinforce-Lab&rsquo;s Blog</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REBL600FRをiBeaconとして検知してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/07/bl600sample/"/>
    <updated>2015-02-07T23:12:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/07/bl600sample</id>
    <content type="html"><![CDATA[<h4>REBL600FRとFRISK</h4>

<p>今日は<a href="http://www.runele.com/ca1/24/">ランニングエレクトロニクス</a>さんから購入したREBL600FRを使って遊んでみたいと思います。<br/>
早速、REBL600FRを1個注文して、先日、家に届きました。</p>

<p><img src="/images/REBL600FR_1.jpg" alt="REBL600FRが届いた！" /></p>

<!-- more -->


<p>REBL600FRの売りがFRISKのケースに入るサイズとのことなので、FRISKを購入しました。</p>

<p><img src="/images/FRISK_1.jpg" alt="FRISK2つ購入しました" /></p>

<p>なぜ2つ購入したかって？<br/>
FRISKを購入しても、すぐにはREBL600FRをケースに入れられませんよね？<br/>
FRISKが入っているのだから。</p>

<p>なので、FRISKのケースを空けました。</p>

<p><img src="/images/FRISK_2.jpg" alt="FRISKケースを空にします" /></p>

<p>おぉ、空になった&hellip;かと思いきや、この状態ではFRISKで満帆となったケースが閉まらない&hellip;。<br/>
閉まるように余分な分を除けてみたところ、</p>

<p><img src="/images/FRISK_3.jpg" alt="FRISKケースが閉まるように少し除けます" /></p>

<p>11粒を戻すこととなりました。良かった。11粒くらいなら一気に食べられます笑。<br/>
また、何とか閉めたFRISKケースがこちら。</p>

<p><img src="/images/FRISK_4.jpg" alt="FRISKケースが閉められた" /></p>

<p>ちょっと浮いてますね&hellip;。</p>

<p>ま、何はともあれこれでREBL600FRをFRISKケースに入れれば準備完了です！</p>

<p><img src="/images/REBL600FR_2.jpg" alt="REBL600FRの準備完了" /></p>

<h4>REBL600FRのiBeaconを検知してみる</h4>

<p>さて、早速、iBeaconとしての動作を見ていくことにしましょう。<br/>
iBeaconの信号をキャッチするCentral側のアプリとして、<a href="https://itunes.apple.com/jp/app/lightblue-bluetooth-low-energy/id557428110?mt=8">LightBlue</a>を使うことにしました。<br/>
理由は、UUIDに何が設定されているのかわからないためです。</p>

<p>では、REBL600FRのスイッチをONにして、LightBlueで見てみましょう。<br/>
すると、このように <strong>Laird iBeacon</strong> というものを発見します。</p>

<p><img src="/images/lightblue_1.png" alt="LightBlueの画面" /></p>

<p>これを選択してみると、iBeaconとの接続を試みる処理が走ります。</p>

<p><img src="/images/lightblue_2.png" alt="LightBlueが接続試みる" /></p>

<p>接続後は詳細画面に遷移します。</p>

<p><img src="/images/lightblue_3.png" alt="LightBlueでLaird iBeaconの詳細を見る" /></p>

<p>その中で表示される画面の一部を紹介します。</p>

<p><img src="/images/lightblue_4.png" alt="LightBlueでLaird iBeaconの詳細を見る2" /></p>

<p>ここでぜひお知らせしたいのが、REBL600FRは送信出力をアプリから設定できるんです。<br/>
それが先ほどの写真でお見せした <strong>Tx Power Level</strong> という項目です。<br/>
これをタップすると、下記の画面に進みます。</p>

<p><img src="/images/lightblue_5.png" alt="Tx Power Levelの画面" /></p>

<p>初期状態では <strong>0x04</strong> となっており、4 [dBm] であることを示しています。<br/>
MAXの送信出力が4 [dBm] のようなので、それ以下(負の値も含む)の値を16進数で設定します。<br/>
10進数と16進数の相互変換は<a href="http://hogehoge.tk/tool/number.html">こちらのツール</a>からできます。</p>

<p><strong>Write new Value</strong> をタップ ⇒ 数値を設定 ⇒ Doneをタップ<br/>
これでスイッチのON / OFFを切り替えなくとも送信出力を変更することができます。<br/>
※ REBL600FRのスイッチをONにしてから約1分の間に接続しないといけないようです。<br/>
(少し時間が経ってしまうと接続できませんでした。)</p>

<p>実際に、iBeacon検知用のアプリ<a href="https://itunes.apple.com/jp/app/locate-beacon/id738709014?mt=8">Locate Beacon</a>で確認してみると、初期状態に比べて <strong>unknown</strong> と表示される距離が変わるはずです。</p>

<p>時間があるときに各種パラメータの値を変更可能なiOSアプリを作成したいと思います。</p>

<p>ということで、今日はここまで。</p>

<p>参考:<br/>
<a href="http://eguchi.jp/blog/?p=461">Kazuyuki Eguchi Factory スマホでiBeaconのパラメータを変更できるアプリを作りました！（REBL600FR向け）</a><br/>
<a href="http://todotani.cocolog-nifty.com/blog/2014/05/rbbl600fribeaco.html">Todotaniのはやり物Log</a><br/>
<a href="http://support.tetrastyle.net/bl600-ibeacon/">TETRASTYLE: Support (BL600) iBeacon サンプルを使ってみる</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
