<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios8 | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/ios8/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS8でrequestLocationが使える！？]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/20/requestlocation/"/>
    <updated>2015-09-20T01:21:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/20/requestlocation</id>
    <content type="html"><![CDATA[<h4>実はiOS8.4.1でrequestLocationが使える</h4>

<p>さて、今回はたまたま気づいたバグ？の紹介です。<br/>
皆様、ご存知の通り, iOS9から <strong>requestLocation</strong> なるものがCoreLocation.frameworkに追加されました。<br/>
これにより、1回だけ現在地を取得する処理を自作せずにframeworkに任せることができるようになりました。</p>

<p>しかし、iOS9からとアナウンスされているものの、実は <strong>iOS8.4.1</strong> でも利用できました。<br/>
コードは下記になります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>@interface ViewController () <CLLocationManagerDelegate></p>

<p>@property (strong, nonatomic) CLLocationManager *lm;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  self.lm = [[CLLocationManager alloc] init];
  self.lm.delegate = self;
  [self.lm requestWhenInUseAuthorization];
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
<li><p>(void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {
  if (status == kCLAuthorizationStatusNotDetermined) {
      // ユーザが位置情報の使用を許可していない
      NSLog(@&ldquo;kCLAuthorizationStatusNotDetermined&rdquo;);
  } else if(status == kCLAuthorizationStatusAuthorizedAlways) {
      // ユーザが位置情報の使用を常に許可している場合
   NSLog(@&ldquo;kCLAuthorizationStatusAuthorizedAlways&rdquo;);
  } else if(status == kCLAuthorizationStatusAuthorizedWhenInUse) {
      // ユーザが位置情報の使用を使用中のみ許可している場合
      NSLog(@&ldquo;kCLAuthorizationStatusAuthorizedWhenInUse&rdquo;);
  }
}</p></li>
<li><p>(void)locationManager:(CLLocationManager <em>)manager didUpdateLocations:(NSArray<CLLocation *> </em>)locations {
  // 位置情報の取得に成功した場合
  NSLog(@&ldquo;%@&rdquo;, locations.firstObject);
}</p></li>
<li><p>(void)locationManager:(CLLocationManager <em>)manager didFailWithError:(NSError </em>)error {
  // 位置情報の取得に失敗した場合
  NSLog(@&ldquo;%@&rdquo;, error);
}</p></li>
<li><p>(IBAction)getLocation:(id)sender {
  if([self.lm respondsToSelector:@selector(requestLocation)]) {
      // iOS9.x以上の場合
      [self.lm requestLocation];
  } else {
      // iOS8.x以下の場合
      NSLog(@&ldquo;iOS8.xです&rdquo;);
  }
}
```</p></li>
</ul>


<p>騙されたと思って試してみてください。<br/>
なぜかiOS8.4.1でも<code>requestLocation</code>が実行されますので。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8で端末の向きに合わせて画像を回転させる方法について]]></title>
    <link href="http://grandbig.github.io/blog/2015/01/29/uiimagerotate-ios8/"/>
    <updated>2015-01-29T00:24:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/01/29/uiimagerotate-ios8</id>
    <content type="html"><![CDATA[<h4>端末の向きに合わせて画像を回転させよう！</h4>

<p>iOS7.xまでは<strong>willRotateToInterfaceOrientation</strong>や<strong>didRotateFromInterfaceOrientation</strong>を用いて端末の向きが変わるときに、UIImageViewを回転させるといったことをやっていました。<br/>
しかし、iOS8ではこれら2つのメソッドがdeprecatedになってしまいました。<br/>
では、iOS8ではどうやって端末の向きに合わせてUIImageViewを回転させれば良いのでしょうか？</p>

<p>ここではAutoLayoutを利用した方法を説明します。</p>

<!-- more -->


<p>まず、前提として<strong>『アプリの中央に配置した正方形の画像を端末の向きに合わせて回転させる』</strong>とします。<br/>
では早速手順を説明します。</p>

<p>1: StoryboardにUIImageViewを配置しましょう。<br/>
<img src="/images/rotate_image_ios8_1.png" alt="UIImageViewを配置" /></p>

<p>2: UIImageViewに画像をセットしましょう。<br/>
<img src="/images/rotate_image_ios8_2.png" alt="UIImageViewに画像をセット" /></p>

<p>3: AutoLayoutを設定しましょう。<br/>
設定するAutoLayoutは、下記5点です。</p>

<ul>
<li>Aspect Ratio</li>
<li>Center X Alignment</li>
<li>Center Y Alignment</li>
<li>Horizontal Space</li>
<li>Vertical Space</li>
</ul>


<p>Horizontal Space, Vertical Space, Aspect Ratioの設定は下記のようにできます。<br/>
<img src="/images/rotate_image_ios8_3.png" alt="AutoLayoutの設定" /></p>

<p>ここで、Horizontal Space, Vertical Spaceは<strong>Equal</strong>ではなく<strong>Greater</strong>設定をします。<br/>
設定は下図のようにHorizontal SpaceまたはVertical Spaceを選択して、右メニューのRelationを変更します。<br/>
<img src="/images/rotate_image_ios8_5.png" alt="AutoLayoutの設定" /></p>

<p>Center X Alignment, Center Y Alignmentの設定は下記のようにできます。<br/>
<img src="/images/rotate_image_ios8_4.png" alt="AutoLayoutの設定" /></p>

<p>全ての設定が終われば、下図のようになるでしょう。<br/>
<img src="/images/rotate_image_ios8_6.png" alt="AutoLayoutの設定" /></p>

<p>実際にアプリを起動して端末を回転させてみると、<br/>
端末がPortraitの場合は、<br/>
<img src="/images/rotate_image_ios8_7.png" alt="端末がPortraitの場合" /></p>

<p>端末がLandscapeの場合は、<br/>
<img src="/images/rotate_image_ios8_8.png" alt="端末がLandscapeの場合" /><br/>
となりました。</p>

<p>う〜ん、だいぶ楽になりましたね。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLVisitとCMPedometerをフィールド検証してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2015/01/10/visit-and-step2/"/>
    <updated>2015-01-10T22:30:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/01/10/visit-and-step2</id>
    <content type="html"><![CDATA[<h4>CLVisitとCMPedometerのフィールド検証</h4>

<p>2015年初更新です。<br/>
2014年の年末から2015年の年始にかけて海外に行く機会があったため、
以前、本ブログにも掲載したCLVisitとCMPedometerについてフィールド検証をしてみました。<br/>
<a href="http://grandbig.github.io/blog/2014/11/30/visit-and-step/">iOS8.1でCLVisitとCMPedometerを試してみた！</a>を参照ください。<br/>
(思いつきで、出発前夜にアプリを急造しました)</p>

<p>CLVisitは大幅変更位置情報サービスと同様に極力バッテリを消費しない仕組みで作られていることと思います。<br/>
これが『旅行の思い出を残したいというユーザの想いとマッチするのでは？』と考えたこともあり、現実的にどこまで使えるものなのか検証してみました。</p>

<!-- more -->


<h5>アプリの機能</h5>

<p>検証に利用したアプリの機能は下記です。</p>

<ul>
<li>CLVisitで取得した結果を端末内部のDBに保存</li>
<li>CMPedometerで取得した結果を端末内部のDBに保存</li>
<li>CLVisitでデータを取得できたタイミングで、結果をローカルプッシュ</li>
<li>CMPedometerでデータを取得したタイミングで、結果をローカルプッシュ</li>
</ul>


<h5>ソースコード</h5>

<p>ソースは<a href="https://github.com/grandbig/VisitTheWorld">GitHub</a>にアップしています。</p>

<p>CLVisitとCMPedometerの部分のみピックアップすると下記のように実装しています。<br/>
まずはCLVisitの処理は下記です。</p>

<p>```objective-c
// ViewController.m
// CLVisitの処理
&ndash; (void)locationManager:(CLLocationManager <em>)manager didVisit:(CLVisit </em>)visit
{</p>

<pre><code>// 値の取得
float lat = visit.coordinate.latitude;                              // 緯度
float lng = visit.coordinate.longitude;                             // 経度
float hacc = visit.horizontalAccuracy;                              // 水平精度
NSDate *arrivalDate = visit.arrivalDate;                            // 到着日時(NSDate型)
NSDate *departureDate = visit.departureDate;                        // 出発日時(NSDate型)
double arrivalUnixTime = [arrivalDate timeIntervalSince1970];       // 到着日時(timestamp)
double departureUnixTime = [departureDate timeIntervalSince1970];   // 出発日時(timestamp)

// NSDate型の日時をNSString型に変換
NSDateFormatter *outputFormatter = [NSDateFormatter alloc] init];
[outputFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];

NSString* arrivalDateString = [outputFormatter stringFromDate:arrivalDate];
NSString* departureDateString = [[outputFormatter stringFromDate:departureDate];

// データの挿入
[self insertPlaceData:lat longitude:lng horizontalAccuracy:hacc arrivalDate:arrivalDateString departureDate:departureDateString arrivalDateUT:arrivalUnixTime departureDateUT:departureUnixTime];
// ローカルプッシュ
NSString *message = [[NSString alloc] initWithFormat:@"lat: %f, lng: %f, hacc: %f, 到着日時: %@, 出発日時: %@", lat, lng, hacc, arrivalDateString, departureDateString];
[self sendLocalNotificationForMessage:message soundFlag:NO];
</code></pre>

<p>}
```</p>

<p>次にCMPedometerの処理を下記です。</p>

<p>```objective-c
// VisitController.m
// CMPedometerの処理
/<em>*
 歩数の計測開始処理
</em>/
&ndash; (void)startPedometer
{</p>

<pre><code>self.pmp = [CMPedometer alloc] init];]
[self.pmp startPedometerUpdatesFromDate:[NSDate date]
                            withHandler:^(CMPedometerData *pedometerData, NSError *error) {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                    // step数の取得
                                    NSNumber *step = pedometerData.numberOfSteps;
                                    NSInteger stepInt = [step integerValue];

                                    // 距離
                                    NSNumber *distance = pedometerData.distance;
                                    NSInteger distanceInt = [distance integerValue];

                                    // 開始日時, 終了日時のUnixTimeを取得
                                    double startDateUnixTime = [pedometerData.startDate timeIntervalSince1970];
                                    double endDateUnixTime = [pedometerData.endDate timeIntervalSince1970];

                                    // 日時取得のためにFormatを設定
                                    NSDateFormatter *outputFormatter = [[NSDateFormatter alloc] init];
                                    [outputFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
                                    // 開始日時, 終了日時のNSString型を取得
                                    NSString* startDateString = [outputFormatter stringFromDate:pedometerData.startDate];
                                    NSString *endDateString = [outputFormatter stringFromDate:pedometerData.endDate];

                                    // 階段の昇降
                                    NSNumber *floorsAscended = pedometerData.floorsAscended;
                                    NSNumber *floorsDescended = pedometerData.floorsDescended;
                                    NSInteger floorsAscendedInt = [floorsAscended integerValue];
                                    NSInteger floorsDescendedInt = [floorsDescended integerValue];

                                    // データの挿入
                                    [self insertMotionData:stepInt distance:distanceInt startDate:startDateString endDate:endDateString startDateUT:startDateUnixTime endDateUT:endDateUnixTime floorsAscended:floorsAscendedInt floorsDescended:floorsDescendedInt];

                                    // ローカルプッシュ通知
                                    NSString *message = [NSString alloc] initWithFormat:@"Step Count Result\n\n歩数: %@\n距離: %@[m]\n開始時間: %@\n終了時間: %@\n上った回数: %@\n下りた回数: %@", step, distance, startDateString, endDateString, floorsAscended, floorsDescended];
                                    [self sendLocalNotificationForMessage:message soundFlag:NO];]
                                });
                            }];
</code></pre>

<p>}
```</p>

<h5>結果</h5>

<p>では、結果を見てみましょう。<br/>
まずは、CLVisitの結果です。</p>

<p><img src="/images/visit_test1.png" alt="CLVisitの結果" /></p>

<ul>
<li>取得期間: 2014/12/28 14:30 〜 2015/01/03 20:00</li>
<li>取得数: 117点 (オランダ: 66点, ベルギー: 49点, ルクセンブルク: 2点)</li>
<li>精度: 0〜50[m]: 34点, 50〜100[m]: 76点, 100[m]〜: 7点</li>
<li>到着日時と出発日時が正しく取れた: 58点, 到着日時のみ正しく取れた: 0点, 出発日時のみ正しく取れた: 59点

<ul>
<li>CLVisitでは到着日時が正しく取れない場合は <strong>0001-01-01 01:00:00</strong> (月日や日時が異なる値になる場合もある)となり、出発日時が正しく取れない場合は <strong>4001-01-01 01:00:00</strong>  (同じく、月日や日時が異なる値になる場合もある)となる。</li>
</ul>
</li>
<li>10分程度の滞在時間でも取得できる</li>
<li>歩き続けている間は取得できない(歩行速度程度の遅い速度でも移動していると取得できない)</li>
<li>数 [m] 〜 数十 [m]の距離間でも取得できる</li>
</ul>


<p>次に、CMPedometerの結果です。</p>

<ul>
<li>取得期間: 2014/12/28 16:02:07 〜 2015/01/03 12:07:45</li>
<li>取得数: 1120点</li>
<li>ステップ数: 57998</li>
<li>移動距離: 38623 [m]</li>
<li>階段を上がった回数: 36, 階段を下りた回数: 49</li>
<li>計測を開始してから明示的に終了するまで取り続けることができなかった(2度 起動し直した)</li>
<li>歩行時と電車乗車時の区別はできていなかった</li>
</ul>


<h5>今後の展望</h5>

<p>海外旅行の思い出として軌跡を残すことを考えたアプリは既にたくさんあります。<br/>
主にiPhoneで写真を撮影したタイミングで緯度・経度を取得してプロットするというものが多いことと思います。<br/>
CLVisitはこれに対する補助機能としての役割を多少期待できるかもしれません。<br/>
とは言え、『滞在 = 写真を撮る』と考えると同じ地点にプロットが集まるのかもしれませんが&hellip;。<br/>
CMPedometerは歩行時のみであることを保証できないため、iPhoneの移動が停止/歩行/走行/電車などを区別するためにCMMotionActivityを合わせて利用したいと思いました。<br/>
それにより、万歩計としての精度を高めることができるかもしれません。<br/>
(う〜ん。今回、実装しておけば良かった&hellip;)</p>

<p>と言ったところで、本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8.1でCLVisitとCMPedometerを試してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2014/11/30/visit-and-step/"/>
    <updated>2014-11-30T17:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/11/30/visit-and-step</id>
    <content type="html"><![CDATA[<h4>iOS8から追加された新しい機能 CLVisitとCMPedometer</h4>

<p>さて、久々の更新です。<br/>
今更ですが、CLVisitとCMPedometerについて調べてみました。<br/>
CLVisitはiOS8以降、CMPedometerはiOS8以降かつM8 モーションコプロセッサを搭載したiPhone6 or iPhone6 Plusでのみ利用可能です。<br/>
iOS8はともかく、まだまだ、iPhone6 or iPhone6 Plusは普及しているとは言い難いことでしょう。<br/>
実質的に多いのはiPhone5かもしれません&hellip;。<br/>
しかし、ここはエンジニアとして、1〜2年後を見て、アプリを開発すべきでしょう。<br/>
ということで早速、見て行きましょう。</p>

<!-- more -->


<h4>CLVisitで滞在時間を検知</h4>

<p>まずは、CLVisitから見ていきます。<br/>
CLVisitは特定の場所の滞在時間を取得できるクラスです。<br/>
最近、Swiftでソースを書いてあるサイトが多いので、あえてObjective-Cで書いてみます。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreLocation/CoreLocation.h></h1>

<p>@interface ViewController () <CLLocationManagerDelegate></p>

<p>@property (strong, nonatomic) CLLocationManager <em>lm;
@property (weak, nonatomic) IBOutlet UILabel </em>label1;
@property (weak, nonatomic) IBOutlet UITextView *textView1;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {</p>

<p>  [super viewDidLoad];</p>

<p>  self.lm = [[CLLocationManager alloc] init];
  self.lm.delegate = self;</p>

<p>  // 位置情報の取得許可を求めるメソッド
  [self.lm requestAlwaysAuthorization];
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
<li><p>(void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {</p>

<p>  if (status == kCLAuthorizationStatusNotDetermined) {
      // ユーザが位置情報の使用を許可していない
  } else if(status == kCLAuthorizationStatusAuthorizedAlways) {
      // ユーザが位置情報の使用を常に許可している場合
      // 滞在時間の取得開始
      [self.lm startMonitoringVisits];
  } else if(status == kCLAuthorizationStatusAuthorizedWhenInUse) {
      // ユーザが位置情報の使用を使用中のみ許可している場合
  }
}</p></li>
<li><p>(void)locationManager:(CLLocationManager <em>)manager didVisit:(CLVisit </em>)visit {</p>

<p>  NSDateFormatter *outputFormatter = [[NSDateFormatter alloc] init];
  [outputFormatter setDateFormat:@&ldquo;yyyy-MM-dd HH:mm:ss&rdquo;];</p>

<p>  NSString <em>arrivalDate = [outputFormatter stringFromDate:visit.arrivalDate];
  NSString </em>departureDate = [outputFormatter stringFromDate:visit.departureDate];
  NSString <em>latitude = [NSString stringWithFormat:@&ldquo;%f&rdquo;,visit.coordinate.latitude];
  NSString </em>longitude = [NSString stringWithFormat:@&ldquo;%f&rdquo;,visit.coordinate.longitude];</p>

<p>  NSString *message = [[NSString alloc] initWithFormat:@&ldquo;緯度: %@\n経度: %@\n到着時間: %@\n出発時間: %@&rdquo;, latitude, longitude, arrivalDate, departureDate];
  // ローカルプッシュ通知
  [self sendLocalNotificationForMessage:message soundFlag:NO];
  dispatch_async(dispatch_get_main_queue(), ^{
      self.textView1.text = [[NSString alloc] initWithFormat: message];
  });
}</p></li>
</ul>


<p>/<em><em>
 ローカルプッシュ通知処理
 @param message メッセージ
 @param sound 通知音の設定
 </em>/
&ndash; (void)sendLocalNotificationForMessage:(NSString </em>)message soundFlag:(BOOL)soundFlag {</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
if(soundFlag) {
    localNotification.soundName = UILocalNotificationDefaultSoundName;
}
[[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>このアプリをインストールしたiPhone6を持って、ぶらぶらしてみたところ&hellip;</p>

<p>緯度: 35.☓☓☓☓☓☓<br/>
経度: 139.☓☓☓☓☓<br/>
到着時間: 2014-11-30 16:00:09<br/>
出発時間: 2014-11-30 16:22:20</p>

<p>といった結果が得られました。<br/>
その場を離れてから5〜6分後にローカルプッシュ通知が来ました。<br/>
※トリガーが時間なのか位置情報なのかは未検証</p>

<p>因みに、 <strong>アプリを1度起動すれば、その後、Backgroundで起動していなくても、検知してくれます。</strong> <br/>
これは滞在時間の取得以外にも何かに使えそうですね。<br/>
また、移動中は検知しなかったので、滞在と見なす時間が決まっているのでしょう。</p>

<h4>CMPedometerで歩行情報を取得</h4>

<p>次に、CMPedometerを見ていきます。<br/>
CMPedometerはiOS7で追加されていたCMStepCounterのパワーアップバージョンです。<br/>
これもObjective-Cでソースを書いてみます。</p>

<p>```objective-c
// ViewController.m</p>

<h1>import &ldquo;ViewController.h&rdquo;</h1>

<h1>import &lt;CoreMotion/CoreMotion.h></h1>

<p>@interface ViewController ()</p>

<p>@property (strong, nonatomic) CMPedometer <em>pmp;
@property (weak, nonatomic) IBOutlet UILabel </em>label1;
@property (weak, nonatomic) IBOutlet UITextView *textView1;</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  self.pmp = [[CMPedometer alloc] init];
  BOOL check = [self confirmCMPedometer];
  if(check) {
      // モーション計測の開始
      [self startPedometer];
  }
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>/<em>*
 CMPedometerが利用可能か判断する処理
 return 判断結果(YES: 利用可能, NO: 利用不可能)
 </em>/
&ndash; (BOOL)confirmCMPedometer {</p>

<pre><code>if([CMPedometer isStepCountingAvailable] &amp;&amp; [CMPedometer isDistanceAvailable] &amp;&amp; [CMPedometer isFloorCountingAvailable]) {
    return YES;
} else {
    return NO;
}
</code></pre>

<p>}</p>

<p>/<em>*
 歩行動作を計測する処理
 </em>/
&ndash; (void)startPedometer {</p>

<pre><code>[self.pmp startPedometerUpdatesFromDate:[NSDate date]
                            withHandler:^(CMPedometerData *pedometerData, NSError *error) {
                                dispatch_async(dispatch_get_main_queue(), ^{
                                    // step数の取得
                                    NSNumber *step = pedometerData.numberOfSteps;
                                    // 距離
                                    NSNumber *distance = pedometerData.distance;

                                    // 日時取得のためにFormatを設定
                                    NSDateFormatter *outputFormatter = [[NSDateFormatter alloc] init];
                                    [outputFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
                                    // 開始日時
                                    NSString* startDate = [outputFormatter stringFromDate:pedometerData.startDate];
                                    //終了日時
                                    NSString *endDate = [outputFormatter stringFromDate:pedometerData.endDate];

                                    // 階段の昇降
                                    NSNumber *floorsAscended = pedometerData.floorsAscended;
                                    NSNumber *floorsDescended = pedometerData.floorsDescended;

                                    NSString *str = [[NSString alloc] initWithFormat:@"Step Count Result\n\n歩数: %@\n距離: %@[m]\n開始時間: %@\n終了時間: %@\n上った回数: %@\n下りた回数: %@", step, distance, startDate, endDate, floorsAscended, floorsDescended];
                                    self.textView1.text = str;

                                    // ローカルプッシュ通知
                                    [self sendLocalNotificationForMessage:str soundFlag:NO];
                                });

}];
</code></pre>

<p>}</p>

<p>/<em><em>
 ローカルプッシュ通知処理
 @param message メッセージ
 @param sound 通知音の設定
 </em>/
&ndash; (void)sendLocalNotificationForMessage:(NSString </em>)message soundFlag:(BOOL)soundFlag {</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
if(soundFlag) {
    localNotification.soundName = UILocalNotificationDefaultSoundName;
}
[[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>このアプリをインストールしたiPhone6を持って、ぶらぶらしてみたところ&hellip;</p>

<p>歩数: 1128<br/>
距離: 774.0900000002002 [m]<br/>
開始時間: 2014-11-30 15:57:22<br/>
終了時間: 2014-11-30 16:29:32<br/>
上がった回数: 2<br/>
下がった回数: 0</p>

<p>といった結果が得られました。<br/>
これはローカルプッシュ通知が届くタイミングが任意なのか、法則性はなさそうでした。<br/>
※トリガーが時間なのか、歩数なのか、距離なのか未検証</p>

<p>因みに、 アプリを1度起動すれば、その後、Backgroundで起動していなくても、検知してくれます。<br/>
これは歩数計測以外にも何かに使えそうですね。</p>

<p>ということで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8からのLocalNotification]]></title>
    <link href="http://grandbig.github.io/blog/2014/11/09/localnotification-ios8/"/>
    <updated>2014-11-09T17:05:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2014/11/09/localnotification-ios8</id>
    <content type="html"><![CDATA[<h4>LocalNotificationでAction</h4>

<p>今日はiOS8から追加されたLocalNotificationの新機能についてお話します。<br/>
これまでのLocalNotificationは</p>

<ul>
<li>通知が通知エリアに表示される</li>
<li>通知をタップすることでアプリを起動</li>
</ul>


<p>くらいの機能しかありませんでした。</p>

<p>しかし、iOS8からは届いた通知に対して、ユーザが答えることができるようになりました。</p>

<!-- more -->


<p>例えば、下記のような感じですね。</p>

<p><img src="/images/localnotification_1.png" alt="バナー表示" /><br/>
<img src="/images/localnotification_2.png" alt="ダイアログ表示" /></p>

<p>これまでLocalNotificationを使ってきた人であれば、実に簡単に実装ができます。<br/>
それでは、実際にソースを見て行きましょう。</p>

<p>```objective-c
// AppDelegate.m
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {</p>

<pre><code>if ([UIApplication instancesRespondToSelector:@selector(registerUserNotificationSettings:)]) {
    [self registerUserNotificationSettings];
}

return YES;
</code></pre>

<p>}</p>

<p>&lt;省略></p>

<p>// アプリがBackground起動になったときに処理
&ndash; (void)applicationDidEnterBackground:(UIApplication *)application {</p>

<pre><code>// LocalNotificationの送信
[self sendLocalNotificationForMessage:@"TEST"];
</code></pre>

<p>}</p>

<p>&lt;省略></p>

<p>// LocalNotificationでアクションを実行したときの処理
&ndash; (void) application:(UIApplication <em>)application handleActionWithIdentifier:(NSString </em>)identifier forLocalNotification:(UILocalNotification *)notification completionHandler:(void (^)())completionHandler
{</p>

<pre><code>if ([identifier isEqualToString:@"ACCEPT"]) {
    NSLog(@"Accepted");
} else if([identifier isEqualToString:@"MAYBE"]) {
    NSLog(@"Maybe");
} else if([identifier isEqualToString:@"DECLINE"]) {
    NSLog(@"Declined");
}

if(completionHandler) {
    completionHandler();
}
</code></pre>

<p>}</p>

<p>// Notificationの設定
&ndash; (void)registerUserNotificationSettings
{</p>

<pre><code>// Actionの生成
UIMutableUserNotificationAction *acceptAction = [[UIMutableUserNotificationAction alloc] init];
acceptAction.identifier = @"ACCEPT";
acceptAction.title = @"Accept";
acceptAction.activationMode = UIUserNotificationActivationModeBackground;
acceptAction.authenticationRequired = NO;
acceptAction.destructive = NO;

// Actionの生成
UIMutableUserNotificationAction *acceptAction = [[UIMutableUserNotificationAction alloc] init];
acceptAction.identifier = @"MAYBE";
acceptAction.title = @"Maybe";
acceptAction.activationMode = UIUserNotificationActivationModeBackground;
acceptAction.authenticationRequired = NO;
acceptAction.destructive = NO;

// Actionの生成
UIMutableUserNotificationAction *acceptAction = [[UIMutableUserNotificationAction alloc] init];
acceptAction.identifier = @"DECLINE";
acceptAction.title = @"Decline";
acceptAction.activationMode = UIUserNotificationActivationModeBackground;
acceptAction.authenticationRequired = NO;
acceptAction.destructive = YES;

// Categoryの作成
UIMutableUserNotificationCategory *inviteCategory = [UIMutableUserNotificationCategory alloc] init];
inviteCategory.identifier = @"INVITE_CATEGORY"; // CategoryのIDを設定
[inviteCategory setActions:@[acceptAction, maybeAction, declineAction] forContext:UIUserNotificationActionContextDefault]; // ダイアログ表示
[inviteCategory setActions:@[acceptAction, declineAction] forContext:UIUserNotificationActionContextMinimal]; // バナー表示

NSSet *categories = [NSSet setWithObjects:inviteCategory, nil];
UIUserNotificationSettings *notificationSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:categories];
[[UIApplication sharedApplication] registerUserNotificationSettings:notificationSettings];
</code></pre>

<p>}</p>

<p>// LocalNotificationを送信
&ndash; (void)sendLocalNotificationForMessage:(NSString *)message
{</p>

<pre><code>UILocalNotification *localNotification = [UILocalNotification new];
localNotification.alertBody = message;
localNotification.fireDate = [NSDate date];
localNotification.timeZone = [NSTimeZone localTimeZone];
localNotification.soundName = UILocalNotificationDefaultSoundName;
localNotification.category = @"INVITE_CATEGORY"; // Action表示させたいCategoryの設定
[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
</code></pre>

<p>}
```</p>

<p>簡単に書けますね。<br/>
ぱっと見た感じは、予めAction項目を作成しておく必要があるので、用途は限定的になりそうな気がしますね。<br/>
と言っても、これまでよりユーザ操作のハンドリングの幅が広がるので、嬉しい限りですが&hellip;。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
</feed>
