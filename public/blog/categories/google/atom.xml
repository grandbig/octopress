<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for Androidを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-android/"/>
    <updated>2015-11-08T12:20:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/google-sign-in-android</id>
    <content type="html"><![CDATA[<h4>Google Sign-in SDKを使ったOAuth認証をやってみよう！</h4>

<p>さて、本日はGoogle Sign-in SDKのAndroidでの使い方について見ていきたいと思います。<br/>
Androidの場合、Google製のため、親和性は元々高いのですが、推奨されているGoogle Sign-in SDKを使うことでより快適なコーディングやUXを提供できるのではと期待しています。</p>

<p>因みに、本書執筆時の環境は下記です。<br/>
* 端末: Nexus6<br/>
* OS: Android6.0<br/>
* IDE: Android Studio 1.5 preview2</p>

<p>では、早速、使い方を見ていきましょう。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Google Developers ConsoleでOAuth認証に必要な項目を登録しよう！</h4>

<p>さて、実際にGoogle Sign-Inを始める前に、やらなければならないことがあります。<br/>
それは<a href="https://console.developers.google.com">Google Developers Console</a>での登録作業です。(iOSと同じです。)</p>

<p>まず、OAuth2.0の同意画面を作成しましょう。<br/>
因みに、筆者は既に登録済みのOAuth2.0クライアントIDがあったため、下図のように表示されます。<br/>
<strong>OAuth同意画面</strong> というボタンをクリックして、OAuth同意画面の作成ページに移りましょう。<br/>
<img src="/images/google-sign-in-android-0.png" alt="認証情報の確認ページ" /></p>

<p>OAuth同意画面では <strong>メールアドレス</strong> と <strong>サービス名</strong> を入力しましょう。(他は必要に応じて入力してください。)<br/>
<img src="/images/google-sign-in-android-1.png" alt="OAuth2.0の同意画面を作成" /></p>

<p>OAuth同意画面が作成できたら、認証情報を追加しましょう。<br/>
下図のように <strong>OAuth2.0クライアントID</strong> を選択してください。<br/>
<img src="/images/google-sign-in-android-2.png" alt="OAuth2.0クライアントIDを作成" /></p>

<p>今回はAndroid用なので、下図の手順でクライアントIDを作成しましょう。<br/>
<img src="/images/google-sign-in-android-3.png" alt="OAuth2.0クライアントISを作成2" /></p>

<p>これでクライアントIDが作成されたと思います。<br/>
作成したクライアントIDを選択すれば、下図のような情報が得られるはずです。<br/>
 <img src="/images/google-sign-in-android-6.png" alt="Google Developer ConsoleのOAuth2.0 for iOS" /></p>

<h4>Google Sign-in SDK for Androidを実装しよう</h4>

<p><a href="https://developers.google.com/identity/sign-in/android/?hl=ja">Googleの公式サイト</a>に書かれていますが、英語が苦手な方向け(+自分のメモ書き)として説明していきたいと思います。</p>

<p>まずは、<a href="https://developers.google.com/identity/sign-in/android/start?hl=ja">Google Sign-In for Androidのガイドページ</a>にアクセスしましょう。<br/>
そうすると、順番に説明されていることがわかります。<br/>
①はテストコードを手に入れるだけなので、自分のプロジェクトに組み込むなら②からはじめましょう。<br/>
<img src="/images/google-sign-in-android-4.png" alt="GET A CONFIGURATION FILE" /></p>

<p>そうすると、下図のようなページに遷移します。<br/>
<img src="/images/google-sign-in-android-5.png" alt="Enable Google services for your app" /></p>

<p>ここで、 <strong>App name</strong> にGoogle Developers Consoleのプロジェクト名を <strong>『選択』</strong> します。<br/>
注意点として、App nameに記載されているデフォルト名を削除すると、選択可能なプロジェクト名が表示されます。<br/>
App nameが入力した後に、 <strong>Android package name</strong> を入力しましょう。</p>

<p>必要項目の入力が終わったら、Choose and configure servicesボタンを押しましょう。<br/>
<img src="/images/google-sign-in-android-7.png" alt="Choose and configure servicesボタンを押す" /></p>

<p>結果、画面が遷移します。<br/>
<img src="/images/google-sign-in-android-8.png" alt="Configuration Fileを作成しよう" /></p>

<p>画面下の方に <strong>SHA1</strong> を入力する項目があるので、これを入力して、 <strong>ENABLE GOOGLE SIGN-IN</strong> ボタンを選択しましょう。<br/>
<img src="/images/google-sign-in-android-9.png" alt="Configuration Fileを作成しよう" /></p>

<p>因みにSHA1の調べ方は下記の通りです。</p>

<ol>
<li>ターミナルで/Users/{ユーザ名}/.androidの階層に移動</li>
<li><code>keytool -list -v -keystore "/Users/{ユーザ名}/.android/debug.keystore" -alias androiddebugkey -storepass android -keypass android</code>コマンドを入力</li>
<li>出力結果の証明書のフィンガプリント > SHA1の値を取得</li>
</ol>


<p>画面下の <strong>Generate configuration files</strong> ボタンが押せるようになるので、押しましょう。<br/>
<img src="/images/google-sign-in-android-10.png" alt="Configuration Fileを作成しよう" /></p>

<p>jsonファイルのダウンロード画面が表示されるので、ダウンロードしましょう。<br/>
<img src="/images/google-sign-in-android-11.png" alt="jsonファイルをダウンロード" /></p>

<p>必要なファイルが揃ったので、自身のプロジェクトのappフォルダ配下にダウンロードした<code>google-services.json</code>を配置しましょう。</p>

<p>続いて、<code>build.gradle</code>ファイルの設定にGoogle Play Services Pluginを追加しましょう。<br/>
まずは、<code>build.gradle(Project)</code>の<code>dependencies</code>内に<code>classpath 'com.google.gms:google-services:1.5.0-beta2'</code>を追加<br/>
次に、<code>build.gradle(app)</code>の最上部に<code>apply plugin: 'com.google.gms.google-services'</code>を追加<br/>
そして、<code>build.gradle(app)</code>の<code>dependencies</code>内に<code>compile 'com.google.android.gms:play-services-auth:8.3.0'</code>を追加</p>

<p>これで用意が整いましたので、ソースを書いていきます。</p>

<p>```java
// MainActivity.java
package &hellip;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;</p>

<p>import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.GoogleApiClient;</p>

<p>public class MainActivity extends AppCompatActivity implements</p>

<pre><code>    GoogleApiClient.OnConnectionFailedListener, View.OnClickListener {

private static final String TAG = "MainActivity";
private static final int RC_SIGN_IN = 9001;
private GoogleApiClient mGoogleApiClient;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    &lt;省略&gt;

    // Button listenersの設定
    findViewById(R.id.button_sign_in).setOnClickListener(this);

    // Google Sign-Inの設定
    GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestEmail().build();
    mGoogleApiClient = new GoogleApiClient.Builder(this)
            .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)
            .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
            .build();

    // Google Sign-Inボタンの設定
    SignInButton signInButton = (SignInButton) findViewById(R.id.button_sign_in);
    signInButton.setSize(SignInButton.SIZE_STANDARD);
    signInButton.setScopes(gso.getScopeArray());
}

&lt;省略&gt;

// Sign-Inした結果を受け取る処理
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);

    // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);
    if (requestCode == RC_SIGN_IN) {
        GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
        handleSignInResult(result);
    }
}

// Sign-Inした結果を扱う処理
private void handleSignInResult(GoogleSignInResult result) {
    Log.d(TAG, "handleSignInResult:" + result.isSuccess());
    if (result.isSuccess()) {
        // Signed in successfully, show authenticated UI.
        GoogleSignInAccount acct = result.getSignInAccount();
    } else {
        // Signed out, show unauthenticated UI.
    }
}

// Sign-In処理
private void signIn() {
    Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
    startActivityForResult(signInIntent, RC_SIGN_IN);
}

@Override
public void onClick(View v) {
    switch (v.getId()) {
        case R.id.button_sign_in:
            signIn();
            break;
    }
}
</code></pre>

<p>}
```</p>

<p>続いてレイアウトの作成</p>

<p>```java
// content_main.xml
&lt;com.google.android.gms.common.SignInButton</p>

<pre><code>android:id="@+id/button_sign_in"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_below="@+id/textView"
android:layout_alignParentStart="true"
android:layout_marginTop="100dp" /&gt;
</code></pre>

<p>```</p>

<p>これを実装すると下記のような画面遷移ができます。</p>

<p><img src="/images/google-sign-in-android-12.png" alt="アプリ起動後の画面" /><br/>
<img src="/images/google-sign-in-android-13.png" alt="アカウントの選択" /></p>

<p>Google Sign-In SDK for Androidを使うことで、UI/UXをiOS側と合わせることもできるので、非常に良いと思います。<br/>
ぜひ使ってみてはいかがでしょうか。</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for iOSがアップデートされました！]]></title>
    <link href="http://grandbig.github.io/blog/2015/11/08/google-sign-in-update/"/>
    <updated>2015-11-08T01:31:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/11/08/google-sign-in-update</id>
    <content type="html"><![CDATA[<h3>Google Sign-In SDK for iOSを利用する理由</h3>

<p>本日は再び、Google Sign-In SDK for iOSについてお話したいと思います。<br/>
筆者は業務でも積極的にGoogle Sign-In SDK for iOSを使っています。<br/>
理由は、</p>

<ul>
<li><a href="https://itunes.apple.com/jp/app/google/id284815942?mt=8">Google</a>, <a href="https://itunes.apple.com/jp/app/google+/id447119634?mt=8">Google+</a>アプリを入れているユーザはアカウントを入力しなくてもOAuth認証が可能</li>
<li>クライアント側で手軽にOAuth認証を実装できる</li>
</ul>


<p>といった2つがあります。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<p>前者は特にユーザの手間を省けるので、非常に有用だと考えています。<br/>
例え、1つの端末内で複数のアカウントを使っていても、ユーザが選択できる形でOAuth認証をすることができます。</p>

<p><img src="/images/google-sign-in-update-1.png" alt="OAuth認証" /></p>

<p>もちろんGoogle, Google+共にインストールされていない端末であったとしても、メールアドレスとパスワードを入力する従来の方法で問題なくOAuth認証を通すことができます。</p>

<p>後者は以前紹介した手順(<a href="http://grandbig.github.io/blog/2015/09/13/google-sign-in/">Google Sign-In SDK for iOSを使ってみよう！</a>を参照のこと)を踏むだけで、簡単に実装することができます。<br/>
OAuth認証で得られるトークン(アクセストークンやIDトークン)は端末ローカルで保存することも多いため、サーバサイドよりもクライアントサイドでOAuth認証を通す方が良い場合もあります。<br/>
あとは、サーバを自身で持てない場合もクライアントサイドで処理が済むので、非常に良いですね。</p>

<h3>Google Sign-In SDK for iOSがアップデートされて、さらに使いやすくなりました！</h3>

<p>上記で説明した通り、非常に実装が簡単でユーザにとっても利益のあるSDKではあるものの、微妙に使いにくい側面も持っていました。<br/>
それは、IDトークンを取得するタイミングが<code>[[GoogleSinIn sharedInstance] signIn];</code>と<code>[[GoogleSignIn sharedInstance] signInSilently];</code>の2つのみだったからです。<br/>
IDトークンはアクセストークンと同じく、有効期限が <strong>発行されてから1時間</strong> と定義されているため、IDトークンを利用する場合は割りと頻繁に更新情報を取得する必要があります。<br/>
しかし、先ほど2つのメソッドはアプリ起動後に <strong>ユーザがログイン済みか否かを判断した上で実行するメソッド</strong> であるため、頻繁に利用するシーンには不向きと言えます。(アプリ初回起動後とそれ以外との判断を自身で定義したフラグなどで管理する必要があるため)</p>

<p>それが先日公開されたv2.4.0から(<a href="https://developers.google.com/identity/sign-in/ios/release">Release Notes</a>を参照のこと)変更が加わりました。<br/>
具体的には、</p>

<ul>
<li><code>- (void) getAccessTokenWithHandler:</code>がdeprecatedとなり、<code>- (void) getTokensWithHandler:</code>が代わりに追加</li>
<li><code>- (void) refreshAccessTokenWithHandler:</code>がdeprecatedとなり、<code>- (void) refreshTokensWithHandler:</code>が代わりに追加</li>
</ul>


<p>の2点です。</p>

<p>これまでアクセストークンを取得するために利用していた<code>getAccessTokenWithHandler</code>ではアクセストークンのみを返却していましたが、<code>getTokenWithHandler</code>では<code>GIDAuthentication</code>オブジェクトごと返却してくれるようになったため、アクセストークンだけでなく、IDトークンも取得することができるようになりました。</p>

<p>また、<code>refreshAccessTokenWithHandler</code>ではアクセストークンのみをリフレッシュするものでしたが、<code>refreshTokenWithHandler</code>ではアクセストークンとIDトークンをリフレッシュしてくれるようになりました。</p>

<p>IDトークンはアクセストークンと同じ1時間だけ有効なトークンなので、自然と更新タイミングはアクセストークンと同じになります。<br/>
アクセストークンのみを使うのであれば、<code>getAccessTokenWithHandler</code>と<code>refreshAccessTokenWithHandler</code>で良かったのですが、IDトークンも使うとなると<code>getTokensWithHandler</code>および<code>refreshTokensWithHandler</code>でないと成り立ちません。</p>

<h3>OAuth認証を通して取得する各種トークンについて</h3>

<p>Google OAuth認証では様々なトークンが飛び交います。ここではそれぞれのトークンの利用用途について少し触れておきたいと思います。</p>

<ul>
<li>one-time code<br/>
これはアクセストークンを取得するための一時的なトークンです。<br/>
今回のSDKとは直接からみませんが、<a href="https://developers.google.com/identity/sign-in/web/server-side-flow?hl=ja">
Google Sign-In for server-side apps</a>に書かれている通りで、サーバサイドでアクセストークンを取得するために利用します。</li>
<li>access-token<br/>
これは各種APIを利用するために必要なトークンです。<br/>
API実行時にヘッダーにこのトークンを渡すことで、認証されたことを伝えることができます。(ヘッダーに入れていない場合はunauthorized errorが発生します。)</li>
<li>refresh-token<br/>
これはアクセストークンをリフレッシュするために利用するトークンです。<br/>
アクセストークンは有効期限が1時間なので、継続的にAPIを実行するためには、きちんとアクセストークンをリフレッシュする必要があります。</li>
<li>id-token<br/>
JWT(Json Web Token)と呼ばれるデータ形式で、ユーザのユニークな識別子が入っています。<br/>
各種サービス間でのID連携するときに利用します。<br/>
例えば、GREEにログインするときにYahoo!アカウントを使ってログインした場合に、ユーザの基本情報(名前やメールアドレス)が自動で入力されていることがあると思います。<br/>
そういった連携を組み込みたい場合に使います。</li>
</ul>


<p>今回、id-tokenを調べる上で、OpenID Connectの考え方に触れました。これまで全く気にしてこなかった内容なのですが、かなり大事であることがわかりました。<br/>
これについてもどこかで記事を書ければ良いなと思います。</p>

<p>と言ったところで本日はここまで。</p>

<p>参考:<br/>
* <a href="http://webos-goodies.jp/archives/how_to_migrate_from_openid_to_openid_connect.html">Google アカウントの認証を OpenID から OpenID Connect に移行する方法</a><br/>
* <a href="http://www.slideshare.net/kura_lab/openid-connect-id">OpenID Connect 入門 〜コンシューマーにおけるID連携のトレンド〜</a><br/>
* <a href="http://oauth.jp/blog/2015/01/06/oauth2-multiple-response-type/">OAuth 2.0 の Response Type 全パターン</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Sign-In SDK for iOSを使ってみよう！]]></title>
    <link href="http://grandbig.github.io/blog/2015/09/13/google-sign-in/"/>
    <updated>2015-09-13T02:34:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/09/13/google-sign-in</id>
    <content type="html"><![CDATA[<h4>Google Sign-in SDKを使ったOAuth認証をやってみよう！</h4>

<p>さて、本日はGoogle Sign-Inを利用したOAuth認証をやってみようと思います。<br/>
最近、<a href="https://console.developers.google.com">Google Developers Console</a>の画面が完全に一新されていました。<br/>
以前であれば、Google Developers ConsoleにOAuth2.0のiOSのクライアントIDを設定したときに、クライアントIDだけでなく、クライアントシークレットなども表示されていました。<br/>
それが、 <strong>クライアントID</strong> と <strong>iOSのURLスキーム</strong> のみになっていました。<br/>
これは完全にGoogleがGoogle Sign-Inを推奨している証であろうということで、早速使い方を見ていきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Google Developers ConsoleでOAuth認証に必要な項目を登録しよう！</h4>

<p>さて、実際にGoogle Sign-Inを始める前に、やらなければならないことがあります。<br/>
それは<a href="https://console.developers.google.com">Google Developers Console</a>での登録作業です。<br/>
冒頭に述べたようにサイトのデザインや表示項目なども変わっているので、1つ1つ見ていきましょう。</p>

<p>まず、OAuth2.0の同意画面を作成しましょう。<br/>
因みに、筆者は既に登録済みのOAuth2.0クライアントIDがあったため、下図のように表示されます。<br/>
<strong>OAuth同意画面</strong> というボタンをクリックして、OAuth同意画面の作成ページに移りましょう。<br/>
<img src="/images/google-sign-in-5.png" alt="認証情報の確認ページ" /></p>

<p>OAuth同意画面では <strong>メールアドレス</strong> と <strong>サービス名</strong> を入力しましょう。(他は必要に応じて入力してください。)<br/>
<img src="/images/google-sign-in-6.png" alt="OAuth2.0の同意画面を作成" /></p>

<p>OAuth同意画面が作成できたら、認証情報を追加しましょう。<br/>
下図のように <strong>OAuth2.0クライアントID</strong> を選択してください。<br/>
<img src="/images/google-sign-in-7.png" alt="OAuth2.0クライアントIDを作成" /></p>

<p>今回はiOS用なので、下図の手順でクライアントIDを作成しましょう。<br/>
<img src="/images/google-sign-in-8.png" alt="OAuth2.0クライアントIDを作成②" /></p>

<p>これでクライアントIDが作成されたと思います。<br/>
作成したクライアントIDを選択すれば、下図のような情報が得られるはずです。<br/>
 <img src="/images/google-sign-in-1.png" alt="Google Developer ConsoleのOAuth2.0 for iOS" /></p>

<h4>Google Sign-in SDK for iOSを実装しよう</h4>

<p>当然のことながら、基本的なことは<a href="https://developers.google.com/identity/sign-in/ios/start-integrating">Googleの公式サイト</a>に書かれています。<br/>
とは言え、英語ですし、案外躓くところもあったりするので、順を追って説明していきます。</p>

<p>まずは、<a href="https://developers.google.com/identity/sign-in/ios/start">Google Sign-In for iOSのガイドページ</a>にアクセスしましょう。<br/>
そうすると、順番に説明されていることがわかります。<br/>
①はテストコードを手に入れるだけなので、自分のプロジェクトに組み込むなら②からはじめましょう。<br/>
<img src="/images/google-sign-in-9.png" alt="GET A CONFIGURATION FILE" /></p>

<p>そうすると、下図のようなページに遷移します。<br/>
<img src="/images/google-sign-in-10.png" alt="Enable Google services for your app" /></p>

<p>ここで <strong>App name</strong> にGoogle Developer Consoleのプロジェクト名を <strong>『選択』</strong> します。<br/>
注意点として、App nameに記載されているデフォルト名を削除すると、選択可能なプロジェクト名が表示されます。<br/>
App nameが入力されれば、 <strong>iOS Bundle ID</strong> も選択可能になります。</p>

<p>必要事項を入力した後はChoose and configure servicesボタンを選択しましょう。<br/>
<img src="/images/google-sign-in-11.png" alt="Choose and configure services" /></p>

<p>結果、画面が遷移します。<br/>
<img src="/images/google-sign-in-12.png" alt="Configuration Fileを作成しよう" /></p>

<p>画面下の方のGenerate configuration filesボタンをクリックしましょう。<br/>
<img src="/images/google-sign-in-13.png" alt="Configuration Fileを作成しよう" /></p>

<p>plistファイルのダウンロード画面が表示されるので、ダウンロードしましょう。<br/>
<img src="/images/google-sign-in-14.png" alt="plistファイルをダウンロード" /></p>

<p>必要なファイルが揃ったので、 <strong>Google Sign-In for iOS ライブラリ</strong> を自分のプロジェクトに導入しましょう。<br/>
Podfileを作成して、<code>pod 'Google/SignIn</code>と記載します。あとは<code>pod install</code>でOK</p>

<p>さて<code>xcworkspace</code>ファイルが作成されているはずなので、Xcodeで開きましょう。<br/>
先ほどダウンロードした<code>GoogleService-Info.plist</code>ファイルをプロジェクトに組み込みましょう。<br/>
ファイルを選択して、Xcodeプロジェクトにドラッグ＆ドロップでOKです。</p>

<p>続いて、<code>GoogleService-Info.plist</code>ファイルに記載された <strong>REVERSED_CLIENT_ID</strong> と <strong>BUNDLE_ID</strong> をURL schemesとして設定する必要があります。<br/>
TARGETS > info > URL TypesでURL Typeを2つ追加しましょう。<br/>
<img src="/images/google-sign-in-15.png" alt="URL Typesを追加" /></p>

<p>これでソースコードを書くまでの準備が整いました。<br/>
次にソースコードを書いていきます。</p>

<p>```objective-c
// AppDelegate.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;Google/SignIn.h></h1>

<p>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate, GIDSignInDelegate></p>

<p>@property (strong, nonatomic) UIWindow *window;</p>

<p>@end
```</p>

<p>```objective-c
// AppDelegate.m
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {</p>

<pre><code>// Override point for customization after application launch.

NSError* configureError;
[[GGLContext sharedInstance] configureWithError: &amp;configureError];
NSAssert(!configureError, @"Error configuring Google services: %@", configureError);

[GIDSignIn sharedInstance].delegate = self;

return YES;
</code></pre>

<p>}</p>

<p>&lt;省略></p>

<ul>
<li><p>(BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {</p>

<p>  return [[GIDSignIn sharedInstance] handleURL:url sourceApplication:sourceApplication annotation:annotation];
}</p></li>
</ul>


<p>// Google Sign-inに成功した場合に呼び出される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn didSignInForUser:(GIDGoogleUser </em>)user withError:(NSError *)error {</p>

<pre><code>// Perform any operations on signed in user here.
NSString *userId = user.userID;                  // For client-side use only!
NSString *idToken = user.authentication.idToken; // Safe to send to the server
NSString *name = user.profile.name;
NSString *email = user.profile.email;

NSLog(@"userId: %@, idToken: %@, name: %@, email: %@", userId, idToken, name, email);
</code></pre>

<p>}</p>

<p>// Google Sign-inに失敗した場合に呼び出される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn didDisconnectWithUser:(GIDGoogleUser </em>)user withError:(NSError *)error {</p>

<pre><code>// Perform any operations when the user disconnects from app here.
NSLog(@"error: %@", error);
</code></pre>

<p>}</p>

<p>```</p>

<p>```objective-c
// ViewController.h</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;Google/SignIn.h></h1>

<p>@interface ViewController : UIViewController <GIDSignInUIDelegate></p>

<p>@property (weak, nonatomic) IBOutlet GIDSignInButton *signInButton;</p>

<p>@end</p>

<p>```</p>

<p>```objective-c
// ViewController.m
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

[GIDSignIn sharedInstance].uiDelegate = self;
// 任意のスコープを設定
[GIDSignIn sharedInstance].scopes = @[@"https://www.googleapis.com/auth/calendar", @"https://www.googleapis.com/auth/drive"];
NSLog(@"scope: %@", [GIDSignIn sharedInstance].scopes);
</code></pre>

<p>}</p>

<p>// エラーが発生した場合に呼び出される処理
&ndash; (void)signInWillDispatch:(GIDSignIn <em>)signIn error:(NSError </em>)error {</p>

<pre><code>NSLog(@"error: %@", error);
</code></pre>

<p>}</p>

<p>// Google OAuth2認証画面を開始するときに実行される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn presentViewController:(UIViewController </em>)viewController {</p>

<pre><code>// OAuth2認証画面を表示する処理
[self presentViewController:viewController animated:YES completion:nil];
</code></pre>

<p>}</p>

<p>// Google OAuth2認証が完了したら実行される処理
&ndash; (void)signIn:(GIDSignIn <em>)signIn dismissViewController:(UIViewController </em>)viewController {</p>

<pre><code>// OAuth2認証の画面を閉じる処理
[self dismissViewControllerAnimated:YES completion:nil];
</code></pre>

<p>}</p>

<p>// Google Sign-inボタンをクリックした場合の処理(Storyboardで設定すること)
&ndash; (IBAction)didTapSignIn:(id)sender {</p>

<pre><code>// Google Sign-inを実行する処理
[[GIDSignIn sharedInstance] signIn];
</code></pre>

<p>}
```</p>

<p>上記を実行することで下記のようにOAuth2認証ができました。</p>

<p><img src="/images/google-sign-in-2.png" alt="Google OAuth2認証開始画面" /><br/>
<img src="/images/google-sign-in-3.png" alt="Google OAuth2認証の認証許可確認画面" /></p>

<p><strong>Google+アプリ</strong> がインストールされている場合はSafariではなく <strong>Google+アプリ</strong> が起動します。</p>

<p>さて、いかがだったでしょうか？<br/>
今回はひとまず、ここまでにしますが、今後はOAuth2認証後にGoogle Calendar APIやGoogle Driveの画面表示をしてみたいと思います。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
</feed>
