<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | Takahiro Octopress Blog]]></title>
  <link href="http://grandbig.github.io/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://grandbig.github.io/"/>
  <updated>2016-04-30T16:11:43+09:00</updated>
  <id>http://grandbig.github.io/</id>
  <author>
    <name><![CDATA[Takahiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[『Swiftビギナーズ勉強会 第１３回』に参加してきました]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/20/swift-beginners-study-13/"/>
    <updated>2016-02-20T13:51:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/20/swift-beginners-study-13</id>
    <content type="html"><![CDATA[<h4>始めに</h4>

<p>本日は<a href="http://eventdots.jp/event/578498">Swiftビギナーズ勉強会 第１３回</a>に参加してきました。<br/>
筆者はiPhoneアプリ開発自体は4年近く前から関わっているものの<br/>
(初めはWebViewを使ったハイブリッドアプリから携わり、後にフルネイティブに&hellip;)、<br/>
多くはObjective-Cで書いてきたため、Swiftでのコーディング経験は長くありません。<br/>
そういった経緯や、iOS関連の勉強会を探していたこともあり、<br/>
良い機会だと思って参加することにしました。</p>

<p>今回の勉強会の概要はこちらの資料で説明頂きました。<br/>
<a href="http://www.slideshare.net/YoshinoriKoba/swiftswift">概要資料</a></p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>ショートセッション</h4>

<ol>
<li><p>Swift × WordPress SwiftからWP REST APIを使ってWordPressの記事をリストする<br/>
<a href="http://www.slideshare.net/YoshinoriKoba/swift-wordpressswift-wp-rest-apiwordpressswift-160220">発表資料</a></p>

<ul>
<li>メモ

<ul>
<li>デバッグ方法に関するリンク<br/>
<a href="http://blogios.stack3.net/archives/776">Xcodeでのデバッグ方法</a></li>
<li>WP REST APIを使ったときにATSに関するエラーが発生した<br/>
HTTPSサーバを用意するのはハードルがあるので、plistの設定で対応した</li>
</ul>
</li>
<li>感想

<ul>
<li>個人的には<a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJson</a>を使ったことがなく、やっぱり使った方が良いのかなと</li>
<li>最近オープンに公開されているAPIがHTTPだと、ATSに引っかかるので、世の中のオープンなAPIが載っているサーバはHTTPSになっていくのかなと</li>
</ul>
</li>
</ul>
</li>
<li><p>mBaaSの基本的な扱い方の事始め</p>

<ul>
<li>参考URL

<ul>
<li><a href="http://qiita.com/fumiyasac@github/items/53d9d45d880b0e523417">ニフティクラウドmobile backendの事始めと導入手順まとめ</a></li>
<li><a href="http://qiita.com/fumiyasac@github/items/7549acb9610860de1733">ニフティクラウドmobile backendを利用した画像付きメモアプリ作成のポイントまとめ</a></li>
</ul>
</li>
<li>メモ

<ul>
<li>Coffre, 10秒虫食い算アプリ</li>
<li><a href="https://parse.com/">Parse</a>とNCMBの比較</li>
<li>Parseは <strong>2017/01/29(日本時間)</strong> でサービス終了するのでNCMBに乗り換えたい</li>
<li>ParseサーバのソースはGitHubに公開されている</li>
<li>Parseサーバのソースを見るとNode.js(Express)とMongoDBを利用している</li>
<li>Frameworkが提供されているので、Referenceに従ってアプリ側にソースを実装していけば、自分でREST API叩くだとかしなくて良い模様</li>
<li>FrameworkはObjective-C製なので、Bridge-Headerの作成が必要</li>
<li>NCMBはParseと大差なさそう</li>
<li>NCMBは日本語のコミュニティやフォーラムなどがあるので安心</li>
</ul>
</li>
<li>感想

<ul>
<li>いつも自分でNode.jsとMongoDBで構築しちゃうからmBaaS使ったことなかったな〜</li>
</ul>
</li>
</ul>
</li>
<li><p>iOS9で楽になったAutoLayout<br/>
<a href="https://speakerdeck.com/satotakeshi/shi-utukiyanai-ios9dele-ninatutaauto-layout">発表資料</a></p>

<ul>
<li>メモ

<ul>
<li>iOS6で誕生したAutoLayout</li>
<li>徐々に進化して&hellip;iOS9でStackView, NSLayoutAnchorsが出た</li>
<li>入れ子で複雑なレイアウトをStackViewで実現可能</li>
<li>これで等間隔にviewとか並べられるよ</li>
<li>iOS8まではspacingのviewを作成して、それぞれAutoLayoutをつけていた&hellip;</li>
<li>NSLayoutAnchorsが出たことでコードでも1行で制約を書ける(かなりソースコードが短縮される)</li>
<li>NSLayoutConstraintはたいへんだった</li>
<li>Visual Format Language → 複数の制約を一気につけれるが、不正な記法が判明するのが実行時&hellip;。記法が独特すぎる&hellip;</li>
</ul>
</li>
<li>感想

<ul>
<li>Dynamic Typeってあまり気にしたことなかった&hellip;</li>
</ul>
</li>
</ul>
</li>
<li><p>Linterを使って快適なチーム開発をしよう!<br/>
<a href="https://speakerdeck.com/akatsuki174/linterwoshi-tutekuai-shi-natimukai-fa-wosiyou">発表資料</a></p>

<ul>
<li>メモ

<ul>
<li>SwiftLintの話</li>
<li>『(』で引っかかる場合はautocorrect実行してやれば良い</li>
<li>バージョンアップの頻度が高い</li>
</ul>
</li>
<li>感想

<ul>
<li>先日、気になって取り組んだところだったので、復習になった</li>
</ul>
</li>
</ul>
</li>
</ol>


<h4>もくもく会</h4>

<p>ショートセッションの後にもくもく会の時間がありました。<br/>
あまりテーマを決めていなかったものの、1時間〜1時間30分程度の時間だったため、<br/>
あまり大きなことはやらずに基本的なところから見直してみることにしました。</p>

<p>そこで、Swift2.0から追加された新機能3つを試してみることにしました。</p>

<ul>
<li><code>do-catch</code>, <code>try</code>, <code>defer</code></li>
<li><code>guard</code></li>
<li><p><code>Protocol Extension</code></p></li>
<li><p>参考URL</p>

<ul>
<li><a href="https://moneyforward.com/engineers_blog/2015/06/17/swift2/">Swift2.0で追加された新機能 3選</a></li>
<li><a href="http://llcc.hatenablog.com/entry/2015/06/13/235129">Swift2.0で追加されたguard statementを試してみる</a></li>
</ul>
</li>
</ul>


<h4>まとめ</h4>

<p>今回、初めてSwiftビギナーズ勉強会に参加させて頂きましたが、<br/>
日本にはこんなにも幅広い年齢層、職種(専門プログラミングがSwift以外)の方々がSwiftに興味を示しているのだと改めて感じました。<br/>
Objective-Cであれば、基本的なところは抑えられていると思えるようになってきましたが、<br/>
Swiftに関してはまだまだ経験不足で学ぶべきところが多いと感じたのも事実です。<br/>
だからこそやり甲斐があり、モチベーションが上がるんですけどね。<br/>
といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sansan×SONYアプリ勉強会に参加しました]]></title>
    <link href="http://grandbig.github.io/blog/2016/02/16/sansan-sony-study/"/>
    <updated>2016-02-16T19:26:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/02/16/sansan-sony-study</id>
    <content type="html"><![CDATA[<h4>Sansan×SONYアプリ勉強会</h4>

<p>本日は勉強会への参加報告です。<br/>
<a href="http://connpass.com/event/25411/">Sansan×SONYアプリ勉強会</a>に参加してきました。<br/>
なかなか参加したいアプリ関連の勉強会って少ないんですが、今回は面白そうだなと思って、結構、早めに申し込んでいました。<br/>
当日見てみるとキャンセル待ちも数十名になっていたので、珍しく早めに申し込んで良かったなと思いました。<br/>
では、早速、筆者が今回の勉強会で得た感想等々を書いていきます。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>チームでのiOSアプリ開発</h4>

<p>個人で開発するときはさして困らないものの、<br/>
チームで開発すると途端に困る&hellip;それがコンフリクトであることは周知の事実ですが、<br/>
それを如何にして減らしていけるのか<br/>
そんな話を聞いてきました。</p>

<p><a href="http://www.slideshare.net/ssuser65a265/ios-58353672?ref=http://connpass.com/event/25411/presentation/?utm_campaign=new_event_links_to_participant&amp;utm_source=notifications&amp;utm_medium=email&amp;utm_content=detail_btn">スライドシェアの資料</a></p>

<p><strong>【コンフリクトが起こった原因】</strong></p>

<ul>
<li>開発スタイル

<ul>
<li>命名規則, ハードタブとソフトタブが入り交じる, commitの粒度&hellip;は人によって異なる</li>
<li>チーム内の基準を設ける必要がある(Cocoa向けコーディングガイドラインなど)</li>
<li>GitHubとPullRequestで互いにレビューをし合うことで問題を早期発見</li>
</ul>
</li>
<li>Storyboard

<ul>
<li>同時に画面を作ると、コンフリクトが起こるので、複数画面が同じStoryboardに入るのをやめる</li>
<li>1画面1つのStoryboardで作った</li>
</ul>
</li>
<li>Localizable.strings

<ul>
<li>日本語だとUTF-16なのできれいにマージできず、GitHubでdiffが見れない</li>
<li>同時に実装を進めるとコンフリクトが起こる</li>
<li>機能単位に分割して取り組むと良い</li>
</ul>
</li>
<li>project.pbxproj

<ul>
<li>大きい機能追加だと確実にコンフリクトが発生</li>
<li>Editorでも開けないので、完全手直しになる&hellip;</li>
<li><a href="https://github.com/simonwagner/mergepbx">mergepbx</a>を使った

<ul>
<li>α版だったので、適用後に必ず目を通すことにした</li>
</ul>
</li>
</ul>
</li>
<li>証明書 (Code Signing)

<ul>
<li>Xcode上で『Fix Issue』ボタンのあるアラートが出たとき、『Fix Issue』を押すと困ることが起こる</li>
<li>Appleのストレージから証明書をRevokeして秘密鍵が行方不明, CIサーバまで影響なんてことが&hellip;</li>
<li>『Fix Issue』は押さないようにチームで決めた</li>
<li>チームで一人はProvisioning Profileや証明書のことがわかる人を入れる</li>
</ul>
</li>
</ul>


<p><strong>【まとめ】</strong></p>

<ul>
<li>Xcodeでの複数人開発には工夫が必要</li>
<li>マージにかかる労力を減らす→開発前に対策するのが理想</li>
<li>『Fix Issue』は何も解決しないので押さない</li>
</ul>


<h4>家電と繋がるアプリの開発 &ndash; リモコン＆テレビ番組表アプリ &ldquo;TV SideView&rdquo; の事例</h4>

<p>こちらはSONYが出している『TV SideView』アプリに関する話でした。</p>

<p><strong>【目指していること】</strong></p>

<ul>
<li>新しい・優れたユーザ体験(UX)の追求</li>
<li>理想のUX実現のために『家電, モバイル, ゲーム, アプリ』と横断して開発する</li>
</ul>


<p><strong>【家電とアプリの繋がり例】</strong></p>

<ul>
<li><a href="https://www.google.co.jp/chrome/devices/chromecast/">Chrome Cast</a> / <a href="http://www.google.co.jp/intl/ja_jp/nexus/player/">Nexus Player</a> / AirPlay</li>
<li><a href="https://nest.com/">Nest</a></li>
<li><a href="https://nest.com/camera/meet-nest-cam/">Dropcam</a></li>
</ul>


<p><strong>【家電とアプリが繋がることについて】</strong></p>

<ul>
<li>家電の操作について

<ul>
<li>アプリの機能: リモコン画面をスマホに表示, アプリから番組を選択, 番組の視聴/予約</li>
<li>長所: 高度な操作指示が可能なUIを実装できる, ネットワーク・電波があればどこでも使える

<ul>
<li>高度な操作の例: 家の中の機器をまとめて操作することができる</li>
</ul>
</li>
<li>短所: アプリ起動の手間, ブラインド操作できない, 操作フィードバックがない</li>
</ul>
</li>
<li>アプリが家電のディスプレイになる

<ul>
<li>画面のない家電の画面にアプリがなれる</li>
<li>手元にない家電の操作ができる</li>
<li>画面のある家電であっても、セカンドディスプレイになれる</li>
</ul>
</li>
<li>アプリならではの良さ

<ul>
<li>番組の詳細情報の閲覧ができる</li>
<li>人気番組を知る(予約数の人気ランキングで見せる)</li>
</ul>
</li>
<li>スマホが家電のセンサーになる

<ul>
<li>近くの家電を見つける</li>
<li>ユーザの接近を知る</li>
<li>ユーザ行動による家電の操作</li>
<li>音声入力</li>
<li>着信に応じて音量を下げる</li>
</ul>
</li>
<li>家電をパーソナライズ

<ul>
<li>モバイル端末の履歴からおすすめの番組をレコメンド</li>
</ul>
</li>
</ul>


<p><strong>【家電のUXの進化について】</strong></p>

<ul>
<li>アプリと繋がることで家電のUXの進化を加速</li>
<li>アプリであれば機能追加やアップデートが容易なので、家電と組み合わせることでUXの進化が劇的に加速する</li>
</ul>


<p><strong>【家電とアプリを繋げることの大変さ】</strong></p>

<ul>
<li>予約操作はTCPで → 信頼性を重視</li>
<li>機器検索やリモコンマウスカーソル機能はUDPで → パフォーマンスを重視</li>
<li>家電とクラウドサーバでは、可用性と反応速度が大きく異なる</li>
<li>ハード性能・コストの制約</li>
<li>家電の状態変化に対応できるアプリに&hellip;(リモコンで急遽、OFFにされるとか)</li>
<li>世界で10万台以上の家電がBotなどに感染されている&hellip;</li>
</ul>


<p><strong>【SONYでは】</strong></p>

<ul>
<li>TV SideView 1400万DL達成</li>
<li>データドリブンによるアプリ改善(機能の利用頻度, アクセス数を解析)</li>
<li>6週リリース体制(スクラム開発を導入)</li>
</ul>


<h4>アプリの不具合を少なくするために</h4>

<p><a href="http://www.slideshare.net/kenichitatsuhama/ss-58316068">スライドシェアの資料</a></p>

<p><strong>【勉強になったこと】</strong></p>

<ul>
<li>外注では品質担保が難しいというのが通例なのかもしれない</li>
<li>Android Studio Inspect Codeは良さそうなので使ってみたい</li>
<li>InferをInspect Codeと併用させるのはあり</li>
<li>設定で「アクティビティを保持しない」にすることで想定通りの動作をするか見ることで、堅牢なアプリになる<br/>
onCreateを通らない値は復帰しないと覚えておく(想定していた処理が呼ばれない, パラメータがないとかならないように&hellip;)</li>
<li>ViewPagerではFragmentは3つまでしか保持しないので注意</li>
<li><a href="http://tatsu-zine.com/books/master-of-fragments">Master of Fragment (Android Professional Developerシリーズ)</a>は良いらしい</li>
</ul>


<p><strong>【お役立ちツール】</strong></p>

<ul>
<li><a href="https://github.com/RobotiumTech/robotium">Robotium</a></li>
<li><a href="http://eclemma.org/jacoco/">Jacoco</a></li>
</ul>


<h4>Android / iOS アプリのコード共有 &ndash; J2ObjC を使ってみた &ndash;</h4>

<p>J2ObjCは個人的に気になっていたので、話が聞けて良かったです。</p>

<p><strong>【J2ObjCを使うきっかけ】</strong></p>

<ul>
<li>家電連携以上の価値を生み出したい</li>
<li>開発効率を上げる事で目指す</li>
<li>Android開発に強い人が多い</li>
<li>開発の段階、段階で適用が可能</li>
</ul>


<p><strong>【J2ObjCの特徴】</strong></p>

<ul>
<li>Native UI非対応 → UIはPlatform Nativeで開発したほうが良いというスタンス</li>
<li>ビルドが複雑</li>
<li>あくまでも開発量・メンテナンスコストの削減になるのであり、単一コードになるわけではない</li>
</ul>


<p><strong>【J2ObjCを使った結果のサンプル】</strong></p>

<ul>
<li>19%の開発量の削減ができた</li>
<li>Bluetoothの接続・通信開始処理も実装できた</li>
<li>JUnitのテストコードも変換された</li>
</ul>


<p><strong>【お役立ちツール】</strong></p>

<ul>
<li><a href="https://github.com/tomball/j2objc-sample-reversi">j2objc-sample-reversi</a></li>
</ul>


<p>今回、アプリ系の勉強会に久々に参加しましたが、<br/>
自分自身まだまだ知らないこともたくさんあるので非常に勉強になりました。<br/>
また、継続して、気になった勉強会には参加していきたいと思います。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京Node学園付属小学校 1限目に参加してみた！]]></title>
    <link href="http://grandbig.github.io/blog/2016/01/15/node-elementary-school/"/>
    <updated>2016-01-15T19:27:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2016/01/15/node-elementary-school</id>
    <content type="html"><![CDATA[<h4>Node.jsを基礎から見直そう！</h4>

<p>以前、業務でNode.js v0.6.12だったり、v0.10.24だったりを触ってきました。<br/>
しかし個々最近は、ネイティブアプリ開発にかかりっきりになっていたので、Node.jsから遠ざかってしまっていました。<br/>
そんなこともあり、「これじゃいかん！」ということで今回、 <strong>東京Node学園付属小学校 1限目</strong> に参加してみることにしました。</p>

<p>通常のNode学園は行ったことがあったものの、非常にレベルが高いなと感じた経験があり、まずは思い出す足掛けということで&hellip;。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>勉強会の内容と感想</h4>

<p>さて、勉強会の内容と感想について書いていきます。</p>

<h5>オープニング</h5>

<p>teratailでは技術の壁をなくしたい。<br/>
何かサービスを開発するときには、いつも使っている言語を選びがちだけど、一番適した技術を使ったり、新しい技術を導入したりできると良いな〜という感じ。</p>

<p>工数やリソースの問題から、保守的になって実績のあるやり方で進めるパターン多いんだよな〜と思いながら聞いていました笑。</p>

<h5>ゲスト講演</h5>

<p>ゲスト講演はNode.js日本ユーザーグループ代表の古川陽介さんが担当されていました。<br/>
内容はあえてNode.jsではなく、Guillermo Rauch(socket.ioの作者)が提唱した  <strong>7 principles of rich web applications</strong> でした。<br/>
筆者は勉強不足のせいもあって、初めて知りました。</p>

<p>古川さん曰く、実際に7つの原則を満たしているWeb Applicationは存在しないんではないかと&hellip;。<br/>
詳しい内容は<a href="http://yosuke-furukawa.hatenablog.com/entry/2014/11/14/141415">【翻訳】リッチなWebアプリケーションのための7つの原則</a>に書かれています。</p>

<p>筆者個人としてはSPA(Single Page Application)が興味を惹いている理由を知れたり、<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail">RAIL</a>という重要な指標を知れたりと、かなり勉強になりました。</p>

<p>また特に印象的だったのは、 <strong>レイテンシの壁</strong> の話でした。<br/>
通信をする限り、レイテンシは必ず存在するのだと。<br/>
それを処理の仕方で早く見せることができないかと鎬を削る様がとても惹きつけられました。</p>

<p>最近ネイティブ開発ばかりやっていた自分としては、描画に対するレイテンシはあまり気にしていませんでした。<br/>
きちんと考えないとダメだなと。</p>

<p>JavaScriptは7つの原則をクリアできるのだ！！</p>

<h5>LT</h5>

<p>続いて、LTです。<br/>
<strong>東京Node学園付属小学校</strong> という名にふさわしく、知識・技術的についていけないといったことなく、落ち着いて聞くことができました。</p>

<p>以下、聞いたことを箇条書き</p>

<ul>
<li>お役立ちツール

<ul>
<li><a href="http://swagger.io/">SWAGGER</a>
Web APIドキュメント生成ツール</li>
<li><a href="http://nodered.org/">Node-RED</a>
Drug&amp;Dropで簡単にWebアプリを作れるツール</li>
<li><a href="http://loopback.io/">LoopBack</a>
Node.jsベースのBaaSを作れるオープンソース
　</li>
</ul>
</li>
<li>Node.jsが使われているサービス

<ul>
<li>Uber</li>
<li>PayPal(JavaからNode.jsに移行)</li>
<li>NETFLIX
　</li>
</ul>
</li>
<li>Node.jsの良いところ

<ul>
<li>非エンジニアでも簡単にWebアプリが作れる</li>
<li>クライアントとサーバサイド共にJavaScriptで書ける</li>
<li>リアルタイム通信でいろいろなWebアプリを作りたくなる</li>
<li>IoTでも使える</li>
<li>「同時に接続して、チームで協力してゴールを達成する」方向にも注目&hellip;</li>
</ul>
</li>
</ul>


<p>とりあえず、Node.js意欲が湧いてきたので、何か作りたい！！</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS オールスターズ勉強会に参加しました！]]></title>
    <link href="http://grandbig.github.io/blog/2015/02/14/ios-allstars-study/"/>
    <updated>2015-02-14T13:16:00+09:00</updated>
    <id>http://grandbig.github.io/blog/2015/02/14/ios-allstars-study</id>
    <content type="html"><![CDATA[<h4>iOS オールスターズ勉強会</h4>

<p>本日、<a href="http://eventdots.jp/event/311301">iOSオールスターズ勉強会</a>に参加してきました。<br/>
iOSに特化した勉強会やイベントに参加するのは初めてでしたが、かなりいろいろと勉強になりました。<br/>
そして、まだまだ自分はヒヨッコだと痛感させられました。<br/>
まだまだ-1レベルの情弱プログラマーであることを再認識したところで、いつの日かこのブログを<strong>0から始める情弱プログラミング</strong>に変えてみせたいと思いつつ、勉強会で学んだことを報告したいと思います。</p>

<p>勉強会のテーマは下記の通りです。</p>

<ul>
<li>Adaptive Collection View</li>
<li>Swift製ライブラリの良い書き方を考える</li>
<li>let UIWebView as WKWebView</li>
<li>通信のパフォーマンス改善</li>
<li>効率的なアプリ開発のベストプラクティス</li>
<li>WatchKit を実際にさわってみてわかったこと</li>
<li>長生きするために心臓に悪いリリースはもうやめよう</li>
<li>エンジニア戦記 ~ 小さなチーム 大きな未来 ~</li>
<li>まだiOSでリッチな演出に疲弊してるの？</li>
</ul>


<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>




<!-- more -->


<h4>Adaptiva Collection View</h4>

<p><a href="https://speakerdeck.com/ishkawa/adaptive-collection-view">本日の資料</a><br/>
<a href="https://github.com/ishkawa">石川さんのGitHub</a>(近々、大きめのライブラリを公開予定とのこと)</p>

<p>下記はメモ</p>

<ul>
<li>iOS8でViewControllerが進化した</li>
<li>セルを並べてアイテムを表示する系のアプリではiPhone, iPadで実装を分けていた。

<ul>
<li>iPhoneはUITableViewを利用</li>
<li>UICollectionViewを利用</li>
</ul>
</li>
<li>UICollectionViewを使えば、iPhone, iPadで実装を分ける必要がなくなる

<ul>
<li>実装はUICollectionViewFlowLayoutを使えば、割りと簡単にできる</li>
<li>UICollectionViewLayoutAttributeをUITableViewに似せる</li>
<li><a href="https://github.com/ishkawa/sandbox">サンプルコード</a></li>
</ul>
</li>
<li>UICollectionViewを使うと、セルの計算がたいへんなのでは？

<ul>
<li>estimatedItemSizeを設定することで、Self Sizing Cellを利用できる(iOS8から)</li>
<li>NSLayoutConstraintを適切に配置するとセルの大きさを自動的に計算してくれる</li>
<li>iOS7はsystemLayoutSizeFittingSize:をitemSizeForIndexPath:で呼べばOK</li>
</ul>
</li>
</ul>


<p>因みに、この手法の優位性に気づいたのは、<br/>
営業: 『急ぎでiPhoneだけで良いので、この機能を実装してください』<br/>
↓<br/>
UICollectionViewを使って開発<br/>
↓<br/>
営業: 『iPad版も実装してくれてありがとうございます！』
↓<br/>
気づいたらiPad版もできていた</p>

<p>まとめ</p>

<ul>
<li>UITableViewはUICollectionViewである</li>
<li>iPhoneはiPadである</li>
<li>同じコードは２度書かない</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: Cellの並び替え<br/>
A: UITableViewは元々実装されている。UICollectionViewは自分で頑張って実装することになる。<br/>
もしくは諦めてUITableViewを使う</p>

<h4>Swiftで使いやすいAPIを考える</h4>

<p><a href="https://speakerdeck.com/kishikawakatsumi/swiftderaiburariwoshu-kuji-falsepurakuteisu">本日の資料</a><br/>
<a href="https://github.com/kishikawakatsumi">岸川さんGitHub</a></p>

<p>下記はメモ</p>

<ul>
<li><p>Swift製ライブラリの良い書き方を考える</p>

<ul>
<li>人に使われるコードを書くときに、どうすれば良いか</li>
<li>enumが良いという話をすると長くなるので10分でできる話をする</li>
</ul>
</li>
<li><p>Objective-Cとの違い</p>

<ul>
<li>データ型, Optional, オーバーロード, デフォルト引数, メソッドチェーン, エラー処理などの違いがある</li>
</ul>
</li>
<li><p>データ型</p>

<ul>
<li>Class, Struct, Enum, Tuple, Function, Array, Dictionary, Set, Optionalなどがある</li>
<li>Optional型を指定すると、nilを許さない。コンパイル時にわかる(Objective-Cではnilは無視してできていた)</li>
<li>Optionalか否かは明確に設計した方が良い(Swiftは型に厳格な言語なので、明確にして使い方を固めた方が良い)</li>
<li>外に公開しているメソッドは引数にOptionalはつけない(プライベートメソッドはつけても良い)</li>
</ul>
</li>
<li><p>オーバーロード</p>

<ul>
<li>オーバーロードとは引数を変えた同じ名前のメソッドをたくさん用意すること</li>
<li>デフォルト引数は補完がイマイチ</li>
<li>ユーザがメソッドを書いたときに、先に引数の多いメソッドが補完で上がってくると良くない</li>
</ul>
</li>
<li><p>戻り値のオーバーロード</p>

<ul>
<li>戻り値のオーバーロード(NSString, NSData型でそれぞれ返却する場合)はコンパイルエラーが出るので、<code>var let:NSData? = ....</code>と型指定をする</li>
<li>これはリズムが悪いので、メソッド名を分けることにした</li>
</ul>
</li>
<li><p>エラー処理</p>

<ul>
<li>Objective-CならNSErrorのダブルポインタが一般的だけど、Swiftだと実装しにくい</li>
<li>SwiftではEither型を使う(Eitherをユーザが知らないと使えないけど)</li>
<li>自分で定義した型でエラーを返すより、NSErrorを返したほうが良い</li>
</ul>
</li>
<li><p>playground</p>

<ul>
<li>ドキュメントを書くのと一緒にplaygroundをつけてあげると、わかりやすくなって良い</li>
</ul>
</li>
<li><p>Functional style API</p>

<ul>
<li>アドバンストモードで用意すると良い</li>
<li>標準的な書き方と分けて示すと良いと思う</li>
</ul>
</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: Tupleで返すのは？<br/>
A: EitherでなくてTupleで返すのもあり。<br/>
Tupleで受けると、受けては使いづらい。<br/>
検討した結果、やめた。</p>

<h4>let UIWebView as WKWebView</h4>

<p><a href="http://www.slideshare.net/taketo1024/let-ui-webviewaswkwebview">本日の資料</a></p>

<ul>
<li><p>Swiftについて</p>

<ul>
<li>Swiftは数学と相性が良い</li>
</ul>
</li>
<li><p>UIWebVIewとWKWebViewについて</p>

<ul>
<li>UIWebViewはJavaScriptがSafariよりも遅い</li>
<li>WKWebViewはSafari並に速い</li>
<li>iOS7を切る訳にはいかない&hellip;</li>
<li>毎回、バージョンで条件分岐を書いて、処理を分けるのは美しくない&hellip;</li>
<li>複雑な処理は見えないところに置く方が良い(UIWebViewとWKWebViewのぶん機処理を隠蔽せよ)</li>
<li>iOS7と気持よく別れられるように対応しておくと良い</li>
<li><a href="http://techblog.yahoo.co.jp/ios/let-uiwebview-as-wkwebview/">去年のAdvent Calendar</a>にも載っている</li>
</ul>
</li>
</ul>


<p>個人的には参加前から最も注目していた内容でした。<br/>
WKWebViewは実装で使いたいと思っていたものの、現状、条件分岐が多くなりそうで使っていなかったのですが、これを機会に真似て実装したいと思いました。</p>

<p>【Q&amp;A】</p>

<p>Q: UIWebViewとWKWebViewにおけるDelegateメソッドはどうする？<br/>
A: Delegateはそのまま書いている。<br/>
iOS7をサポートしなくなったときにUIWebViewのDelegateの部分だけ消すことを考えている</p>

<p>Q: UIWebViewと揃えるのであればUIWebViewだけ使えば良いのでは？<br/>
A: WKWebViewの良い所は積極的に使っていきたい(処理が速いところとか)<br/>
iOS8ユーザには体験できる部分は体験してほしいと思っている。</p>

<h4>通信のパフォーマンス改善</h4>

<p><a href="http://www.slideshare.net/susieyy/ios-ios-44665266?ref=http://eventdots.jp/event/311301">本日の資料</a><br/>
<a href="https://github.com/wantedly">wantedlyさんのGItHub</a></p>

<p>下記メモ</p>

<ul>
<li><p>そもそも通信のパフォーマンス改善に取り組んだ理由</p>

<ul>
<li>海外進出する上で通信品質の違いに耐えうるか調べる必要があった</li>
<li>海外の通信品質が悪いので、それに耐えうるパフォーマンス改善に取り組んだ</li>
</ul>
</li>
<li><p>ボトルネックを調べた</p>

<ul>
<li>New Relic Mobileでボトルネックを分析した。(大雑把なボトルネック解析には十分)</li>
<li>Pony Debuggerでもっと細かく分析できるものがあった</li>
</ul>
</li>
<li><p><a href="https://github.com/square/PonyDebugger">Pony Debugger</a>の使い方</p>

<ul>
<li>CocoaPodsでiOSアプリ側にいれる。</li>
<li>サーバ側にもモジュールのインストールが必要。中身はPythonでできている</li>
</ul>
</li>
<li><p>ボトルネック調査の結果</p>

<ul>
<li>画像にボトルネックがあった</li>
<li>画像の処理に関して<a href="https://github.com/rs/SDWebImage">SDWebImage</a>を使っていた</li>
<li>まずは、SDWebImageの仕組みから知る必要がある</li>
<li>SDWebImageのバグを発見して、PullRequestを出したらマージされた</li>
<li><a href="http://agilecatcloud.com/2014/12/02/facebook-%E3%81%8C%E8%AA%9E%E3%82%8B%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%EF%BD%A5%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E6%A5%B5%E6%84%8F%EF%BC%9A%E3%81%93%E3%82%8C%E3%81%A7/">Facebookの発展途上国向けの改善施策</a>がネット上に載っていた</li>
</ul>
</li>
<li><p>WebP</p>

<ul>
<li>WebPとはGoogle製のフォーマット(1/3程度のサイズに抑えられる)</li>
<li>SDWebImageはWebPに対応している</li>
<li>wantedlyではサーバはAWSを使っている</li>
<li>WebPに変換する画像サーバを構成するのがたいへんだった</li>
<li><a href="https://github.com/wantedly/nginx-image-server">NginxでWebPに変換するものをGitHubにあげている</a></li>
</ul>
</li>
<li><p>具体的な施策</p>

<ul>
<li>通信帯域により取得する画像サイズを変更する</li>
<li>通信品質は『通信開始・終了の経過時間と受領画像サイズ』から推測</li>
<li>キャッシュ時は計測しない</li>
<li>独自にキャッシュ上に取りに行こうとする画像のサイズよりも大きい物がないか確認するようにしている</li>
<li>実装の可否はデベロッパの通信帯域制限機能で改善結果を確認した</li>
</ul>
</li>
<li><p>他に考えられる対策</p>

<ul>
<li>MessagePackでJSONを圧縮する</li>
<li>SPDYで通信コネクションをまとめる</li>
<li>通信帯域で同時接続数を調整する</li>
</ul>
</li>
</ul>


<h4>効率的なアプリ開発のベストプラクティス</h4>

<p><a href="http://www.slideshare.net/yayugu/ss-44667286">本日の資料</a></p>

<ul>
<li><p>iOSの一大イベントがここ2年連続で実施されている</p>

<ul>
<li>Conference with Developers</li>
</ul>
</li>
<li><p>効率的な開発の必要性</p>

<ul>
<li>メインでない機能を創るときはできる限り効率的に開発したい</li>
</ul>
</li>
<li><p>どうすれば速く開発できるのか</p>

<ul>
<li>やることを減らす</li>
<li>UI, 通信の実装コストを減らす</li>
</ul>
</li>
<li><p>UIの実装コスト</p>

<ul>
<li>端末の性能向上, Auto Layout, Storyboard, Self Sizing Cell</li>
<li>Self Sizing Cellが便利なので、ユーザはiOS8を使って欲しいのが本音</li>
<li>改善の余地としては、React.jsみたいなアプローチ(Viewのdiff &amp; patch)があると良さそう</li>
</ul>
</li>
<li><p>通信の実装コスト</p>

<ul>
<li>仕様に依存。サーバ側が決める。</li>
<li>どちらでも行える処理であれば、サーバ側に処理を任せる。</li>
</ul>
</li>
<li><p>API</p>

<ul>
<li>共通化、RESTにとらわれない</li>
<li>Mantle, JSONModelライブラリの都合に合わせた形で返して欲しい</li>
</ul>
</li>
<li><p>State</p>

<ul>
<li>クライアント側でCacheを持たない</li>
<li>ローカルストアを利用してサーバ側とのdiffがあれば取得しにいく処理はしない</li>
</ul>
</li>
<li><p>サーバ側仕様変更による弊害</p>

<ul>
<li>キレイなRESTful API

<ul>
<li>特化したAPIの作成は断られる。</li>
</ul>
</li>
<li>レガシーサーバ

<ul>
<li>触るのが怖い</li>
<li>リファクタリングするとデグレそう</li>
</ul>
</li>
</ul>
</li>
<li><p>サーバ側担当者の説得の仕方</p>

<ul>
<li>パフォーマンスの向上などメリットを説明</li>
<li>クライアント側の実装の大変さをうったえかける</li>
<li>サーバ側も自分で書く</li>
</ul>
</li>
<li><p>間を取る方法として、中継サーバをたてることも考えられる</p>

<ul>
<li>効率的でないので、やりたくない</li>
<li>中継サーバの処理はClient開発者が書く</li>
<li>ドワンゴはスカラーでProxy Serverを作っていたらしい</li>
</ul>
</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: サーバ側にどこまで処理を任せているかの線引はあるか<br/>
A: ユーザ体験があがるか、重要な機能かの２つによる<br/>
twitterのツイートはオフラインで見れる ⇒ 意味がある<br/>
設定画面がオンラインでないと見れない ⇒ それで良いのでは？</p>

<h4>WatchKitを実際にさわってみてわかったこと</h4>

<p><a href="http://www.slideshare.net/t26v0748/watch-kit-20150214?ref=http://eventdots.jp/event/311301">本日の資料</a><br/>
<a href="https://github.com/shu223">堤さんのGitHub</a></p>

<ul>
<li><p>自己紹介</p>

<ul>
<li>Over&amp;Out その後: ブログを書いている</li>
<li>iOS7-Sampler, iOS8-Samplerを作っている</li>
<li>iOS9-Samplerのアイコンは作成済み</li>
</ul>
</li>
<li><p>WatchKitについて</p>

<ul>
<li>WatchKitはクラスはたったの15個</li>
<li>Watch ExtensionはiPhone側で実行</li>
<li>Watch Appは基本的に表示だけ</li>
</ul>
</li>
<li><p>動的なイメージの表示</p>

<ul>
<li>タイマーを利用する

<ul>
<li>転送か描画が遅い？ ⇒ 非推奨</li>
</ul>
</li>
<li>キャッシュを使う

<ul>
<li>フレームごとの画像はキャッシュしないようにプログラミングガイドに書いてある</li>
</ul>
</li>
<li>Animated Imageを利用する

<ul>
<li>iOS5から追加されているメソッドが役に立つ</li>
</ul>
</li>
</ul>
</li>
<li><p>テキスト入力</p>

<ul>
<li>presentTextInputControllerWith~を使えば良い

<ul>
<li>テキスト入力のインターフェースを表示するメソッド</li>
</ul>
</li>
</ul>
</li>
<li><p>Smart Replies + 音声入力</p>

<ul>
<li>第一引数にフレーズの履いてる, 第二引数に.Plainを渡す</li>
</ul>
</li>
<li><p>絵文字入力</p>

<ul>
<li>第二引数: .allowEmojiを渡せば良い</li>
<li>シミュレータでは提供されていない</li>
</ul>
</li>
<li><p>カスタムUI</p>

<ul>
<li>WatchKit AppではCore Graphics使えない</li>
<li>Appleの公式を見ると、連番アニメーションだった。</li>
</ul>
</li>
<li><p>カスタムフォント</p>

<ul>
<li>iOSと同様の手順で可能</li>
</ul>
</li>
<li><p>インターフェースのオーバレイ</p>

<ul>
<li>WKInterfaceObjectはUIViewのsubview的にインターフェース同士を重ねられない</li>
<li>WKInterfaceGroupのsetBackgroundImage:を活用すればできる</li>
</ul>
</li>
<li><p>originの調整</p>

<ul>
<li>WKInterfaceGroupを活用(ダミーオブジェクト入れて、グループ化)</li>
</ul>
</li>
<li><p>角丸、Watchの画面サイズ分け対応などなど</p></li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: 手軽にアニメーションするには？<br/>
A: <a href="https://github.com/frosty/Flipbook">Flipbook</a>というOSSがある<br/>
デザイナーが作成したものをアプリに入れるなら、動画としてもらう。<br/>
Flashを使っていた人と仕事をしていたときは連番画像を吐き出してもらっていた</p>

<p>Q: Apple Watchで画像の表示について<br/>
A: AnimatedImageのオブジェクトの生成はiOS側でやるので問題ない<br/>
AnimatedImageをWatch側でレンダリングするのは重い？⇒シミュレータでは問題なかった</p>

<h4>長生きするための心臓に悪いリリースはもうやめよう</h4>

<p><a href="https://speakerdeck.com/tokorom/chang-sheng-kisurutamenixin-zang-nie-iririsuhamouyameyou">本日の資料</a></p>

<ul>
<li><p>アプリの申請について</p>

<ul>
<li>バグが見つかって、月々の課金処理に失敗したとしたら&hellip;.非常に怖い</li>
<li>Internal Testersでの最終チェックすると良い</li>
</ul>
</li>
<li><p>テストの質</p>

<ul>
<li>AppStoreに公開されるものと同じ / 違うアプリのテストなのかどうか</li>
<li>Appleの審査の前後のテストなのかどうか</li>
</ul>
</li>
<li><p>Internal Testers</p>

<ul>
<li>iTunes Connectの新機能</li>
<li>iTunes Connectにサブミットしたアプリをテスト可能</li>
<li>iOS8以降でしか使えない</li>
<li>25人までしか使えない</li>
</ul>
</li>
<li><p>Internal Testers vs CI</p>

<ul>
<li>両方使いましょう(比べるものではない)</li>
</ul>
</li>
<li><p>CIの自動化</p>

<ul>
<li><a href="http://kishikawakatsumi.hatenablog.com/entry/20141022/1413963656">Travis CIでiOSアプリのリリース作業を自動化する</a>という記事が良い</li>
</ul>
</li>
<li><p>万が一の事故に対して&hellip;</p>

<ul>
<li>後から見返せない情報をバックアップしておく

<ul>
<li>Build Details: バージョンが進むと過去のバージョンの情報が見れなくなる。スクショをとっておくと良い。</li>
</ul>
</li>
<li>過去のバージョンのアプリをとっておく

<ul>
<li>iTunesで実際に公開されたアプリをipaで持っておく</li>
<li>それをバージョン毎に保管しておくと良い</li>
<li>コードを見たいのであれば、Gitで良いが、そうでないときもある。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>【Q&amp;A】</p>

<p>Q: Internal Testers使うと課金できるのか？<br/>
A:実際に購入ができるわけではない。たぶんsandboxに繋がっていると思う。<br/>
厳密に言うと、課金テストはプロモーションコードでテストするしかない。</p>

<p>Q: 自分でリジェクトしてサブミットし直すと速い気がする<br/>
A: 体感的に速く感じることがある。</p>

<h4>エンジニア戦記 ~小さなチーム 大きな未来 ~</h4>

<p><a href="http://www.slideshare.net/yukihirai52/ss-44668339?ref=http://eventdots.jp/event/311301">本日の資料</a></p>

<ul>
<li><p>クラスメソッド</p>

<ul>
<li>Developers.IOを書いている。</li>
<li>月間平均80万PV</li>
<li>ブログを書いている会社だと思われがち</li>
</ul>
</li>
<li><p>iOSエンジニアとWeb-API担当者間で発生した問題</p>

<ul>
<li>APIの返却データにステータスコードが入っている(HTTPステータスコードとは別に)

<ul>
<li>HTTPステータスコードで返すべき</li>
<li>Web APIのレスポンスに独自ステータスコードを持つべきではない</li>
<li>アプリ側でsuccessなのに、エラーハンドリングをしなくてはならない。</li>
</ul>
</li>
<li>1画面で叩くAPIが多い

<ul>
<li>RESTful APIをしたいがために上記のようなことが生じる</li>
<li>複数回APIを実行することで、エラーが発生しやすくなる</li>
</ul>
</li>
</ul>
</li>
<li><p>iOSエンジニアに求められるもの</p>

<ul>
<li>Web APIの知識は必須</li>
<li>改善案を提案できる力が必要</li>
<li><a href="http://www.oreilly.co.jp/books/9784873116860/">Web API The Good Parts</a>を読もう</li>
</ul>
</li>
</ul>


<p>身に染みる話ばかりで考えさせられるテーマでした。<br/>
筆者はクライアント担当としてネイティブとWebの経験があり、サーバ担当としてAPサーバ開発の経験があるので、どっちが良いとは言い難く&hellip;。</p>

<h4>まだiOSでリッチな演出に疲弊しているの？</h4>

<p><a href="https://speakerdeck.com/ryusukefuda/madaiosderitutinayan-chu-nipi-bi-siterufalse">本日の資料</a></p>

<ul>
<li><p>カヤック自社開発アプリ</p>

<ul>
<li>FILTERS</li>
<li>ダンボッコキッチン</li>
</ul>
</li>
<li><p>リッチな演出で何を使う？</p>

<ul>
<li>Core Animation: コードが大量になる。大量オブジェクトを動かすとたいへん</li>
<li>Unity: ネイティブの機能を使うのにプラグインを書くのでたいへん</li>
<li>Cocos2d: Unityと同じ</li>
<li>OSS: いいものが見つからない</li>
</ul>
</li>
<li><p>SpriteKitが良いのでは？</p>

<ul>
<li>iOS7から追加された2Dゲーム用のフレームワーク</li>
<li>パーティクルがXcodeでプレビューしながら編集可能</li>
<li>UIKitと同様に記述できる</li>
<li>SpriteKitがゲーム以外で使えるのか? ⇒ 使える</li>
<li>SKNode, SKScene, SKViewを使う</li>
<li>GUIでパラメータを簡単にいじることで演出を変えられる(コードを書く必要がない)</li>
<li>パーティクル自体にアニメーションをつけることもできる</li>
<li>UIViewのタッチイベントが効くようにするために、SKViewを透明かつタッチイベントを無効化する</li>
<li><a href="https://github.com/ryusukefuda/SpriteKit-Demo">サンプルコード</a></li>
</ul>
</li>
<li><p>SpriteKitを使うメリット</p>

<ul>
<li>Appleが提供している安心感</li>
<li>既存のコードを邪魔することなく導入可能</li>
<li>デザイナーも利用可能</li>
</ul>
</li>
</ul>


<p>SpriteKitとUIKitを組合せた演出はありであるという結論に至っていました。</p>

<p>【Q&amp;A】</p>

<p>Q: SpriteKitを使った理由<br/>
A: マップとかカメラとの組合せを考えると、SpriteKitを選択した。<br/>
3Dの演出をする場合はUnity一択になる。</p>

<p>Q: パーティクルは重くないか？<br/>
A: 重い。シミュレータだとカクついたりする。<br/>
表示する場所を絞る。(SKViewの大きさを小さくするなど)</p>

<p>といったところで本日はここまで。</p>

<script async src="http://grandbig.github.io//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"style="display:inline-block;width:320px;height:100px"data-ad-client="ca-pub-2881241309408290"data-ad-slot="6603059167"></ins></p>

<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>



]]></content>
  </entry>
  
</feed>
